{
  "indexed_at": "2025-08-21T16:16:12.835902",
  "root": ".",
  "project_structure": {
    "type": "tree",
    "root": ".",
    "tree": [
      ".",
      "\u251c\u2500\u2500 app/ (92 files)",
      "\u2502   \u251c\u2500\u2500 about/ (1 files)",
      "\u2502   \u251c\u2500\u2500 admin/ (1 files)",
      "\u2502   \u251c\u2500\u2500 api/ (50 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 admin/ (6 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 bias-analytics/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 migrate/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 stats/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 sync/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 sync-status/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 verification/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 analytics/ (5 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 conversion/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 kpi/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 performance/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 revenue/ (2 files)",
      "\u2502   \u2502   \u2502       \u2514\u2500\u2500 county/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 attorney-slots/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 claim/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 auth/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 callback/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 test/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 courts/ (4 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 [id]/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 judges/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 by-slug/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 top-by-cases/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 cron/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 daily-sync/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 weekly-sync/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 health/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 judges/ (16 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 [id]/ (6 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 analytics/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 assignments/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 bias-analysis/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 case-outcomes/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 recent-cases/ (1 files)",
      "\u2502   \u2502   \u2502   \u2502   \u2514\u2500\u2500 slots/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 advanced-search/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 by-slug/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 by-state/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 la-county/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 list/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 orange-county/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 recent-decisions/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 redirect/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 related/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 search/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 pricing/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 resolve/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 search/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 security/ (2 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 csp-report/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 ct-report/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 seo/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 search-console/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 sync/ (3 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 courts/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 decisions/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 judges/ (1 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 user/ (4 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 activity/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 bookmarks/ (1 files)",
      "\u2502   \u2502   \u2502   \u251c\u2500\u2500 preferences/ (1 files)",
      "\u2502   \u2502   \u2502   \u2514\u2500\u2500 stats/ (1 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 webhooks/ (1 files)",
      "\u2502   \u2502       \u2514\u2500\u2500 courtlistener/ (1 files)",
      "\u2502   \u251c\u2500\u2500 attorneys/ (1 files)",
      "\u2502   \u251c\u2500\u2500 blog/ (1 files)",
      "\u2502   \u251c\u2500\u2500 case-studies/ (1 files)",
      "\u2502   \u251c\u2500\u2500 compare/ (1 files)",
      "\u2502   \u251c\u2500\u2500 compliance/ (1 files)",
      "\u2502   \u251c\u2500\u2500 cookies/ (1 files)",
      "\u2502   \u251c\u2500\u2500 counties/ (2 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 los-angeles/ (1 files)",
      "\u2502   \u251c\u2500\u2500 courts/ (3 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 [id]/ (1 files)",
      "\u2502   \u251c\u2500\u2500 dashboard/ (2 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 bookmarks/ (1 files)",
      "\u2502   \u251c\u2500\u2500 docs/ (1 files)",
      "\u2502   \u251c\u2500\u2500 features/ (1 files)",
      "\u2502   \u251c\u2500\u2500 forgot-password/ (1 files)",
      "\u2502   \u251c\u2500\u2500 integrations/ (1 files)",
      "\u2502   \u251c\u2500\u2500 judges/ (4 files)",
      "\u2502   \u2502   \u251c\u2500\u2500 [slug]/ (2 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 advanced-search/ (1 files)",
      "\u2502   \u251c\u2500\u2500 jurisdictions/ (2 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 [county]/ (1 files)",
      "\u2502   \u251c\u2500\u2500 legal-specialties/ (1 files)",
      "\u2502   \u251c\u2500\u2500 login/ (1 files)",
      "\u2502   \u251c\u2500\u2500 privacy/ (1 files)",
      "\u2502   \u251c\u2500\u2500 profile/ (1 files)",
      "\u2502   \u251c\u2500\u2500 search/ (1 files)",
      "\u2502   \u251c\u2500\u2500 sign-in/ (1 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 [[...sign-in]]/ (1 files)",
      "\u2502   \u251c\u2500\u2500 sign-up/ (1 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 [[...sign-up]]/ (1 files)",
      "\u2502   \u251c\u2500\u2500 signup/ (1 files)",
      "\u2502   \u251c\u2500\u2500 support/ (1 files)",
      "\u2502   \u251c\u2500\u2500 terms/ (1 files)",
      "\u2502   \u2514\u2500\u2500 welcome/ (1 files)",
      "\u251c\u2500\u2500 components/ (50 files)",
      "\u2502   \u251c\u2500\u2500 ads/ (1 files)",
      "\u2502   \u251c\u2500\u2500 analytics/ (1 files)",
      "\u2502   \u251c\u2500\u2500 courts/ (2 files)",
      "\u2502   \u251c\u2500\u2500 dashboard/ (3 files)",
      "\u2502   \u251c\u2500\u2500 error/ (3 files)",
      "\u2502   \u251c\u2500\u2500 judges/ (22 files)",
      "\u2502   \u2502   \u2514\u2500\u2500 profile/ (6 files)",
      "\u2502   \u251c\u2500\u2500 onboarding/ (1 files)",
      "\u2502   \u251c\u2500\u2500 profile/ (1 files)",
      "\u2502   \u251c\u2500\u2500 providers/ (1 files)",
      "\u2502   \u251c\u2500\u2500 seo/ (4 files)",
      "\u2502   \u2514\u2500\u2500 ui/ (11 files)",
      "\u251c\u2500\u2500 la-county-data/ (1 files)",
      "\u251c\u2500\u2500 lib/ (29 files)",
      "\u2502   \u251c\u2500\u2500 ai/ (1 files)",
      "\u2502   \u251c\u2500\u2500 analytics/ (1 files)",
      "\u2502   \u251c\u2500\u2500 auth/ (1 files)",
      "\u2502   \u251c\u2500\u2500 cache/ (1 files)",
      "\u2502   \u251c\u2500\u2500 courtlistener/ (1 files)",
      "\u2502   \u251c\u2500\u2500 database/ (2 files)",
      "\u2502   \u251c\u2500\u2500 hooks/ (1 files)",
      "\u2502   \u251c\u2500\u2500 middleware/ (1 files)",
      "\u2502   \u251c\u2500\u2500 monitoring/ (1 files)",
      "\u2502   \u251c\u2500\u2500 security/ (1 files)",
      "\u2502   \u251c\u2500\u2500 seo/ (4 files)",
      "\u2502   \u251c\u2500\u2500 supabase/ (2 files)",
      "\u2502   \u251c\u2500\u2500 sync/ (4 files)",
      "\u2502   \u2514\u2500\u2500 utils/ (6 files)",
      "\u251c\u2500\u2500 public/ (1 files)",
      "\u251c\u2500\u2500 scripts/ (87 files)",
      "\u251c\u2500\u2500 supabase/ (7 files)",
      "\u2502   \u2514\u2500\u2500 migrations/ (7 files)",
      "\u251c\u2500\u2500 types/ (3 files)",
      "\u251c\u2500\u2500 package.json",
      "\u2514\u2500\u2500 README.md"
    ]
  },
  "documentation_map": {
    "claude-sub-agents-reference.md": {
      "sections": [
        "Claude Code Sub-Agents Reference",
        "Available Sub-Agents for Task Tool",
        "Programming Languages",
        "Web Frameworks",
        "Backend/APIs",
        "Databases",
        "Cloud/DevOps",
        "Testing",
        "Mobile",
        "AI/ML"
      ],
      "architecture_hints": []
    },
    "CLAUDE.md": {
      "sections": [
        "JudgeFinder Platform - Free Judicial Transparency Tool",
        "Current Status: PRODUCTION READY",
        "Platform Overview",
        "Key Platform Data",
        "Recent Major Implementations",
        "Technical Architecture",
        "Revenue System (Inactive)",
        "Platform Positioning",
        "Files Structure",
        "Current Session Commands"
      ],
      "architecture_hints": []
    },
    "COMPREHENSIVE_MIGRATION_GUIDE.md": {
      "sections": [
        "JudgeFinder Platform - Comprehensive Migration Guide",
        "Overview",
        "Table of Contents",
        "Migration Summary",
        "What Was Implemented",
        "Migration Timeline",
        "Database Schema Updates",
        "New Tables Created",
        "Enhanced Existing Tables",
        "Performance Indexes"
      ],
      "architecture_hints": []
    },
    "DATABASE_MIGRATION_GUIDE.md": {
      "sections": [
        "Database Schema Migration Guide",
        "CourtListener Integration & Judge-Court Relationships",
        "Overview",
        "Migration Files",
        "1. Core Migrations (`supabase/migrations/`)",
        "2. Migration Scripts (`scripts/`)",
        "Schema Changes",
        "Courts Table Additions",
        "Judges Table Additions",
        "New Judge-Court Positions Table"
      ],
      "architecture_hints": []
    },
    "DEPLOYMENT_CHECKLIST.md": {
      "sections": [
        "JudgeFinder Platform - Production Deployment Checklist",
        "Pre-Deployment Security Audit \u2705",
        "Environment Variables",
        "Database Security",
        "Application Security",
        "Authentication & Authorization",
        "Performance & Monitoring",
        "Caching Strategy",
        "Analytics & Monitoring",
        "Rate Limiting"
      ],
      "architecture_hints": []
    },
    "DEPLOYMENT_STATUS.md": {
      "sections": [
        "JudgeFinder Platform - Deployment Status",
        "\u2705 **COMPLETED TASKS**",
        "Database Infrastructure",
        "User Dashboard System",
        "SEO & Performance",
        "\u26a0\ufe0f **PENDING MANUAL TASK**",
        "Missing RPC Function (PRIORITY: HIGH)",
        "\ud83d\udcca **CURRENT PLATFORM STATUS**",
        "\u2705 Working Features",
        "\ud83d\udd27 Development Server"
      ],
      "architecture_hints": []
    },
    "ENVIRONMENT_SETUP_GUIDE.md": {
      "sections": [
        "\ud83d\udd27 Environment Setup Guide - JudgeFinder Platform",
        "Quick Start",
        "1. Development Setup",
        "Copy environment template",
        "Generate production secrets (for later use)",
        "2. Required Environment Variables",
        "Database (Supabase)",
        "Authentication (Clerk)",
        "Site Configuration",
        "Generated Security Keys (use: node scripts/generate-production-secrets.js)"
      ],
      "architecture_hints": []
    },
    "IMPLEMENTATION_SUMMARY.md": {
      "sections": [
        "JudgeFinder Platform - Final Implementation Summary",
        "\ud83c\udfaf **PROJECT COMPLETION STATUS: READY FOR PRODUCTION**",
        "\u2705 **1. THREE AD SLOTS ON JUDGE PROFILES**",
        "\u2705 **2. COMPREHENSIVE SEO STRATEGY FOR #1 GOOGLE RANKINGS**",
        "\ud83d\ude80 **SEO FEATURES IMPLEMENTED**",
        "\ud83d\udcca **EXPECTED SEO RESULTS**",
        "\ud83d\udd27 **CONFIGURATION REQUIRED**",
        "\ud83d\udcc8 **MONITORING & OPTIMIZATION**"
      ],
      "architecture_hints": []
    },
    "MIGRATION_FINAL_INSTRUCTIONS.md": {
      "sections": [
        "Database Migration Final Instructions",
        "Current Status",
        "Required Manual Steps",
        "Step 1: Execute Complete Migration SQL",
        "Step 2: Run Post-Migration Data Population",
        "Step 3: Verify Migration Success",
        "Step 4: Test Application",
        "Migration Content Summary",
        "New Columns",
        "New Table: judge_court_positions"
      ],
      "architecture_hints": []
    },
    "MIGRATION_GUIDE.md": {
      "sections": [
        "Database Migration Guide",
        "Status: Ready for Manual Migration \u2705",
        "Quick Steps",
        "What Was Fixed",
        "What Gets Created",
        "User Tables",
        "Judge Enhancements",
        "After Migration"
      ],
      "architecture_hints": []
    },
    "MIGRATION_INSTRUCTIONS.md": {
      "sections": [
        "Database Migration Instructions",
        "Current Status",
        "Required Manual Steps",
        "Step 1: Execute Schema Changes",
        "Step 2:"
      ],
      "architecture_hints": []
    },
    "MIGRATION_STATUS.md": {
      "sections": [
        "Database Migration Status Report",
        "Current Status: \u26a0\ufe0f REQUIRES MANUAL SQL EXECUTION",
        "What's Been Completed \u2705",
        "1. Migration Scripts Created",
        "2. Schema Analysis Completed",
        "3. Backup Created",
        "What Requires Manual Action \u26a0\ufe0f",
        "Step 1: Execute SQL in Supabase Dashboard",
        "Step 2: Run Automated Migration",
        "Current Database State \ud83d\udcca"
      ],
      "architecture_hints": []
    },
    "PERFORMANCE_IMPROVEMENTS.md": {
      "sections": [
        "Performance Improvements Applied",
        "Summary",
        "Key Optimizations Implemented",
        "1. **Search Debouncing** \u2705",
        "2. **Combined API Endpoints** \u2705",
        "3. **Skeleton Loading Components** \u2705",
        "4. **Optimized Loading States** \u2705",
        "5. **Better Error Handling** \u2705",
        "6. **Database Performance** \u2705",
        "Performance Metrics"
      ],
      "architecture_hints": []
    },
    "PRODUCTION_SETUP.md": {
      "sections": [
        "JudgeFinder Platform - Production Setup Guide",
        "Environment Variables Configuration",
        "1. Database & Authentication",
        "Supabase Production Database",
        "Clerk Production Authentication",
        "2. Site Configuration",
        "Production URL",
        "Security Headers",
        "3. API Keys & Services",
        "CourtListener Production API"
      ],
      "architecture_hints": []
    },
    "README.md": {
      "sections": [
        "JudgeFinder Platform",
        "\ud83c\udfaf Current Status: Phase 5D @deploy",
        "\ud83d\udcb0 Revenue Model",
        "\ud83d\uddfa\ufe0f Geographic Coverage",
        "\u2705 Active Counties (1,130 judges)",
        "\ud83d\udcca Market Intelligence",
        "\ud83c\udfd7\ufe0f Architecture & Tech Stack",
        "Frontend",
        "Backend",
        "Data Sources"
      ],
      "architecture_hints": []
    },
    "RLS_IMPLEMENTATION_REPORT.md": {
      "sections": [
        "Row Level Security (RLS) Implementation Report",
        "JudgeFinder Platform - Judicial Transparency Tool",
        "Executive Summary",
        "Database Analysis Results",
        "Key Issues Identified & Resolved",
        "Security Model Implementation",
        "Implementation Files",
        "Deployment Steps"
      ],
      "architecture_hints": []
    },
    "SEO_ENHANCEMENTS_SUMMARY.md": {
      "sections": [
        "Judge Profile Page SEO Enhancements Summary",
        "Overview",
        "\ud83c\udfaf Key Enhancements Implemented",
        "1. Canonical URL Implementation",
        "2. Advanced Redirect Handling",
        "3. Comprehensive Meta Tags & Structured Data",
        "4. Advanced SEO Features",
        "\ud83d\udcc1 Files Modified/Created",
        "Modified Files",
        "Created Files"
      ],
      "architecture_hints": []
    },
    "VALIDATION_SUMMARY.md": {
      "sections": [
        "Court-Judge Relationship Validation Summary",
        "\ud83c\udf89 Implementation Complete",
        "\ud83d\udccb What Was Created",
        "1. Comprehensive Validation Script",
        "2. User-Friendly Runner Script  ",
        "3. Comprehensive Documentation",
        "4. Package.json Integration",
        "\u2705 Success Criteria Achieved",
        "Primary Goals \u2705",
        "Validation Results \u2705"
      ],
      "architecture_hints": []
    },
    "scripts\\README-courtlistener-judges-sync.md": {
      "sections": [
        "CourtListener Judges Sync Script",
        "Overview",
        "Key Features",
        "Files",
        "Prerequisites",
        "Environment Variables Required:",
        "Database Requirements:",
        "Usage",
        "Test the System First:",
        "Run Full Sync:"
      ],
      "architecture_hints": []
    },
    "scripts\\README-courtlistener-sync.md": {
      "sections": [
        "CourtListener Courts Sync Script",
        "Overview",
        "Features",
        "Files",
        "Prerequisites",
        "Environment Variables Required:",
        "Database Schema:",
        "Usage",
        "Test the Connection First:",
        "Run Full Sync:"
      ],
      "architecture_hints": []
    },
    "scripts\\SUMMARY-courtlistener-judges-sync.md": {
      "sections": [
        "CourtListener Judges Sync - Implementation Summary",
        "\ud83c\udfaf Completed Implementation",
        "\ud83d\udcc1 Files Created",
        "1. `sync-courtlistener-judges.js` - Main Production Script",
        "2. `test-courtlistener-judges-sync.js` - Test Script",
        "3. `README-courtlistener-judges-sync.md` - Documentation",
        "4. `SUMMARY-courtlistener-judges-sync.md` - This Summary",
        "\ud83d\udd27 Key Technical Innovations",
        "Position-Based Court Mapping",
        "Position Types Supported"
      ],
      "architecture_hints": []
    },
    "scripts\\VALIDATION_README.md": {
      "sections": [
        "Court-Judge Relationship Validation Suite",
        "Overview",
        "Quick Start",
        "Prerequisites",
        "Running Validation",
        "Quick validation",
        "Full validation  ",
        "Help",
        "Validation Categories",
        "1. Court-Judge Relationship Validation \u2705"
      ],
      "architecture_hints": []
    }
  },
  "directory_purposes": {
    "lib": "Library code and shared modules",
    "scripts": "Build and utility scripts",
    "app\\docs": "Project documentation",
    "app\\legal-specialties": "Test specifications",
    "app\\api\\courts": "API routes and endpoints",
    "app\\api\\health": "API routes and endpoints",
    "app\\api\\search": "API routes and endpoints",
    "app\\api\\admin\\bias-analytics": "API routes and endpoints",
    "app\\api\\admin\\migrate": "API routes and endpoints",
    "app\\api\\admin\\stats": "API routes and endpoints",
    "app\\api\\admin\\sync": "API routes and endpoints",
    "app\\api\\admin\\sync-status": "API routes and endpoints",
    "app\\api\\admin\\verification": "API routes and endpoints",
    "app\\api\\analytics\\conversion": "API routes and endpoints",
    "app\\api\\analytics\\kpi": "API routes and endpoints",
    "app\\api\\analytics\\performance": "API routes and endpoints",
    "app\\api\\analytics\\revenue": "API routes and endpoints",
    "app\\api\\analytics\\revenue\\county": "API routes and endpoints",
    "app\\api\\attorney-slots\\claim": "API routes and endpoints",
    "app\\api\\auth\\callback": "API routes and endpoints",
    "app\\api\\auth\\test": "Test files and test utilities",
    "app\\api\\courts\\by-slug": "API routes and endpoints",
    "app\\api\\courts\\top-by-cases": "API routes and endpoints",
    "app\\api\\courts\\[id]\\judges": "API routes and endpoints",
    "app\\api\\cron\\daily-sync": "API routes and endpoints",
    "app\\api\\cron\\weekly-sync": "API routes and endpoints",
    "app\\api\\judges\\advanced-search": "API routes and endpoints",
    "app\\api\\judges\\by-slug": "API routes and endpoints",
    "app\\api\\judges\\by-state": "API routes and endpoints",
    "app\\api\\judges\\la-county": "API routes and endpoints",
    "app\\api\\judges\\list": "API routes and endpoints",
    "app\\api\\judges\\orange-county": "API routes and endpoints",
    "app\\api\\judges\\recent-decisions": "API routes and endpoints",
    "app\\api\\judges\\redirect": "API routes and endpoints",
    "app\\api\\judges\\related": "API routes and endpoints",
    "app\\api\\judges\\search": "API routes and endpoints",
    "app\\api\\judges\\[id]\\analytics": "API routes and endpoints",
    "app\\api\\judges\\[id]\\assignments": "API routes and endpoints",
    "app\\api\\judges\\[id]\\bias-analysis": "API routes and endpoints",
    "app\\api\\judges\\[id]\\case-outcomes": "API routes and endpoints",
    "app\\api\\judges\\[id]\\recent-cases": "API routes and endpoints",
    "app\\api\\judges\\[id]\\slots": "API routes and endpoints",
    "app\\api\\pricing\\resolve": "API routes and endpoints",
    "app\\api\\security\\csp-report": "API routes and endpoints",
    "app\\api\\security\\ct-report": "API routes and endpoints",
    "app\\api\\seo\\search-console": "API routes and endpoints",
    "app\\api\\sync\\courts": "API routes and endpoints",
    "app\\api\\sync\\decisions": "API routes and endpoints",
    "app\\api\\sync\\judges": "API routes and endpoints",
    "app\\api\\user\\activity": "API routes and endpoints",
    "app\\api\\user\\bookmarks": "API routes and endpoints",
    "app\\api\\user\\preferences": "API routes and endpoints",
    "app\\api\\user\\stats": "API routes and endpoints",
    "app\\api\\webhooks\\courtlistener": "API routes and endpoints",
    "lib\\auth": "Authentication and authorization logic",
    "lib\\middleware": "Middleware functions and handlers",
    "lib\\utils": "Shared utility functions and helpers",
    "supabase\\migrations": "Database migration files"
  },
  "stats": {
    "total_files": 291,
    "total_directories": 140,
    "fully_parsed": {
      "typescript": 173,
      "javascript": 75
    },
    "listed_only": {
      "json": 12,
      "sql": 29,
      "css": 1,
      "shell": 1
    },
    "markdown_files": 22
  },
  "files": {
    ".eslintrc.json": {
      "language": "json",
      "parsed": false
    },
    "court-judge-validation-report.json": {
      "language": "json",
      "parsed": false
    },
    "database-integrity-report.json": {
      "language": "json",
      "parsed": false
    },
    "deploy-rpc-function.sql": {
      "language": "sql",
      "parsed": false
    },
    "fix-rpc-function.sql": {
      "language": "sql",
      "parsed": false
    },
    "fixed-rpc-function.sql": {
      "language": "sql",
      "parsed": false
    },
    "instrumentation.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "register": {
          "calls": [
            "init"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "constants": {
        "SENTRY_DSN": "value"
      },
      "call_graph": {}
    },
    "judge-slug-mappings.json": {
      "language": "json",
      "parsed": false
    },
    "JudgeFinderNavLogo.jsx": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "framer-motion"
      ],
      "functions": {
        "JudgeFinderNavLogo": "()",
        "handleMouseMove": "(e)"
      },
      "classes": {},
      "variables": [
        "mouseX",
        "mouseY",
        "rotateX",
        "rotateY",
        "handleMouseMove",
        "rect",
        "centerX",
        "centerY"
      ],
      "call_graph": {}
    },
    "middleware.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Middleware",
      "imports": [
        "@clerk/nextjs/server",
        "next/server",
        "@/lib/middleware/judge-redirects"
      ],
      "functions": {
        "middleware": "(request: NextRequest)"
      },
      "classes": {},
      "variables": [
        "isProtectedRoute",
        "isAdminRoute",
        "judgeRedirect",
        "response",
        "permissionsPolicy",
        "isDevelopment",
        "csp",
        "config"
      ],
      "call_graph": {}
    },
    "next.config.js": {
      "language": "javascript",
      "parsed": false,
      "purpose": "Configuration"
    },
    "package-lock.json": {
      "language": "json",
      "parsed": false
    },
    "package.json": {
      "language": "json",
      "parsed": false
    },
    "postcss.config.js": {
      "language": "javascript",
      "parsed": false,
      "purpose": "Configuration"
    },
    "PROJECT_INDEX.json": {
      "language": "json",
      "parsed": false
    },
    "sentry.client.config.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Configuration"
    },
    "tailwind.config.js": {
      "language": "javascript",
      "parsed": false,
      "purpose": "Configuration"
    },
    "tsconfig.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    "update-judge-slugs.sql": {
      "language": "sql",
      "parsed": false
    },
    "vercel.json": {
      "language": "json",
      "parsed": false
    },
    ".claude\\settings.local.json": {
      "language": "json",
      "parsed": false,
      "purpose": "Configuration"
    },
    ".cursor\\mcp.json": {
      "language": "json",
      "parsed": false
    },
    "app\\error.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react"
      ],
      "functions": {
        "Error": "({ error, reset, }: { error: Error & { digest?: string } reset: ()"
      },
      "classes": {},
      "variables": [
        "errorData"
      ],
      "call_graph": {}
    },
    "app\\global-error.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "GlobalError": "({ error, reset, }: { error: Error & { digest?: string } reset: ()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\globals.css": {
      "language": "css",
      "parsed": false
    },
    "app\\layout.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/components/providers/Providers",
        "@/components/ui/Header",
        "@/components/ui/Footer",
        "@/components/error/GlobalErrorBoundary",
        "next"
      ],
      "functions": {
        "RootLayout": "({ children, }: { children: React.ReactNode })"
      },
      "classes": {},
      "variables": [
        "metadata"
      ],
      "call_graph": {}
    },
    "app\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/components/judges/SearchSection",
        "@/components/judges/PopularCourts",
        "@/components/ui/WhatYoullLearn",
        "@/components/ui/WhyJudgeResearch",
        "@/components/seo/StructuredData",
        "next/link"
      ],
      "functions": {
        "HomePage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\sitemap.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/lib/supabase/server",
        "@/lib/utils/slug"
      ],
      "functions": {
        "sitemap": "async (): Promise<MetadataRoute.Sitemap>"
      },
      "classes": {},
      "variables": [
        "siteUrl",
        "supabase",
        "judgeEntries",
        "canonicalSlug",
        "lastModified",
        "courtEntries",
        "slug"
      ],
      "call_graph": {}
    },
    "app\\about\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react"
      ],
      "functions": {
        "AboutPage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\admin\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs/server",
        "next/navigation",
        "@/lib/auth/admin",
        "@/components/dashboard/AdminDashboard"
      ],
      "functions": {
        "AdminPage": "async ()"
      },
      "classes": {},
      "variables": [
        "userIsAdmin",
        "metadata"
      ],
      "call_graph": {}
    },
    "app\\api\\admin\\bias-analytics\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@clerk/nextjs/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "calls": [
            "calculateBiasAnalytics"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "calculateBiasAnalytics": {
          "signature": "async (judges: any[], cases: any[], riskFilter?: string | null): Promise<BiasAnalyticsData>",
          "called_by": [
            "GET"
          ]
        }
      },
      "classes": {},
      "variables": [
        "jurisdiction",
        "riskLevel",
        "supabase",
        "judgesQuery",
        "analyticsData",
        "casesByJudge",
        "judgeMetrics",
        "judgeCases",
        "settledCases",
        "settlementRate",
        "caseTypeGroups",
        "type",
        "caseTypeRates",
        "settled",
        "avgCaseTypeRate",
        "variance",
        "consistencyScore",
        "casesWithDuration",
        "avgDuration",
        "filing",
        "decision",
        "speedScore",
        "filteredJudgeMetrics",
        "totalJudges",
        "avgConsistencyScore",
        "avgSettlementRate",
        "potentialBiasFlags",
        "casesAnalyzed",
        "consistencyRanges",
        "consistencyDistribution",
        "count",
        "caseTypeStats",
        "settlementPatterns",
        "months",
        "temporalTrends",
        "jurisdictionStats",
        "geographicDistribution",
        "relevantMetrics",
        "judge",
        "valueRanges",
        "caseValueImpact"
      ],
      "interfaces": {
        "BiasAnalyticsData": {}
      },
      "call_graph": {}
    },
    "app\\api\\admin\\migrate\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "POST": {
          "calls": [
            "generateSlug"
          ],
          "signature": "async (request: NextRequest)"
        },
        "generateSlug": {
          "signature": "(name: string, id: string): string",
          "called_by": [
            "POST",
            "GET",
            "createCanonicalSlug",
            "generateSlugVariations",
            "nameToSlug",
            "generateAllSlugs",
            "generateMissingSlugs",
            "generateMissingSlugs"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "judgeColumns",
        "hasJudgeSlug",
        "courtColumns",
        "hasCourtSlug",
        "slug",
        "cleanName",
        "shortId"
      ],
      "call_graph": {}
    },
    "app\\api\\admin\\stats\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "@clerk/nextjs/server",
        "@/lib/auth/admin",
        "@/lib/supabase/server",
        "next/server"
      ],
      "functions": {
        "GET": {
          "signature": "async ()",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "lastSyncTime"
      ],
      "call_graph": {}
    },
    "app\\api\\admin\\sync\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "@clerk/nextjs/server",
        "@/lib/auth/admin",
        "next/server"
      ],
      "functions": {
        "POST": "async (request: Request)"
      },
      "classes": {},
      "variables": [
        "body"
      ],
      "call_graph": {}
    },
    "app\\api\\admin\\sync-status\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@supabase/supabase-js",
        "@/lib/sync/queue-manager",
        "@/lib/utils/logger"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (request: NextRequest)",
        "determineOverallHealth": "(healthMetrics: any[], queueStats: any, successRate: number): string",
        "calculateUptime": "(recentLogs: any[]): number"
      },
      "classes": {},
      "variables": [
        "runtime",
        "apiKey",
        "supabase",
        "queueManager",
        "queueStats",
        "now",
        "oneDayAgo",
        "oneWeekAgo",
        "dailySuccessRate",
        "weeklySuccessRate",
        "avgDuration",
        "status",
        "body",
        "action",
        "jobId",
        "cancelledCount",
        "cleanupResult",
        "pendingJobs",
        "successfulRuns"
      ],
      "call_graph": {}
    },
    "app\\api\\admin\\verification\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "POST": "async (req: NextRequest)"
      },
      "classes": {},
      "variables": [
        "supabase"
      ],
      "call_graph": {}
    },
    "app\\api\\analytics\\conversion\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "next/headers"
      ],
      "functions": {
        "GET": {
          "signature": "async (req: Request)",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (req: Request)",
        "PATCH": "async (req: Request)"
      },
      "classes": {},
      "variables": [
        "runtime",
        "url",
        "timeframe",
        "funnel",
        "supabase",
        "now",
        "startDate",
        "query",
        "funnelStages",
        "stageMetrics",
        "stageData",
        "conversionRates",
        "i",
        "current",
        "next",
        "rate",
        "sourceMetrics",
        "source",
        "dailyTrends",
        "date",
        "body",
        "headersList",
        "forwardedFor",
        "userAgent",
        "ip",
        "today"
      ],
      "call_graph": {}
    },
    "app\\api\\analytics\\kpi\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async ()",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "runtime",
        "supabase",
        "endDate",
        "startDate",
        "californiaJudges",
        "platformCoverage",
        "availableSlots",
        "revenueMonthlyPotential",
        "revenueAnnualPotential",
        "searchActivity",
        "dailyAverageSearches",
        "judgesWithCourts",
        "dataQualityScore",
        "originalJudgeCount",
        "growthRate",
        "kpiData"
      ],
      "call_graph": {}
    },
    "app\\api\\analytics\\performance\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "POST": "async (request: NextRequest)",
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "body",
        "supabase",
        "performanceIssue",
        "url",
        "pageType",
        "days",
        "query",
        "aggregated"
      ],
      "call_graph": {}
    },
    "app\\api\\analytics\\revenue\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (req: Request)",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (req: Request)",
        "PATCH": "async (req: Request)"
      },
      "classes": {},
      "variables": [
        "runtime",
        "url",
        "timeframe",
        "metric",
        "supabase",
        "isAdmin",
        "now",
        "startOfMonth",
        "startOfYear",
        "startOfWeek",
        "dateFilter",
        "revenueQuery",
        "totalRevenue",
        "transactionCount",
        "averageOrderValue",
        "visitors",
        "signups",
        "purchases",
        "upsells",
        "conversionRate",
        "signupRate",
        "upsellRate",
        "mrr",
        "revenueByDay",
        "date",
        "previousPeriodStart",
        "previousTotal",
        "growthRate",
        "campaignData",
        "body",
        "today",
        "yesterday",
        "dailyTotal",
        "dailyConversions",
        "dailyVisitors",
        "dailyConversionRate"
      ],
      "call_graph": {}
    },
    "app\\api\\analytics\\revenue\\county\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "calls": [
            "generateCompetitiveAnalysis",
            "generateRevenueForecasting",
            "getCountyAnalytics"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "getCountyAnalytics": {
          "calls": [
            "createEmptyCountyAnalytics",
            "getGrowthPotential"
          ],
          "signature": "async (supabase: any, county: Exclude<County, 'all'>, filter: string)",
          "called_by": [
            "GET"
          ]
        },
        "createEmptyCountyAnalytics": {
          "signature": "(county: Exclude<County, 'all'>)",
          "called_by": [
            "getCountyAnalytics"
          ]
        },
        "getGrowthPotential": {
          "signature": "(occupancyRate: number, judgesCount: number): string",
          "called_by": [
            "getCountyAnalytics"
          ]
        },
        "generateRevenueForecasting": {
          "signature": "(countyAnalytics: any[], totalAnalytics: any)",
          "called_by": [
            "GET"
          ]
        },
        "generateCompetitiveAnalysis": {
          "signature": "(countyAnalytics: any[])",
          "called_by": [
            "GET"
          ]
        }
      },
      "classes": {},
      "variables": [
        "county",
        "includeForecasting",
        "includeCompetitiveAnalysis",
        "supabase",
        "analytics",
        "totalAnalytics",
        "forecasting",
        "competitiveAnalysis",
        "judgesCount",
        "totalSlots",
        "occupiedSlots",
        "currentRevenue",
        "activeSlots",
        "availableSlots",
        "potentialRevenue",
        "revenueGap",
        "occupancyRate",
        "currentOccupancyRate",
        "monthlyGrowthRate",
        "maxOccupancyRate",
        "projections",
        "projectedOccupancyRate",
        "i",
        "remainingCapacity",
        "projectedOccupiedSlots",
        "projectedRevenue",
        "sortedCounties",
        "totalRevenue"
      ],
      "call_graph": {}
    },
    "app\\api\\attorney-slots\\claim\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/stripe"
      ],
      "functions": {
        "POST": "async (req: NextRequest)"
      },
      "classes": {},
      "variables": [
        "body",
        "siteUrl",
        "tier",
        "session"
      ],
      "call_graph": {}
    },
    "app\\api\\auth\\callback\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "url",
        "redirectTo",
        "supabase",
        "meta",
        "role"
      ],
      "call_graph": {}
    },
    "app\\api\\auth\\test\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@clerk/nextjs/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "user",
        "supabase"
      ],
      "call_graph": {}
    },
    "app\\api\\courts\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "calls": [
            "from"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "q",
        "limit",
        "page",
        "type",
        "jurisdiction",
        "supabase",
        "from",
        "to",
        "queryBuilder",
        "totalCount",
        "hasMore",
        "result",
        "response"
      ],
      "call_graph": {}
    },
    "app\\api\\courts\\by-slug\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/utils/slug",
        "@/lib/cache/simple-cache"
      ],
      "functions": {
        "GET": {
          "calls": [
            "lookupCourt"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "lookupCourt": {
          "calls": [
            "findSimilarCourtSlugs",
            "logQueryPerformance"
          ],
          "signature": "async (slug: string): Promise<CourtLookupResult>",
          "called_by": [
            "GET"
          ]
        },
        "findSimilarCourtSlugs": {
          "calls": [
            "calculateStringSimilarity"
          ],
          "signature": "(targetSlug: string, courts: any[]): Court[]",
          "called_by": [
            "lookupCourt"
          ]
        },
        "calculateStringSimilarity": {
          "calls": [
            "levenshteinDistance"
          ],
          "signature": "(str1: string, str2: string): number",
          "called_by": [
            "findSimilarCourtSlugs",
            "findSimilarSlugs"
          ]
        },
        "levenshteinDistance": {
          "signature": "(str1: string, str2: string): number",
          "called_by": [
            "calculateStringSimilarity",
            "calculateStringSimilarity"
          ]
        },
        "logQueryPerformance": {
          "signature": "async (queryType: string, executionTime: number, params: any)",
          "called_by": [
            "lookupCourt"
          ]
        }
      },
      "classes": {},
      "variables": [
        "slug",
        "result",
        "response",
        "cacheKey",
        "cachedResult",
        "supabase",
        "startTime",
        "slugCourt",
        "slugError",
        "slugToName",
        "bestMatch",
        "alternatives",
        "maxProcessed",
        "i",
        "court",
        "courtSlug",
        "similarity",
        "maxLength",
        "distance",
        "matrix",
        "j"
      ],
      "interfaces": {
        "CourtLookupResult": {}
      },
      "call_graph": {}
    },
    "app\\api\\courts\\top-by-cases\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "calls": [
            "calculateTrend",
            "generateSlug"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "generateSlug": {
          "signature": "(name: string): string",
          "called_by": [
            "POST",
            "GET",
            "createCanonicalSlug",
            "generateSlugVariations",
            "nameToSlug",
            "generateAllSlugs",
            "generateMissingSlugs",
            "generateMissingSlugs"
          ]
        },
        "calculateTrend": {
          "signature": "(recent: number, older: number): string",
          "called_by": [
            "GET"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "courtsWithEstimatedCases",
        "baseEstimate",
        "yearlyEstimate",
        "trendOptions",
        "trend",
        "result",
        "response",
        "formattedCourts",
        "change",
        "roundedChange"
      ],
      "call_graph": {}
    },
    "app\\api\\courts\\[id]\\judges\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/utils/logger",
        "@/lib/utils/validation",
        "zod"
      ],
      "functions": {
        "GET": {
          "calls": [
            "from",
            "inferPositionType",
            "inferStatus"
          ],
          "signature": "async (request: NextRequest, { params }: { params: { id: string } })",
          "called_by": [
            "POST"
          ]
        },
        "inferPositionType": {
          "signature": "(judgeName: string): string",
          "called_by": [
            "GET"
          ]
        },
        "inferStatus": {
          "signature": "(judge: Judge): string",
          "called_by": [
            "GET"
          ]
        }
      },
      "classes": {},
      "variables": [
        "courtIdParamsSchema",
        "startTime",
        "paramsValidation",
        "queryValidation",
        "supabase",
        "from",
        "to",
        "queryBuilder",
        "judges",
        "totalCount",
        "hasMore",
        "result",
        "response",
        "duration",
        "name"
      ],
      "interfaces": {
        "JudgeWithPosition": {
          "extends": [
            "Judge"
          ]
        },
        "CourtJudgesResponse": {}
      },
      "call_graph": {}
    },
    "app\\api\\cron\\daily-sync\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/sync/queue-manager",
        "@/lib/utils/logger"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (request: NextRequest)"
      },
      "classes": {},
      "variables": [
        "runtime",
        "maxDuration",
        "startTime",
        "authHeader",
        "queueManager",
        "decisionJobId",
        "judgeJobId",
        "duration",
        "apiKey",
        "body",
        "force",
        "jobs"
      ],
      "call_graph": {}
    },
    "app\\api\\cron\\weekly-sync\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/sync/queue-manager",
        "@/lib/utils/logger"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (request: NextRequest)"
      },
      "classes": {},
      "variables": [
        "runtime",
        "maxDuration",
        "startTime",
        "authHeader",
        "queueManager",
        "jobs",
        "courtJobId",
        "judgeScheduleTime",
        "judgeJobId",
        "decisionScheduleTime",
        "decisionJobId",
        "cleanupScheduleTime",
        "duration",
        "apiKey",
        "body",
        "immediate",
        "syncType",
        "scheduleTime"
      ],
      "call_graph": {}
    },
    "app\\api\\health\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "startTime",
        "checks",
        "supabase",
        "memoryUsage",
        "memoryUsageMB",
        "memoryLimitMB",
        "unhealthyChecks",
        "warningChecks",
        "httpStatus"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\advanced-search\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/utils/logger",
        "@/lib/utils/validation"
      ],
      "functions": {
        "GET": {
          "calls": [
            "enhanceJudgeResults",
            "from"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "enhanceJudgeResults": {
          "calls": [
            "from"
          ],
          "signature": "async (supabase: any, judges: any[], filters: AdvancedJudgeFilters): Promise<JudgeSearchResult[]>",
          "called_by": [
            "GET"
          ]
        }
      },
      "classes": {},
      "variables": [
        "startTime",
        "query",
        "page",
        "limit",
        "filters",
        "supabase",
        "from",
        "to",
        "queryBuilder",
        "minDate",
        "maxDate",
        "courtTypeConditions",
        "enhancedJudges",
        "result",
        "response",
        "duration",
        "judgeIds",
        "casesByJudge",
        "enhancedResults",
        "experienceYears",
        "judgeCases",
        "efficiencyScore",
        "settledCases",
        "settlementRate",
        "caseTypes",
        "type",
        "primarySpecialization",
        "matchScore",
        "hasMatchingCaseType",
        "isHighEfficiency",
        "isAverageEfficiency",
        "isLowEfficiency",
        "hasMatchingCaseValue",
        "value"
      ],
      "interfaces": {
        "AdvancedJudgeFilters": {},
        "JudgeSearchResult": {
          "extends": [
            "Judge"
          ]
        },
        "AdvancedJudgeSearchResponse": {}
      },
      "call_graph": {}
    },
    "app\\api\\judges\\by-slug\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/utils/slug",
        "@/lib/cache/simple-cache",
        "@/lib/utils/logger",
        "@/lib/utils/type-guards"
      ],
      "functions": {
        "GET": {
          "calls": [
            "lookupJudge"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "lookupJudge": {
          "signature": "async (slug: string): Promise<JudgeLookupResult>",
          "called_by": [
            "GET"
          ]
        },
        "logQueryPerformance": {
          "signature": "async (queryType: string, executionTime: number, params: any)",
          "called_by": [
            "lookupCourt"
          ]
        },
        "findSimilarSlugs": {
          "calls": [
            "calculateStringSimilarity"
          ],
          "signature": "(targetSlug: string, judges: any[]): Judge[]"
        },
        "calculateStringSimilarity": {
          "calls": [
            "levenshteinDistance"
          ],
          "signature": "(str1: string, str2: string): number",
          "called_by": [
            "findSimilarCourtSlugs",
            "findSimilarSlugs"
          ]
        },
        "levenshteinDistance": {
          "signature": "(str1: string, str2: string): number",
          "called_by": [
            "calculateStringSimilarity",
            "calculateStringSimilarity"
          ]
        }
      },
      "classes": {},
      "variables": [
        "slug",
        "result",
        "response",
        "cacheKey",
        "cachedResult",
        "supabase",
        "startTime",
        "slugJudge",
        "slugError",
        "fuzzyMatches",
        "fuzzyError",
        "exactMatch",
        "bestMatch",
        "alternatives",
        "primaryName",
        "nameVariations",
        "maxProcessed",
        "targetLength",
        "lengthThreshold",
        "i",
        "judge",
        "judgeSlug",
        "similarity",
        "maxLength",
        "distance",
        "matrix",
        "j"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\by-state\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "includeJudges",
        "limit",
        "minJudges",
        "supabase",
        "state",
        "filteredStates",
        "response",
        "judgesByState",
        "totalJudges",
        "result"
      ],
      "interfaces": {
        "JudgesByState": {}
      },
      "call_graph": {}
    },
    "app\\api\\judges\\la-county\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "limit",
        "page",
        "searchQuery",
        "includeSlots",
        "availableSlotsOnly",
        "offset",
        "query",
        "filteredJudges",
        "slots",
        "judgesWithSlotInfo"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\list\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/utils/logger",
        "@/lib/utils/validation"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "fetchDecisionSummaries": {
          "calls": [
            "from"
          ],
          "signature": "async (supabase: any, judgeIds: string[], yearsBack: number = 3): Promise<Map<string, JudgeDecisionSummary>>"
        }
      },
      "classes": {},
      "variables": [
        "startTime",
        "validation",
        "sanitizedQuery",
        "includeDecisions",
        "supabase",
        "from",
        "to",
        "queryBuilder",
        "judges",
        "judge",
        "decisionSummaries",
        "totalCount",
        "hasMore",
        "result",
        "response",
        "duration",
        "currentYear",
        "startYear",
        "decisionsByJudge",
        "yearMap",
        "year",
        "judgeMap",
        "summariesMap",
        "total_recent",
        "count"
      ],
      "interfaces": {
        "YearlyDecisionCount": {},
        "JudgeDecisionSummary": {},
        "JudgeWithDecisions": {
          "extends": [
            "Judge"
          ]
        }
      },
      "call_graph": {}
    },
    "app\\api\\judges\\orange-county\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "limit",
        "page",
        "searchQuery",
        "includeSlots",
        "availableSlotsOnly",
        "offset",
        "query",
        "filteredJudges",
        "slots",
        "judgesWithSlotInfo"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\recent-decisions\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "judgeIdsParam",
        "yearsParam",
        "judgeIds",
        "yearsBack",
        "supabase",
        "currentYear",
        "startYear",
        "decisionsByJudge",
        "yearMap",
        "year",
        "judgeMap",
        "total_recent",
        "count"
      ],
      "interfaces": {
        "YearlyDecisionCount": {},
        "JudgeDecisionSummary": {}
      },
      "call_graph": {}
    },
    "app\\api\\judges\\redirect\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/utils/slug"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "query",
        "supabase",
        "nameVariations",
        "foundJudge",
        "canonicalSlug"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\related\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "judgeId",
        "court",
        "jurisdiction",
        "limit",
        "supabase",
        "relatedJudges",
        "remainingLimit",
        "existingIds",
        "aIssameCourt",
        "bIsSameCourt"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\search\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/rate-limit",
        "@clerk/nextjs/server"
      ],
      "functions": {
        "GET": {
          "calls": [
            "error"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "POST": {
          "calls": [
            "error"
          ],
          "signature": "async (request: NextRequest)"
        }
      },
      "classes": {},
      "variables": [
        "identifier",
        "rateLimitResult",
        "query",
        "limit",
        "page",
        "jurisdiction",
        "courtType",
        "supabase",
        "offset",
        "queryBuilder",
        "totalCount",
        "hasMore",
        "result",
        "response",
        "body"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\[id]\\analytics\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/ai/judicial-analytics"
      ],
      "functions": {
        "GET": {
          "calls": [
            "cacheAnalytics",
            "generateAnalyticsFromCases",
            "generateLegacyAnalytics",
            "getCachedAnalytics",
            "isDataFresh"
          ],
          "signature": "async (request: NextRequest, { params }: { params: { id: string } })",
          "called_by": [
            "POST"
          ]
        },
        "generateAnalyticsFromCases": {
          "calls": [
            "analyzeJudicialPatterns",
            "enhanceAnalyticsWithAI",
            "generateConservativeAnalytics"
          ],
          "signature": "async (judge: any, cases: any[]): Promise<CaseAnalytics>",
          "called_by": [
            "GET"
          ]
        },
        "analyzeJudicialPatterns": {
          "signature": "(judge: any, cases: any[]): CaseAnalytics",
          "called_by": [
            "generateAnalyticsFromCases"
          ]
        },
        "enhanceAnalyticsWithAI": {
          "signature": "async (judge: any, cases: any[], baseAnalytics: CaseAnalytics): Promise<CaseAnalytics>",
          "called_by": [
            "generateAnalyticsFromCases"
          ]
        },
        "generateLegacyAnalytics": {
          "signature": "async (judge: any): Promise<CaseAnalytics>",
          "called_by": [
            "GET"
          ]
        },
        "generateConservativeAnalytics": {
          "signature": "(judge: any, caseCount: number): CaseAnalytics",
          "called_by": [
            "generateAnalyticsFromCases"
          ]
        },
        "getCachedAnalytics": {
          "signature": "async (supabase: any, judgeId: string)",
          "called_by": [
            "GET"
          ]
        },
        "cacheAnalytics": {
          "signature": "async (supabase: any, judgeId: string, analytics: CaseAnalytics)",
          "called_by": [
            "GET"
          ]
        },
        "isDataFresh": {
          "signature": "(createdAt: string, maxAgeHours: number): boolean",
          "called_by": [
            "GET"
          ]
        },
        "POST": {
          "calls": [
            "GET"
          ],
          "signature": "async (request: NextRequest, { params }: { params: { id: string } })"
        },
        "calculateMetrics": "(stat: any, label: string)"
      },
      "classes": {},
      "variables": [
        "supabase",
        "cachedData",
        "threeYearsAgo",
        "threeYearsAgoDate",
        "analytics",
        "stats",
        "caseType",
        "outcome",
        "summary",
        "status",
        "calculateMetrics",
        "percentage",
        "confidence",
        "civilMetrics",
        "custodyMetrics",
        "alimonyMetrics",
        "contractMetrics",
        "criminalMetrics",
        "pleaMetrics",
        "totalCases",
        "overallConfidence",
        "patterns",
        "limitations",
        "isCaliforniaJudge",
        "baseAdjustment",
        "cacheTime",
        "now",
        "hoursDiff",
        "forceRefresh",
        "response",
        "data"
      ],
      "interfaces": {
        "CaseAnalytics": {}
      },
      "call_graph": {}
    },
    "app\\api\\judges\\[id]\\assignments\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/types"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest, { params }: { params: { id: string } })",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (request: NextRequest, { params }: { params: { id: string } })"
      },
      "classes": {},
      "variables": [
        "supabase",
        "includeHistory",
        "yearsBack",
        "body",
        "assignmentData"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\[id]\\bias-analysis\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "calls": [
            "analyzeCaseTypePatterns",
            "analyzeOutcomes",
            "analyzeTemporalPatterns",
            "calculateBiasIndicators"
          ],
          "signature": "async (request: NextRequest, { params }: BiasAnalysisParams)",
          "called_by": [
            "POST"
          ]
        },
        "analyzeCaseTypePatterns": {
          "calls": [
            "normalizeOutcome"
          ],
          "signature": "(cases: any[]): CaseTypePattern[]",
          "called_by": [
            "GET"
          ]
        },
        "analyzeOutcomes": {
          "calls": [
            "analyzeCaseValueTrends",
            "normalizeOutcome"
          ],
          "signature": "(cases: any[])",
          "called_by": [
            "GET"
          ]
        },
        "analyzeCaseValueTrends": {
          "calls": [
            "normalizeOutcome"
          ],
          "signature": "(cases: any[])",
          "called_by": [
            "analyzeOutcomes"
          ]
        },
        "analyzeTemporalPatterns": {
          "calls": [
            "normalizeOutcome"
          ],
          "signature": "(cases: any[]): TemporalPattern[]",
          "called_by": [
            "GET"
          ]
        },
        "calculateBiasIndicators": {
          "calls": [
            "calculateConsistencyScore",
            "calculatePredictabilityScore",
            "calculateRiskTolerance",
            "calculateSpeedScore"
          ],
          "signature": "(cases: any[], caseTypePatterns: CaseTypePattern[], outcomeAnalysis: any)",
          "called_by": [
            "GET"
          ]
        },
        "calculateConsistencyScore": {
          "signature": "(caseTypePatterns: CaseTypePattern[]): number",
          "called_by": [
            "calculateBiasIndicators"
          ]
        },
        "calculateSpeedScore": {
          "signature": "(cases: any[]): number",
          "called_by": [
            "calculateBiasIndicators"
          ]
        },
        "calculateRiskTolerance": {
          "signature": "(cases: any[]): number",
          "called_by": [
            "calculateBiasIndicators"
          ]
        },
        "calculatePredictabilityScore": {
          "signature": "(caseTypePatterns: CaseTypePattern[]): number",
          "called_by": [
            "calculateBiasIndicators"
          ]
        },
        "normalizeOutcome": {
          "signature": "(outcome: string): string",
          "called_by": [
            "analyzeCaseTypePatterns",
            "analyzeOutcomes",
            "analyzeCaseValueTrends",
            "analyzeTemporalPatterns",
            "calculateOverallStats",
            "calculateCaseTypeBreakdown",
            "calculateYearlyTrends"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "judgeId",
        "caseTypePatterns",
        "outcomeAnalysis",
        "temporalPatterns",
        "biasIndicators",
        "biasMetrics",
        "caseTypeGroups",
        "caseType",
        "typedCases",
        "outcomes",
        "outcome",
        "totalCases",
        "settledCases",
        "dismissedCases",
        "judgmentCases",
        "otherCases",
        "validCaseValues",
        "averageCaseValue",
        "casesWithDuration",
        "filing",
        "decision",
        "averageCaseDuration",
        "caseValueTrends",
        "casesWithValue",
        "ranges",
        "casesInRange",
        "settledInRange",
        "monthlyGroups",
        "date",
        "year",
        "month",
        "key",
        "averageDuration",
        "consistencyScore",
        "speedScore",
        "settlementPreference",
        "riskTolerance",
        "predictabilityScore",
        "settlementRates",
        "avgSettlementRate",
        "variance",
        "avgDuration",
        "avgCaseValue",
        "highValueCases",
        "valueScore",
        "highValueRatio",
        "predictabilityScores",
        "maxOutcomeCount",
        "outcomeStr"
      ],
      "interfaces": {
        "BiasAnalysisParams": {},
        "CaseTypePattern": {},
        "TemporalPattern": {},
        "BiasMetrics": {}
      },
      "call_graph": {}
    },
    "app\\api\\judges\\[id]\\case-outcomes\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "calls": [
            "calculateCaseTypeBreakdown",
            "calculateOverallStats",
            "calculatePerformanceMetrics",
            "calculateYearlyTrends"
          ],
          "signature": "async (request: NextRequest, { params }: CaseOutcomeParams)",
          "called_by": [
            "POST"
          ]
        },
        "calculateOverallStats": {
          "calls": [
            "normalizeOutcome"
          ],
          "signature": "(cases: any[])",
          "called_by": [
            "GET"
          ]
        },
        "calculateCaseTypeBreakdown": {
          "calls": [
            "normalizeOutcome"
          ],
          "signature": "(cases: any[])",
          "called_by": [
            "GET"
          ]
        },
        "calculateYearlyTrends": {
          "calls": [
            "normalizeOutcome"
          ],
          "signature": "(cases: any[])",
          "called_by": [
            "GET"
          ]
        },
        "calculatePerformanceMetrics": {
          "signature": "(cases: any[], caseTypeBreakdown: any[])",
          "called_by": [
            "GET"
          ]
        },
        "normalizeOutcome": {
          "signature": "(outcome: string): string",
          "called_by": [
            "analyzeCaseTypePatterns",
            "analyzeOutcomes",
            "analyzeCaseValueTrends",
            "analyzeTemporalPatterns",
            "calculateOverallStats",
            "calculateCaseTypeBreakdown",
            "calculateYearlyTrends"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "judgeId",
        "overallStats",
        "caseTypeBreakdown",
        "yearlyTrends",
        "performanceMetrics",
        "outcomeStats",
        "totalCases",
        "outcomes",
        "outcome",
        "settledCases",
        "dismissedCases",
        "judgmentCases",
        "winRate",
        "settlementRate",
        "dismissalRate",
        "casesWithDuration",
        "filing",
        "decision",
        "averageCaseDuration",
        "reversalRate",
        "caseTypeGroups",
        "caseType",
        "typedCases",
        "avgDuration",
        "yearlyGroups",
        "year",
        "typedYearCases",
        "casesByMonth",
        "date",
        "monthKey",
        "monthlyAverages",
        "efficiencyScore",
        "settlementRates",
        "avgSettlementRate",
        "variance",
        "consistencyScore",
        "specializationAreas",
        "outcomeStr"
      ],
      "interfaces": {
        "CaseOutcomeParams": {},
        "CaseOutcomeStats": {}
      },
      "call_graph": {}
    },
    "app\\api\\judges\\[id]\\recent-cases\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest, { params }: { params: { id: string } })",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "judgeId",
        "limitParam",
        "limit",
        "supabase"
      ],
      "call_graph": {}
    },
    "app\\api\\judges\\[id]\\slots\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest, { params }: { params: { id: string } })",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "judgeId",
        "supabase"
      ],
      "call_graph": {}
    },
    "app\\api\\pricing\\resolve\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/utils/logger"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "startTime",
        "judgeId",
        "supabase",
        "pricingData",
        "duration",
        "response"
      ],
      "call_graph": {}
    },
    "app\\api\\search\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@/lib/utils/logger",
        "@/lib/utils/validation"
      ],
      "functions": {
        "GET": {
          "calls": [
            "generateSearchSuggestions",
            "searchCourts",
            "searchJudges",
            "searchJurisdictions"
          ],
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "searchJudges": {
          "calls": [
            "calculateRelevanceScore"
          ],
          "signature": "async (supabase: any, query: string, limit: number): Promise<JudgeSearchResult[]>",
          "called_by": [
            "GET"
          ]
        },
        "searchCourts": {
          "calls": [
            "calculateRelevanceScore"
          ],
          "signature": "async (supabase: any, query: string, limit: number): Promise<CourtSearchResult[]>",
          "called_by": [
            "GET"
          ]
        },
        "searchJurisdictions": {
          "calls": [
            "calculateRelevanceScore"
          ],
          "signature": "async (query: string, limit: number): Promise<JurisdictionSearchResult[]>",
          "called_by": [
            "GET"
          ]
        },
        "generateSearchSuggestions": {
          "signature": "async (query: string, limit: number): Promise<SearchSuggestionsResponse>",
          "called_by": [
            "GET"
          ]
        },
        "calculateRelevanceScore": {
          "signature": "(query: string, text: string): number",
          "called_by": [
            "searchJudges",
            "searchCourts",
            "searchJurisdictions"
          ]
        }
      },
      "classes": {},
      "variables": [
        "startTime",
        "q",
        "type",
        "limit",
        "suggestions",
        "sanitizedQuery",
        "suggestionsResponse",
        "duration",
        "supabase",
        "searchResults",
        "allResults",
        "sortedResults",
        "aStartsWithQuery",
        "bStartsWithQuery",
        "judges",
        "courts",
        "jurisdictions",
        "response",
        "responseObj",
        "slug",
        "queryLower",
        "jurisdictionMatches",
        "commonSearches",
        "textLower",
        "words",
        "textWords",
        "wordMatches"
      ],
      "call_graph": {}
    },
    "app\\api\\security\\csp-report\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server"
      ],
      "functions": {
        "POST": "async (request: NextRequest)",
        "OPTIONS": "async ()"
      },
      "classes": {},
      "variables": [
        "body"
      ],
      "call_graph": {}
    },
    "app\\api\\security\\ct-report\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server"
      ],
      "functions": {
        "POST": "async (request: NextRequest)",
        "OPTIONS": "async ()"
      },
      "classes": {},
      "variables": [
        "body"
      ],
      "call_graph": {}
    },
    "app\\api\\seo\\search-console\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "judge",
        "mockData"
      ],
      "call_graph": {}
    },
    "app\\api\\sync\\courts\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/sync/court-sync",
        "@/lib/utils/logger"
      ],
      "functions": {
        "POST": "async (request: NextRequest)",
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "runtime",
        "maxDuration",
        "startTime",
        "apiKey",
        "body",
        "options",
        "syncManager",
        "result",
        "duration",
        "response"
      ],
      "call_graph": {}
    },
    "app\\api\\sync\\decisions\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/sync/decision-sync",
        "@/lib/utils/logger"
      ],
      "functions": {
        "POST": "async (request: NextRequest)",
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "runtime",
        "maxDuration",
        "startTime",
        "apiKey",
        "body",
        "options",
        "syncManager",
        "result",
        "duration",
        "response"
      ],
      "call_graph": {}
    },
    "app\\api\\sync\\judges\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/sync/judge-sync",
        "@/lib/utils/logger",
        "@/lib/rate-limit"
      ],
      "functions": {
        "POST": "async (request: NextRequest)",
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "runtime",
        "maxDuration",
        "startTime",
        "apiKey",
        "identifier",
        "rateLimitResult",
        "body",
        "options",
        "syncManager",
        "result",
        "duration",
        "response"
      ],
      "call_graph": {}
    },
    "app\\api\\user\\activity\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@clerk/nextjs/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (request: NextRequest)"
      },
      "classes": {},
      "variables": [
        "url",
        "limit",
        "type",
        "supabase",
        "query"
      ],
      "call_graph": {}
    },
    "app\\api\\user\\bookmarks\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@clerk/nextjs/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (request: NextRequest)",
        "DELETE": "async (request: NextRequest)"
      },
      "classes": {},
      "variables": [
        "supabase"
      ],
      "call_graph": {}
    },
    "app\\api\\user\\preferences\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@clerk/nextjs/server",
        "@/lib/supabase/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        },
        "POST": "async (request: NextRequest)",
        "PUT": "async (request: NextRequest)"
      },
      "classes": {},
      "variables": [
        "supabase",
        "defaultPreferences",
        "preferences"
      ],
      "call_graph": {}
    },
    "app\\api\\user\\stats\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/supabase/server",
        "@clerk/nextjs/server"
      ],
      "functions": {
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "user",
        "supabase",
        "userId",
        "activities",
        "totalSearches",
        "judgesViewed",
        "comparisonsRun",
        "thirtyDaysAgo",
        "recentActivity",
        "joinDate",
        "daysSinceJoin",
        "stats",
        "response"
      ],
      "call_graph": {}
    },
    "app\\api\\webhooks\\courtlistener\\route.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Route definitions",
      "imports": [
        "next/server",
        "@/lib/sync/queue-manager",
        "@/lib/utils/logger",
        "crypto"
      ],
      "functions": {
        "POST": {
          "calls": [
            "processWebhookEvent",
            "verifyWebhookSignature"
          ],
          "signature": "async (request: NextRequest)"
        },
        "verifyWebhookSignature": {
          "signature": "(body: string, signature: string): boolean",
          "called_by": [
            "POST"
          ]
        },
        "processWebhookEvent": {
          "calls": [
            "handleCourtEvent",
            "handleOpinionEvent",
            "handlePersonEvent"
          ],
          "signature": "async (payload: CourtListenerWebhookPayload)",
          "called_by": [
            "POST"
          ]
        },
        "handleOpinionEvent": {
          "signature": "async (payload: CourtListenerWebhookPayload, queueManager: SyncQueueManager)",
          "called_by": [
            "processWebhookEvent"
          ]
        },
        "handlePersonEvent": {
          "signature": "async (payload: CourtListenerWebhookPayload, queueManager: SyncQueueManager)",
          "called_by": [
            "processWebhookEvent"
          ]
        },
        "handleCourtEvent": {
          "signature": "async (payload: CourtListenerWebhookPayload, queueManager: SyncQueueManager)",
          "called_by": [
            "processWebhookEvent"
          ]
        },
        "GET": {
          "signature": "async (request: NextRequest)",
          "called_by": [
            "POST"
          ]
        }
      },
      "classes": {},
      "variables": [
        "runtime",
        "maxDuration",
        "startTime",
        "signature",
        "body",
        "result",
        "duration",
        "webhookSecret",
        "expectedSignature",
        "receivedSignature",
        "queueManager",
        "opinionId",
        "attributes",
        "jobId",
        "personId",
        "courtId",
        "challenge",
        "verifyToken"
      ],
      "interfaces": {
        "CourtListenerWebhookPayload": {}
      },
      "call_graph": {}
    },
    "app\\attorneys\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react",
        "next/link",
        "next"
      ],
      "functions": {
        "AttorneysPage": "()"
      },
      "classes": {},
      "variables": [
        "metadata",
        "jurisdictions",
        "practiceAreas"
      ],
      "interfaces": {
        "Attorney": {}
      },
      "call_graph": {}
    },
    "app\\blog\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react",
        "next/link"
      ],
      "functions": {
        "BlogPage": "()"
      },
      "classes": {},
      "variables": [
        "posts"
      ],
      "call_graph": {}
    },
    "app\\case-studies\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "CaseStudiesPage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\compare\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next/navigation",
        "lucide-react",
        "next/link"
      ],
      "functions": {
        "ComparePageContent": "()",
        "ComparePage": "()",
        "fetchJudgesForComparison": "async (judgeIds: string[])",
        "searchJudges": {
          "signature": "async (query: string)",
          "called_by": [
            "GET"
          ]
        },
        "addJudgeToComparison": "(judge: any)",
        "removeJudge": "(judgeId: string)",
        "formatDecisionTime": "(days: number)"
      },
      "classes": {},
      "variables": [
        "searchParams",
        "judgeIds",
        "fetchJudgesForComparison",
        "judgePromises",
        "judgeResponse",
        "judgeData",
        "judge",
        "caseAnalytics",
        "analyticsResponse",
        "experienceYears",
        "results",
        "validJudges",
        "searchJudges",
        "response",
        "data",
        "addJudgeToComparison",
        "newJudge",
        "removeJudge",
        "formatDecisionTime",
        "months",
        "fastest",
        "lowest",
        "most"
      ],
      "interfaces": {
        "JudgeComparison": {}
      },
      "call_graph": {}
    },
    "app\\compliance\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "CompliancePage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\cookies\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "CookiesPage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\counties\\layout.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react"
      ],
      "functions": {
        "CountiesLayout": "({ children, }: { children: React.ReactNode })"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\counties\\los-angeles\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next",
        "@/components/ui/CountySelector",
        "@heroicons/react/24/outline",
        "fs",
        "path"
      ],
      "functions": {
        "LACountyPage": "()"
      },
      "classes": {},
      "variables": [
        "laMarketIntel",
        "metadata",
        "practiceAreas",
        "marketStats"
      ],
      "call_graph": {}
    },
    "app\\courts\\page.old.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react",
        "next/link"
      ],
      "functions": {
        "CourtsPage": "()",
        "fetchCourts": {
          "signature": "async (page = 1, reset = false)",
          "called_by": [
            "handleLoadMore"
          ]
        },
        "handleLoadMore": {
          "calls": [
            "fetchCourts"
          ],
          "signature": "()"
        },
        "generateSlug": {
          "signature": "(court: Court)",
          "called_by": [
            "POST",
            "GET",
            "createCanonicalSlug",
            "generateSlugVariations",
            "nameToSlug",
            "generateAllSlugs",
            "generateMissingSlugs",
            "generateMissingSlugs"
          ]
        },
        "getLocationDisplay": "(court: Court)"
      },
      "classes": {},
      "variables": [
        "fetchCourts",
        "params",
        "response",
        "data",
        "handleLoadMore",
        "generateSlug",
        "getLocationDisplay",
        "nameMatch"
      ],
      "interfaces": {
        "Court": {},
        "CourtsResponse": {}
      },
      "call_graph": {}
    },
    "app\\courts\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/components/courts/CourtsSearch",
        "@/lib/supabase/server"
      ],
      "functions": {
        "getInitialCourts": {
          "signature": "async (): Promise<Court[]>",
          "called_by": [
            "CourtsPage"
          ]
        },
        "CourtsPage": {
          "calls": [
            "getInitialCourts"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "variables": [
        "metadata",
        "supabase",
        "initialCourts"
      ],
      "interfaces": {
        "Court": {}
      },
      "call_graph": {}
    },
    "app\\courts\\[id]\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/navigation",
        "lucide-react",
        "next/link",
        "@/lib/supabase/server",
        "@/components/courts/CourtJudgesSection",
        "@/lib/utils/slug"
      ],
      "functions": {
        "getCourt": {
          "signature": "async (id: string): Promise<Court | null>",
          "called_by": [
            "generateMetadata"
          ]
        },
        "getInitialJudges": "async (courtId: string): Promise<",
        "CourtPage": "async ({ params }: { params: Params })",
        "generateMetadata": {
          "calls": [
            "getCourt"
          ],
          "signature": "async ({ params }: { params: Params })"
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "decodedId",
        "court",
        "generatedSlug",
        "nameFromSlug",
        "nameVariations",
        "response",
        "data",
        "cityMatch",
        "cityName",
        "description"
      ],
      "interfaces": {
        "JudgeWithPosition": {}
      },
      "call_graph": {}
    },
    "app\\dashboard\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs/server",
        "next/navigation",
        "@/components/dashboard/UserDashboard"
      ],
      "functions": {
        "DashboardPage": "async ()"
      },
      "classes": {},
      "variables": [
        "user"
      ],
      "call_graph": {}
    },
    "app\\dashboard\\bookmarks\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs/server",
        "next/navigation",
        "next/link",
        "lucide-react",
        "@/lib/supabase/server",
        "@/lib/utils/slug"
      ],
      "functions": {
        "getUserBookmarks": "async (userId: string)",
        "BookmarksPage": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "bookmarkedJudges"
      ],
      "call_graph": {}
    },
    "app\\docs\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react"
      ],
      "functions": {
        "DocsPage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\features\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react"
      ],
      "functions": {
        "FeaturesPage": "()"
      },
      "classes": {},
      "variables": [
        "features"
      ],
      "call_graph": {}
    },
    "app\\forgot-password\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "@/lib/supabase/client",
        "next/link",
        "lucide-react"
      ],
      "functions": {
        "ForgotPasswordPage": "()",
        "handleSubmit": "async (e: React.FormEvent)"
      },
      "classes": {},
      "variables": [
        "handleSubmit",
        "supabase"
      ],
      "call_graph": {}
    },
    "app\\integrations\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "IntegrationsPage": "()"
      },
      "classes": {},
      "variables": [
        "integrations"
      ],
      "call_graph": {}
    },
    "app\\judges\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react",
        "next/link",
        "@/lib/utils/slug",
        "@/lib/hooks/useDebounce",
        "@/components/ui/Skeleton"
      ],
      "functions": {
        "JudgesPage": "()",
        "handleLoadMore": "()",
        "generateJudgeSlug": "(judge: Judge)",
        "getRecentDecisionsDisplay": "(judge: JudgeWithDecisions)",
        "getCourtAndStateDisplay": "(judge: Judge)"
      },
      "classes": {},
      "variables": [
        "fetchJudges",
        "params",
        "response",
        "data",
        "filteredJudges",
        "handleLoadMore",
        "generateJudgeSlug",
        "getRecentDecisionsDisplay",
        "summary",
        "recentYears",
        "getCourtAndStateDisplay",
        "courtName",
        "state",
        "jurisdictionOptions"
      ],
      "interfaces": {
        "JudgeWithDecisions": {
          "extends": [
            "Judge"
          ]
        },
        "JudgesResponse": {}
      },
      "call_graph": {}
    },
    "app\\judges\\advanced-search\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/components/judges/EnhancedJudgeSearch",
        "next"
      ],
      "functions": {
        "AdvancedSearchPage": "()"
      },
      "classes": {},
      "variables": [
        "metadata"
      ],
      "call_graph": {}
    },
    "app\\judges\\[slug]\\page-modular.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next",
        "next/navigation",
        "@/lib/utils/slug",
        "@/components/analytics/SEOMonitoring",
        "@/components/seo/SEOBreadcrumbs",
        "@/components/seo/RelatedJudges",
        "@/components/ads/GoogleAd",
        "@/components/judges/profile/JudgeStructuredData",
        "@/components/judges/profile/JudgeHeroSection",
        "@/components/judges/profile/AttorneyDirectoryBanner",
        "@/components/judges/profile/JudgeMainContent",
        "@/components/judges/profile/JudgeFAQSection"
      ],
      "functions": {
        "getCoordinatesForJurisdiction": {
          "signature": "(jurisdiction: string): string",
          "called_by": [
            "generateMetadata"
          ]
        },
        "getJudge": {
          "signature": "async (slug: string): Promise<Judge | null>",
          "called_by": [
            "JudgePage",
            "generateMetadata"
          ]
        },
        "JudgePage": {
          "calls": [
            "getJudge"
          ],
          "signature": "async ({ params }: JudgePageProps)"
        },
        "generateMetadata": {
          "calls": [
            "getCoordinatesForJurisdiction",
            "getJudge"
          ],
          "signature": "async ({ params }: MetadataProps): Promise<Metadata>"
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "judge",
        "canonicalSlug",
        "safeName",
        "safeCourtName",
        "safeJurisdiction",
        "nameWithoutTitle",
        "baseUrl",
        "coordinates",
        "revalidate"
      ],
      "interfaces": {
        "JudgePageProps": {},
        "MetadataProps": {}
      },
      "call_graph": {}
    },
    "app\\judges\\[slug]\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/navigation",
        "@/components/judges/JudgeProfile",
        "@/components/judges/JudgeRulingPatterns",
        "@/components/judges/RecentDecisions",
        "@/components/judges/AttorneySlots",
        "@/components/judges/JudgeFAQ",
        "@/components/judges/AnalyticsSliders",
        "@/components/judges/BiasPatternAnalysis",
        "@/components/judges/CaseOutcomeStatistics",
        "@/components/judges/BookmarkButton",
        "@/components/ads/GoogleAd",
        "@/components/seo/SEOBreadcrumbs",
        "@/components/seo/RelatedJudges",
        "@/components/seo/RelatedContent",
        "@/components/analytics/SEOMonitoring",
        "@/lib/utils/slug",
        "@/lib/seo/metadata-generator",
        "@/lib/seo/structured-data",
        "@/lib/seo/content-generator"
      ],
      "functions": {
        "getJudge": {
          "calls": [
            "getJudgeFallback"
          ],
          "signature": "async (slug: string): Promise<Judge | null>",
          "called_by": [
            "JudgePage",
            "generateMetadata"
          ]
        },
        "getRelatedJudges": "async (currentJudge: Judge): Promise<Judge[]>",
        "getJudgeFallback": {
          "signature": "async (slug: string): Promise<Judge | null>",
          "called_by": [
            "getJudge"
          ]
        },
        "JudgePage": "async ({ params }: JudgePageProps)",
        "getCoordinatesForJurisdiction": {
          "signature": "(jurisdiction: string): string",
          "called_by": [
            "generateMetadata"
          ]
        },
        "generateMetadata": "async ({ params }: MetadataProps)",
        "generateJudgeUrlVariations": "(judgeName: string, baseUrl: string): string[]"
      },
      "classes": {},
      "variables": [
        "baseUrl",
        "response",
        "errorData",
        "data",
        "supabase",
        "relatedJudges",
        "primaryName",
        "nameVariations",
        "judge",
        "canonicalSlug",
        "safeName",
        "safeCourtName",
        "safeJurisdiction",
        "uniqueContent",
        "years",
        "seoData",
        "nameWithoutTitle",
        "nameParts",
        "firstName",
        "lastName",
        "courtType",
        "serviceYears",
        "baseName",
        "variations",
        "firstLast",
        "firstLastSlug",
        "revalidate"
      ],
      "interfaces": {
        "JudgePageProps": {
          "doc": "Fetch judge using the enhanced API endpoint"
        },
        "MetadataProps": {
          "doc": "Fetch judge using the enhanced API endpoint"
        }
      },
      "call_graph": {}
    },
    "app\\jurisdictions\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/lib/supabase/server",
        "next/link",
        "lucide-react",
        "next"
      ],
      "functions": {
        "getJurisdictionData": {
          "calls": [
            "then"
          ],
          "signature": "async ()"
        },
        "createSlugFromJurisdiction": "(jurisdiction: string): string",
        "JurisdictionsPage": "async ()"
      },
      "classes": {},
      "variables": [
        "metadata",
        "supabase",
        "jurisdiction"
      ],
      "interfaces": {
        "Jurisdiction": {}
      },
      "call_graph": {}
    },
    "app\\jurisdictions\\[county]\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react",
        "next/link",
        "next/navigation"
      ],
      "functions": {
        "CountyCourtsPage": "()",
        "handleLoadMore": "()",
        "generateSlug": {
          "signature": "(court: Court)",
          "called_by": [
            "POST",
            "GET",
            "createCanonicalSlug",
            "generateSlugVariations",
            "nameToSlug",
            "generateAllSlugs",
            "generateMissingSlugs",
            "generateMissingSlugs"
          ]
        },
        "getLocationDisplay": "(court: Court)"
      },
      "classes": {},
      "variables": [
        "params",
        "county",
        "jurisdictionInfo",
        "fetchCourts",
        "response",
        "data",
        "handleLoadMore",
        "generateSlug",
        "getLocationDisplay",
        "nameMatch"
      ],
      "interfaces": {
        "Court": {},
        "CourtsResponse": {}
      },
      "call_graph": {}
    },
    "app\\legal-specialties\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/lib/supabase/server",
        "next/link",
        "lucide-react",
        "next"
      ],
      "functions": {
        "getJudgesBySpecialty": "async ()",
        "LegalSpecialtiesPage": "async ()"
      },
      "classes": {},
      "variables": [
        "metadata",
        "supabase",
        "judges"
      ],
      "interfaces": {
        "LegalSpecialty": {}
      },
      "call_graph": {}
    },
    "app\\login\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next/navigation",
        "@/lib/supabase/client",
        "next/link",
        "lucide-react"
      ],
      "functions": {
        "LoginPage": "()",
        "handleSubmit": "async (e: React.FormEvent)"
      },
      "classes": {},
      "variables": [
        "router",
        "handleSubmit",
        "supabase"
      ],
      "call_graph": {}
    },
    "app\\privacy\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "PrivacyPage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\profile\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs/server",
        "next/navigation",
        "@/components/profile/ProfileSettings"
      ],
      "functions": {
        "ProfilePage": "async ()"
      },
      "classes": {},
      "variables": [
        "user"
      ],
      "call_graph": {}
    },
    "app\\search\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next/navigation",
        "lucide-react",
        "next/link"
      ],
      "functions": {
        "SearchResults": "()",
        "SearchPage": "()",
        "handleFilterChange": "(newFilter: typeof activeFilter)",
        "handleSearch": "()",
        "getFilteredResults": "(): SearchResult[]",
        "getResultIcon": "(type: string)"
      },
      "classes": {},
      "variables": [
        "searchParams",
        "router",
        "query",
        "type",
        "fetchSearchResults",
        "response",
        "data",
        "handleFilterChange",
        "params",
        "handleSearch",
        "getFilteredResults",
        "getResultIcon",
        "filteredResults"
      ],
      "call_graph": {}
    },
    "app\\sign-in\\[[...sign-in]]\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs"
      ],
      "functions": {
        "Page": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\sign-up\\[[...sign-up]]\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs"
      ],
      "functions": {
        "Page": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\signup\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next/navigation",
        "@/lib/supabase/client",
        "next/link",
        "lucide-react"
      ],
      "functions": {
        "SignupPage": "()",
        "handleSubmit": "async (e: React.FormEvent)"
      },
      "classes": {},
      "variables": [
        "router",
        "handleSubmit",
        "supabase",
        "email",
        "password",
        "fullName"
      ],
      "call_graph": {}
    },
    "app\\support\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react"
      ],
      "functions": {
        "SupportPage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\terms\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "TermsPage": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "app\\welcome\\page.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs/server",
        "next/navigation",
        "@/components/onboarding/OnboardingWizard"
      ],
      "functions": {
        "WelcomePage": "async ()"
      },
      "classes": {},
      "variables": [
        "user"
      ],
      "call_graph": {}
    },
    "components\\ads\\GoogleAd.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react"
      ],
      "functions": {
        "GoogleAd": "({ slot, format = 'auto', responsive = true, style = {}, className = '' }: GoogleAdProps)",
        "LazyGoogleAd": "(props: GoogleAdProps)"
      },
      "classes": {},
      "variables": [
        "adRef",
        "isLoaded",
        "ref",
        "observer"
      ],
      "interfaces": {
        "GoogleAdProps": {},
        "Window": {}
      },
      "call_graph": {}
    },
    "components\\analytics\\SEOMonitoring.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "@/lib/analytics/seo-monitoring"
      ],
      "functions": {
        "SEOMonitoring": {
          "calls": [
            "trackSearchConsoleData"
          ],
          "signature": "({ judgeName, jurisdiction, slug }: SEOMonitoringProps)"
        },
        "trackAttorneySlotClick": "(judgeName: string, slotPosition: number)",
        "trackRelatedJudgeClick": "(fromJudge: string, toJudge: string, linkPosition: number)",
        "trackBreadcrumbClick": "(judgeName: string, breadcrumbLabel: string, position: number)",
        "trackSearchConsoleData": {
          "signature": "async ()",
          "called_by": [
            "SEOMonitoring"
          ]
        }
      },
      "classes": {},
      "variables": [
        "trackSearchConsoleData",
        "response",
        "data"
      ],
      "interfaces": {
        "SEOMonitoringProps": {}
      },
      "call_graph": {}
    },
    "components\\courts\\CourtJudgesSection.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react",
        "next/link"
      ],
      "functions": {
        "CourtJudgesSection": "({ courtId, courtName, initialJudges = [] }: CourtJudgesSectionProps)",
        "loadMore": "()",
        "getStatusBadgeClass": "(status: string)",
        "getPositionBadgeClass": "(position: string)",
        "formatAppointmentDate": "(dateString: string | null)"
      },
      "classes": {},
      "constants": {
        "STATUS_COLORS": "collection"
      },
      "variables": [
        "positionTypes",
        "fetchJudges",
        "params",
        "response",
        "data",
        "filteredJudges",
        "loadMore",
        "getStatusBadgeClass",
        "getPositionBadgeClass",
        "formatAppointmentDate"
      ],
      "interfaces": {
        "Judge": {},
        "CourtJudgesResponse": {},
        "CourtJudgesSectionProps": {}
      },
      "call_graph": {}
    },
    "components\\courts\\CourtsSearch.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react",
        "next/link",
        "@/lib/hooks/useDebounce",
        "@/components/ui/Skeleton",
        "@/lib/utils/slug"
      ],
      "functions": {
        "CourtsSearch": "({ initialCourts, initialJurisdiction = 'CA' }: CourtsSearchProps)",
        "searchCourts": {
          "signature": "async ()",
          "called_by": [
            "GET"
          ]
        },
        "handleLoadMore": "()"
      },
      "classes": {},
      "variables": [
        "isMounted",
        "params",
        "res",
        "data",
        "handleLoadMore"
      ],
      "interfaces": {
        "Court": {},
        "CourtsResponse": {},
        "CourtsSearchProps": {}
      },
      "call_graph": {}
    },
    "components\\dashboard\\AdminDashboard.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs",
        "react",
        "lucide-react",
        "next/link"
      ],
      "functions": {
        "AdminDashboard": "()",
        "fetchAdminData": {
          "signature": "async ()",
          "called_by": [
            "triggerSync"
          ]
        },
        "triggerSync": {
          "calls": [
            "fetchAdminData"
          ],
          "signature": "async (type: 'judges' | 'courts' | 'decisions')"
        },
        "getHealthStatus": "()",
        "formatTimeAgo": "(dateString: string)"
      },
      "classes": {},
      "variables": [
        "fetchAdminData",
        "statsData",
        "syncData",
        "triggerSync",
        "response",
        "getHealthStatus",
        "formatTimeAgo",
        "now",
        "past",
        "diffInMinutes",
        "diffInHours",
        "diffInDays",
        "healthStatus"
      ],
      "interfaces": {
        "AdminStats": {},
        "SyncJob": {}
      },
      "call_graph": {}
    },
    "components\\dashboard\\BiasAnalyticsDashboard.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "recharts",
        "lucide-react"
      ],
      "functions": {
        "BiasAnalyticsDashboard": "()",
        "fetchAnalyticsData": "async ()",
        "exportData": "async ()"
      },
      "classes": {},
      "constants": {
        "COLORS": "collection"
      },
      "variables": [
        "fetchAnalyticsData",
        "params",
        "response",
        "data",
        "exportData",
        "blob",
        "url",
        "a"
      ],
      "interfaces": {
        "BiasAnalyticsData": {}
      },
      "call_graph": {}
    },
    "components\\dashboard\\UserDashboard.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next/link",
        "@clerk/nextjs/server",
        "lucide-react"
      ],
      "functions": {
        "UserDashboard": "({ user }: UserDashboardProps)",
        "fetchUserStats": "async ()"
      },
      "classes": {},
      "variables": [
        "response",
        "data",
        "joinedDate",
        "daysSinceJoin"
      ],
      "interfaces": {
        "UserDashboardProps": {},
        "DashboardStats": {},
        "ApiResponse": {}
      },
      "call_graph": {}
    },
    "components\\error\\ApiErrorBoundary.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react",
        "next/link"
      ],
      "functions": {
        "useApiErrorHandler": "()"
      },
      "classes": {
        "ApiErrorBoundary": {
          "methods": {
            "constructor": "(props: Props)",
            "componentDidCatch": "(error: Error, errorInfo: React.ErrorInfo)",
            "componentWillUnmount": "()",
            "render": "()",
            "__init__": "(props: Props)"
          },
          "extends": "Component"
        }
      },
      "variables": [
        "isNetworkError",
        "errorData",
        "canAutoRetry",
        "handleError",
        "retry",
        "clearError"
      ],
      "interfaces": {
        "Props": {},
        "State": {}
      },
      "call_graph": {}
    },
    "components\\error\\FormErrorBoundary.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react"
      ],
      "functions": {
        "FormError": "({ error, field, className = '' }: FormErrorProps)",
        "useFormErrors": "()"
      },
      "classes": {
        "FormErrorBoundary": {
          "methods": {
            "constructor": "(props: Props)",
            "componentDidCatch": "(error: Error, errorInfo: React.ErrorInfo)",
            "render": "()",
            "__init__": "(props: Props)"
          },
          "extends": "Component"
        }
      },
      "variables": [
        "isFormError",
        "errors",
        "setError",
        "clearError",
        "newErrors",
        "clearAllErrors",
        "hasErrors",
        "getError"
      ],
      "interfaces": {
        "Props": {},
        "State": {},
        "FormErrorProps": {
          "doc": "Inline form error component for field-level errors"
        }
      },
      "call_graph": {}
    },
    "components\\error\\GlobalErrorBoundary.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {},
      "classes": {
        "GlobalErrorBoundary": {
          "methods": {
            "constructor": "(props: Props)",
            "componentDidCatch": "(error: Error, errorInfo: ErrorInfo)",
            "render": "()",
            "__init__": "(props: Props)"
          },
          "extends": "Component"
        }
      },
      "variables": [
        "errorData"
      ],
      "interfaces": {
        "Props": {},
        "State": {}
      },
      "call_graph": {}
    },
    "components\\judges\\AdvancedSearchFilters.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react"
      ],
      "functions": {
        "AdvancedSearchFilters": "({ onFiltersChange, onClearFilters, isOpen, onToggle }: AdvancedSearchFiltersProps)",
        "toggleArrayFilter": "(key: 'case_types' | 'court_types', value: string)",
        "clearAllFilters": "()",
        "hasActiveFilters": "()"
      },
      "classes": {},
      "variables": [
        "updateFilter",
        "toggleArrayFilter",
        "clearAllFilters",
        "hasActiveFilters"
      ],
      "interfaces": {
        "FilterOptions": {},
        "AdvancedFilters": {},
        "AdvancedSearchFiltersProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\AnalyticsSliders.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react"
      ],
      "functions": {
        "ConfidenceIndicator": {
          "calls": [
            "getConfidenceColor",
            "getConfidenceLabel"
          ],
          "signature": "({ confidence, sampleSize }: { confidence: number, sampleSize: number })"
        },
        "AnalyticsSlider": "({ label, value, leftLabel, rightLabel, color, description, confidence, sampleSize }: SliderProps)",
        "LegalDisclaimer": "({ analytics }: { analytics: CaseAnalytics })",
        "AnalyticsSliders": "({ judgeId, judgeName }: AnalyticsSlidersProps)",
        "fetchAnalytics": "async ()",
        "getConfidenceColor": {
          "signature": "(conf: number)",
          "called_by": [
            "ConfidenceIndicator"
          ]
        },
        "getConfidenceLabel": {
          "signature": "(conf: number)",
          "called_by": [
            "ConfidenceIndicator"
          ]
        }
      },
      "classes": {},
      "variables": [
        "getConfidenceColor",
        "getConfidenceLabel",
        "isLowConfidence",
        "response",
        "data",
        "sliders"
      ],
      "interfaces": {
        "CaseAnalytics": {},
        "AnalyticsSlidersProps": {},
        "SliderProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\AttorneySlots.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react"
      ],
      "functions": {
        "AttorneySlots": "({ judgeId, judgeName }: AttorneySlotsProps)",
        "load": "async ()",
        "resolvePrice": "async ()",
        "claimSlot": "async (slotId: string)"
      },
      "classes": {},
      "variables": [
        "isMounted",
        "res",
        "data",
        "availablePrice",
        "priceId",
        "errorData",
        "availableSlots",
        "totalSlots",
        "isAvailable"
      ],
      "interfaces": {
        "AttorneySlotsProps": {},
        "SlotRow": {}
      },
      "call_graph": {}
    },
    "components\\judges\\BiasPatternAnalysis.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "recharts",
        "lucide-react"
      ],
      "functions": {
        "BiasPatternAnalysis": "({ judge }: BiasPatternAnalysisProps)",
        "fetchBiasMetrics": "async ()",
        "getScoreColor": "(score: number)",
        "getScoreIcon": "(score: number)"
      },
      "classes": {},
      "constants": {
        "COLORS": "collection"
      },
      "variables": [
        "fetchBiasMetrics",
        "response",
        "data",
        "getScoreColor",
        "getScoreIcon"
      ],
      "interfaces": {
        "BiasMetrics": {},
        "BiasPatternAnalysisProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\BookmarkButton.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "@clerk/nextjs",
        "lucide-react"
      ],
      "functions": {
        "BookmarkButton": "({ judgeId, judgeName, className = '' }: BookmarkButtonProps)",
        "toggleBookmark": "async ()"
      },
      "classes": {},
      "variables": [
        "checkBookmarkStatus",
        "response",
        "isBookmarked",
        "toggleBookmark",
        "method",
        "error"
      ],
      "interfaces": {
        "BookmarkButtonProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\CaseOutcomeStatistics.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "recharts",
        "lucide-react"
      ],
      "functions": {
        "CaseOutcomeStatistics": "({ judge }: CaseOutcomeStatisticsProps)",
        "fetchOutcomeStats": "async ()"
      },
      "classes": {},
      "constants": {
        "COLORS": "collection"
      },
      "variables": [
        "fetchOutcomeStats",
        "response",
        "data",
        "pieData"
      ],
      "interfaces": {
        "CaseOutcomeStats": {},
        "CaseOutcomeStatisticsProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\EnhancedJudgeSearch.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react",
        "next/link",
        "./AdvancedSearchFilters",
        "@/lib/utils/slug"
      ],
      "functions": {
        "EnhancedJudgeSearch": "()",
        "handleSearch": "()",
        "handleFiltersChange": "(newFilters: any)",
        "handleClearFilters": "()",
        "loadMore": "()",
        "getExperienceColor": "(years: number)",
        "getEfficiencyColor": "(score: number)",
        "getSettlementColor": "(rate: number)"
      },
      "classes": {},
      "variables": [
        "performSearch",
        "params",
        "response",
        "data",
        "handleSearch",
        "handleFiltersChange",
        "handleClearFilters",
        "loadMore",
        "nextPage",
        "getExperienceColor",
        "getEfficiencyColor",
        "getSettlementColor"
      ],
      "interfaces": {
        "JudgeSearchResult": {
          "extends": [
            "Judge"
          ]
        },
        "AdvancedJudgeFilters": {},
        "AdvancedJudgeSearchResponse": {}
      },
      "call_graph": {}
    },
    "components\\judges\\JudgeClientWrapper.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "./JudgeErrorBoundary"
      ],
      "functions": {
        "JudgeClientWrapper": "({ children, judgeName, slug, suggestions }: JudgeClientWrapperProps)"
      },
      "classes": {},
      "interfaces": {
        "JudgeClientWrapperProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\JudgeErrorBoundary.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react",
        "next/link"
      ],
      "functions": {
        "useJudgeErrorHandler": "()"
      },
      "classes": {
        "JudgeErrorBoundary": {
          "methods": {
            "constructor": "(props: JudgeErrorBoundaryProps)",
            "componentDidCatch": "(error: Error, errorInfo: React.ErrorInfo)",
            "render": "()",
            "__init__": "(props: JudgeErrorBoundaryProps)"
          },
          "extends": "React"
        }
      },
      "variables": [
        "handleError"
      ],
      "interfaces": {
        "JudgeErrorBoundaryProps": {},
        "JudgeErrorBoundaryState": {}
      },
      "call_graph": {}
    },
    "components\\judges\\JudgeFAQ.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react"
      ],
      "functions": {
        "JudgeFAQ": "({ judgeName }: JudgeFAQProps)"
      },
      "classes": {},
      "variables": [
        "faqs"
      ],
      "interfaces": {
        "JudgeFAQProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\JudgeProfile.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react",
        "react",
        "next/link"
      ],
      "functions": {
        "JudgeProfile": "({ judge }: JudgeProfileProps)",
        "getCourtAndStateDisplay": "()"
      },
      "classes": {},
      "variables": [
        "getCourtAndStateDisplay",
        "courtName",
        "state",
        "courtlistenerData",
        "appointmentDate",
        "yearsOfService",
        "judicialPositions",
        "education",
        "school",
        "degree",
        "bio",
        "bioParts",
        "notablePositions",
        "positionText",
        "professionalBackground",
        "tabs"
      ],
      "interfaces": {
        "JudgeProfileProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\JudgeRulingPatterns.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "lucide-react"
      ],
      "functions": {
        "JudgeRulingPatterns": "({ judgeId }: JudgeRulingPatternsProps)"
      },
      "classes": {},
      "variables": [
        "patterns"
      ],
      "interfaces": {
        "JudgeRulingPatternsProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\Phase2CaseHistory.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/components/ui/card",
        "@/components/ui/badge",
        "@/components/ui/button",
        "recharts",
        "lucide-react"
      ],
      "functions": {
        "Phase2CaseHistory": "({ judgeId, judgeName, courtName }: Phase2CaseHistoryProps)",
        "generateSampleCases": "(): CaseData[]",
        "generateSampleAnalytics": "(): JudgeAnalytics[]"
      },
      "classes": {},
      "variables": [
        "fetchCaseHistory",
        "params",
        "response",
        "data",
        "fetchJudgeAnalytics",
        "generateSampleCases",
        "generateSampleAnalytics",
        "practiceAreas",
        "filteredCases",
        "totalCases",
        "totalValue",
        "avgDuration"
      ],
      "interfaces": {
        "CaseData": {},
        "JudgeAnalytics": {},
        "Phase2CaseHistoryProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\PopularCourts.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/link",
        "lucide-react",
        "react"
      ],
      "functions": {
        "PopularCourts": {
          "calls": [
            "fetchTopCourts",
            "formatCaseCount"
          ],
          "signature": "()"
        },
        "fetchTopCourts": {
          "signature": "async ()",
          "called_by": [
            "PopularCourts"
          ]
        },
        "formatCaseCount": {
          "signature": "(count: number)",
          "called_by": [
            "PopularCourts"
          ]
        }
      },
      "classes": {},
      "variables": [
        "response",
        "data",
        "formatCaseCount"
      ],
      "interfaces": {
        "Court": {},
        "TopCourtsResponse": {}
      },
      "call_graph": {}
    },
    "components\\judges\\RecentDecisions.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react",
        "react"
      ],
      "functions": {
        "RecentDecisions": "({ judgeId }: RecentDecisionsProps)",
        "load": "async ()"
      },
      "classes": {},
      "variables": [
        "res",
        "data",
        "caseTypeCounts",
        "type",
        "topCaseType"
      ],
      "interfaces": {
        "RecentDecisionsProps": {},
        "DecisionItem": {}
      },
      "call_graph": {}
    },
    "components\\judges\\SearchSection.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next/navigation",
        "lucide-react"
      ],
      "functions": {
        "useDebounce": {
          "signature": "(value: string, delay: number)",
          "called_by": [
            "useSearchDebounce"
          ]
        },
        "SearchSection": "()",
        "handleKeyDown": "(e: React.KeyboardEvent)",
        "handleClickOutside": "(event: MouseEvent)",
        "getResultIcon": "(type: string)",
        "getResultTypeLabel": "(type: string)"
      },
      "classes": {},
      "variables": [
        "handler",
        "router",
        "searchRef",
        "suggestionsRef",
        "debouncedSearchQuery",
        "fetchSearchResults",
        "response",
        "data",
        "handleSearch",
        "searchTerm",
        "handleKeyDown",
        "selectedResult",
        "handleClickOutside",
        "getResultIcon",
        "getResultTypeLabel"
      ],
      "call_graph": {}
    },
    "components\\judges\\profile\\AttorneyDirectoryBanner.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/link",
        "lucide-react"
      ],
      "functions": {
        "AttorneyDirectoryBanner": "({ jurisdiction }: AttorneyDirectoryBannerProps)"
      },
      "classes": {},
      "interfaces": {
        "AttorneyDirectoryBannerProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\profile\\index.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Application entry point"
    },
    "components\\judges\\profile\\JudgeFAQSection.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react",
        "react"
      ],
      "functions": {
        "JudgeFAQSection": {
          "calls": [
            "toggleItem"
          ],
          "signature": "({ judgeName, courtName, jurisdiction }: JudgeFAQSectionProps)"
        },
        "toggleItem": {
          "signature": "(index: number)",
          "called_by": [
            "JudgeFAQSection"
          ]
        }
      },
      "classes": {},
      "variables": [
        "nameWithoutTitle",
        "toggleItem",
        "newOpenItems"
      ],
      "interfaces": {
        "JudgeFAQSectionProps": {},
        "FAQItem": {}
      },
      "call_graph": {}
    },
    "components\\judges\\profile\\JudgeHeroSection.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "JudgeHeroSection": "({ judge, safeName, safeCourtName, safeJurisdiction }: JudgeHeroSectionProps)"
      },
      "classes": {},
      "variables": [
        "nameWithoutTitle"
      ],
      "interfaces": {
        "JudgeHeroSectionProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\profile\\JudgeMainContent.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react"
      ],
      "functions": {
        "JudgeMainContent": "({ judge, safeName, safeCourtName, safeJurisdiction }: JudgeMainContentProps)"
      },
      "classes": {},
      "variables": [
        "nameWithoutTitle"
      ],
      "interfaces": {
        "JudgeMainContentProps": {}
      },
      "call_graph": {}
    },
    "components\\judges\\profile\\JudgeStructuredData.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "JudgeStructuredData": "({ judge, safeName, safeCourtName, safeJurisdiction, slug }: JudgeStructuredDataProps)"
      },
      "classes": {},
      "variables": [
        "currentYear",
        "nameWithoutTitle",
        "baseUrl",
        "structuredData"
      ],
      "interfaces": {
        "JudgeStructuredDataProps": {}
      },
      "call_graph": {}
    },
    "components\\onboarding\\OnboardingWizard.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next/navigation",
        "@clerk/nextjs/server",
        "@clerk/nextjs",
        "lucide-react"
      ],
      "functions": {
        "OnboardingWizard": "({ user: serverUser }: OnboardingWizardProps)",
        "handleUseCaseToggle": "(useCase: string)",
        "handleComplete": "async ()",
        "nextStep": "()",
        "prevStep": "()"
      },
      "classes": {},
      "variables": [
        "user",
        "router",
        "professions",
        "useCases",
        "jurisdictions",
        "handleUseCaseToggle",
        "handleComplete",
        "nextStep",
        "prevStep"
      ],
      "interfaces": {
        "OnboardingWizardProps": {},
        "OnboardingData": {}
      },
      "call_graph": {}
    },
    "components\\profile\\ProfileSettings.tsx": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Configuration",
      "imports": [
        "react",
        "@clerk/nextjs/server",
        "lucide-react",
        "@clerk/nextjs"
      ],
      "functions": {
        "ProfileSettings": "({ user: serverUser }: ProfileSettingsProps)"
      },
      "classes": {},
      "variables": [
        "user"
      ],
      "interfaces": {
        "ProfileSettingsProps": {}
      },
      "call_graph": {}
    },
    "components\\providers\\Providers.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs",
        "react"
      ],
      "functions": {
        "Providers": "({ children }: { children: ReactNode })"
      },
      "classes": {},
      "call_graph": {}
    },
    "components\\seo\\RelatedContent.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/link",
        "@/components/ui/card",
        "@/components/ui/badge"
      ],
      "functions": {
        "RelatedContent": "({ currentJudge, relatedJudges, jurisdiction, courtName }: RelatedContentProps)",
        "getCourtType": "(courtName: string): string",
        "getServiceArea": "(jurisdiction: string): string"
      },
      "classes": {},
      "variables": [
        "safeName",
        "cleanName",
        "relatedName",
        "slug",
        "name"
      ],
      "interfaces": {
        "RelatedContentProps": {
          "doc": "Related Content System for internal linking and content discovery"
        }
      },
      "call_graph": {}
    },
    "components\\seo\\RelatedJudges.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "next/link",
        "lucide-react"
      ],
      "functions": {
        "RelatedJudges": {
          "calls": [
            "fetchRelatedJudges"
          ],
          "signature": "({ currentJudgeId, courtName, jurisdiction, judgeName }: RelatedJudgesProps)"
        },
        "fetchRelatedJudges": {
          "signature": "async ()",
          "called_by": [
            "RelatedJudges"
          ]
        }
      },
      "classes": {},
      "variables": [
        "response",
        "data"
      ],
      "interfaces": {
        "Judge": {},
        "RelatedJudgesProps": {}
      },
      "call_graph": {}
    },
    "components\\seo\\SEOBreadcrumbs.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/link",
        "lucide-react"
      ],
      "functions": {
        "SEOBreadcrumbs": "({ items, judgeName, jurisdiction }: SEOBreadcrumbsProps)",
        "generateJudgeBreadcrumbs": "(judgeName: string, jurisdiction: string, courtName: string): BreadcrumbItem[]",
        "generateCourtBreadcrumbs": "(courtName: string, jurisdiction: string): BreadcrumbItem[]"
      },
      "classes": {},
      "variables": [
        "jurisdictionSlug"
      ],
      "interfaces": {
        "BreadcrumbItem": {},
        "SEOBreadcrumbsProps": {}
      },
      "call_graph": {}
    },
    "components\\seo\\StructuredData.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "StructuredData": {
          "calls": [
            "getStructuredData"
          ],
          "signature": "({ type, data }: StructuredDataProps)"
        },
        "getStructuredData": {
          "signature": "()",
          "called_by": [
            "StructuredData"
          ]
        }
      },
      "classes": {},
      "variables": [
        "getStructuredData",
        "baseData"
      ],
      "interfaces": {
        "StructuredDataProps": {}
      },
      "call_graph": {}
    },
    "components\\ui\\badge.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react",
        "class-variance-authority",
        "@/lib/utils/index"
      ],
      "functions": {
        "Badge": "({ className, variant, ...props }: BadgeProps)"
      },
      "classes": {},
      "variables": [
        "badgeVariants"
      ],
      "interfaces": {
        "BadgeProps": {
          "extends": [
            "React.HTMLAttributes<HTMLDivElement>",
            "VariantProps<typeof badgeVariants>"
          ]
        }
      },
      "call_graph": {}
    },
    "components\\ui\\button.tsx": {
      "language": "typescript",
      "parsed": false
    },
    "components\\ui\\card.tsx": {
      "language": "typescript",
      "parsed": false
    },
    "components\\ui\\CountyComparison.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@heroicons/react/24/outline"
      ],
      "functions": {
        "CountyComparison": "()",
        "toggleCounty": "(countyId: string)"
      },
      "classes": {},
      "variables": [
        "toggleCounty",
        "selectedData"
      ],
      "interfaces": {
        "CountyData": {}
      },
      "call_graph": {}
    },
    "components\\ui\\CountySelector.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/navigation",
        "@heroicons/react/24/outline"
      ],
      "functions": {
        "CountySelector": {
          "calls": [
            "getStatusBadge",
            "handleCountyChange"
          ],
          "signature": "()"
        },
        "handleCountyChange": {
          "signature": "(county: County)",
          "called_by": [
            "CountySelector"
          ]
        },
        "getStatusBadge": {
          "signature": "(status: County['status'])",
          "called_by": [
            "CountySelector"
          ]
        }
      },
      "classes": {},
      "variables": [
        "router",
        "handleCountyChange",
        "getStatusBadge",
        "badges",
        "labels"
      ],
      "interfaces": {
        "County": {}
      },
      "call_graph": {}
    },
    "components\\ui\\Footer.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/link",
        "lucide-react"
      ],
      "functions": {
        "Footer": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "components\\ui\\Header.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/link",
        "react",
        "lucide-react",
        "@clerk/nextjs",
        "./NavLogo"
      ],
      "functions": {
        "Header": "()"
      },
      "classes": {},
      "call_graph": {}
    },
    "components\\ui\\NavLogo.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/link",
        "framer-motion"
      ],
      "functions": {
        "NavLogo": "({ className = \"\" })",
        "handleMouseMove": "(e: React.MouseEvent<HTMLDivElement>)"
      },
      "classes": {},
      "variables": [
        "mouseX",
        "mouseY",
        "rotateX",
        "rotateY",
        "handleMouseMove",
        "rect",
        "centerX",
        "centerY"
      ],
      "interfaces": {
        "NavLogoProps": {}
      },
      "call_graph": {}
    },
    "components\\ui\\Skeleton.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/lib/utils"
      ],
      "functions": {
        "Skeleton": "({ className, ...props }: SkeletonProps)",
        "JudgeCardSkeleton": "()",
        "CourtCardSkeleton": "()",
        "JudgeProfileSkeleton": "()",
        "SearchSkeleton": "()"
      },
      "classes": {},
      "interfaces": {
        "SkeletonProps": {
          "extends": [
            "React.HTMLAttributes<HTMLDivElement>"
          ]
        }
      },
      "call_graph": {}
    },
    "components\\ui\\WhatYoullLearn.tsx": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "lucide-react"
      ],
      "functions": {
        "WhatYoullLearn": "()"
      },
      "classes": {},
      "variables": [
        "features"
      ],
      "call_graph": {}
    },
    "components\\ui\\WhyJudgeResearch.tsx": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "WhyJudgeResearch": "()"
      },
      "classes": {},
      "variables": [
        "benefits"
      ],
      "call_graph": {}
    },
    "la-county-data\\la-county-market-intelligence.json": {
      "language": "json",
      "parsed": false
    },
    "lib\\rate-limit.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@upstash/ratelimit",
        "@upstash/redis"
      ],
      "functions": {
        "checkRateLimit": {
          "signature": "async (identifier: string, rateLimitType: keyof typeof rateLimits)",
          "called_by": [
            "withRateLimit",
            "rateLimitMiddleware"
          ]
        },
        "getRateLimitIdentifier": {
          "signature": "(request: Request, userId?: string): string",
          "called_by": [
            "withRateLimit",
            "rateLimitMiddleware"
          ]
        },
        "withRateLimit": {
          "calls": [
            "checkRateLimit",
            "getRateLimitIdentifier",
            "rateLimitMiddleware"
          ],
          "signature": "(rateLimitType: keyof typeof rateLimits)"
        },
        "rateLimitMiddleware": {
          "calls": [
            "checkRateLimit",
            "getRateLimitIdentifier"
          ],
          "signature": "async (request: Request, handler: (request: Request)",
          "called_by": [
            "withRateLimit"
          ]
        }
      },
      "classes": {},
      "variables": [
        "redis",
        "isRateLimitingEnabled",
        "rateLimits",
        "rateLimit",
        "forwarded",
        "realIp",
        "cfConnectingIp",
        "ip",
        "identifier",
        "result",
        "response"
      ],
      "call_graph": {}
    },
    "lib\\stripe.ts": {
      "language": "typescript",
      "parsed": false
    },
    "lib\\ai\\judicial-analytics.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@google/generative-ai",
        "openai"
      ],
      "functions": {
        "initializeGemini": {
          "signature": "()",
          "called_by": [
            "generateJudicialAnalytics"
          ]
        },
        "generateJudicialAnalytics": {
          "calls": [
            "estimateTokens",
            "generateFallbackAnalytics",
            "initializeGemini",
            "validateAndNormalizeAnalytics"
          ],
          "signature": "async (judge, caseDocuments)"
        },
        "validateAndNormalizeAnalytics": {
          "signature": "(data, documentCount)",
          "called_by": [
            "generateJudicialAnalytics",
            "generateAnalyticsWithOpenAI"
          ]
        },
        "generateFallbackAnalytics": {
          "signature": "(judge, reason, errorMessage = '')",
          "called_by": [
            "generateJudicialAnalytics",
            "generateAnalyticsWithOpenAI"
          ]
        },
        "estimateTokens": {
          "signature": "(text)",
          "called_by": [
            "generateJudicialAnalytics",
            "generateAnalyticsWithOpenAI"
          ]
        },
        "generateAnalyticsWithOpenAI": {
          "calls": [
            "estimateTokens",
            "generateFallbackAnalytics",
            "validateAndNormalizeAnalytics"
          ],
          "signature": "async (judge, caseDocuments)"
        }
      },
      "classes": {},
      "constants": {
        "ANALYTICS_PROMPTS": "collection"
      },
      "variables": [
        "genAI",
        "model",
        "documentSummaries",
        "appointedDate",
        "yearsExperience",
        "prompt",
        "result",
        "response",
        "text",
        "jsonMatch",
        "analytics",
        "normalized",
        "baseAnalytics",
        "openai",
        "completion",
        "responseText",
        "data"
      ],
      "call_graph": {}
    },
    "lib\\analytics\\seo-monitoring.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "trackJudgeSearchPerformance": "async (judgeName: string, jurisdiction: string): Promise<SEOMetrics | null>",
        "trackCoreWebVitals": {
          "signature": "()",
          "called_by": [
            "initializeSEOMonitoring"
          ]
        },
        "trackJudgePageEngagement": {
          "signature": "(judgeName: string, source?: string)",
          "called_by": [
            "initializeSEOMonitoring"
          ]
        },
        "trackAttorneyDirectoryUsage": "(judgeName: string, action: string)",
        "trackSearchQuery": "(query: string, judgeName: string, found: boolean)",
        "generateSEOReport": "(judgeName: string): object",
        "initializeSEOMonitoring": {
          "calls": [
            "trackCoreWebVitals",
            "trackJudgePageEngagement"
          ],
          "signature": "(judgeName: string)"
        },
        "trackScroll": "()"
      },
      "classes": {},
      "variables": [
        "searchKeywords",
        "metrics",
        "entries",
        "lastEntry",
        "fidEntry",
        "fidValue",
        "clsValue",
        "clsEntry",
        "maxScroll",
        "trackScroll",
        "scrollPercent",
        "startTime",
        "timeOnPage",
        "observeAds",
        "element"
      ],
      "interfaces": {
        "SEOMetrics": {},
        "SearchConsoleData": {},
        "Window": {
          "doc": "Track judge name search performance"
        }
      },
      "call_graph": {}
    },
    "lib\\auth\\admin.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@clerk/nextjs/server"
      ],
      "functions": {
        "isAdmin": {
          "signature": "async (): Promise<boolean>",
          "called_by": [
            "requireAdmin",
            "getUserRole"
          ]
        },
        "isAdminEmail": "(email: string): boolean",
        "requireAdmin": {
          "calls": [
            "isAdmin"
          ],
          "signature": "async (): Promise<void>"
        },
        "getUserRole": {
          "calls": [
            "isAdmin"
          ],
          "signature": "async (): Promise<'admin' | 'user'>"
        }
      },
      "classes": {},
      "constants": {
        "ADMIN_EMAILS": "value"
      },
      "variables": [
        "user",
        "userEmail",
        "isUserAdmin"
      ],
      "call_graph": {}
    },
    "lib\\cache\\simple-cache.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {},
      "classes": {
        "SimpleCache": {
          "methods": {
            "delete": "(key: string): void",
            "clear": "(): void",
            "size": "(): number",
            "cleanup": "(): void"
          }
        }
      },
      "variables": [
        "oldestKey",
        "entry",
        "now",
        "globalCache"
      ],
      "call_graph": {}
    },
    "lib\\courtlistener\\client.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/lib/utils/helpers"
      ],
      "functions": {
        "withRateLimit": "async (requests: (()"
      },
      "classes": {
        "CourtListenerClient": {
          "methods": {
            "constructor": "()",
            "getRecentOpinionsByJudge": "async (judgeId: string, yearsBack: number = 3): Promise<any[]>",
            "getClusterDetails": "async (clusterId: string | number): Promise<any>",
            "transformOpinionToCase": "(caseData: any, judgeId: string)",
            "validateJudge": "async (judgeId: string): Promise<boolean>",
            "__init__": "()"
          }
        }
      },
      "variables": [
        "url",
        "response",
        "errorText",
        "data",
        "endDate",
        "startDate",
        "offset",
        "pageSize",
        "hasMore",
        "cluster",
        "caseData",
        "caseName",
        "decisionDate",
        "result"
      ],
      "interfaces": {
        "CourtListenerOpinion": {}
      },
      "call_graph": {}
    },
    "lib\\database\\schema.sql": {
      "language": "sql",
      "parsed": false
    },
    "lib\\database\\sync-tables.sql": {
      "language": "sql",
      "parsed": false
    },
    "lib\\hooks\\useDebounce.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "react"
      ],
      "functions": {
        "useDebounce": {
          "signature": "(value: T, delay: number): T",
          "called_by": [
            "useSearchDebounce"
          ]
        },
        "useSearchDebounce": {
          "calls": [
            "useDebounce"
          ],
          "signature": "(searchQuery: string, delay: number = 300)"
        }
      },
      "classes": {},
      "variables": [
        "handler",
        "debouncedSearchQuery"
      ],
      "call_graph": {}
    },
    "lib\\middleware\\judge-redirects.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "next/server",
        "@/lib/utils/slug"
      ],
      "functions": {
        "handleJudgeRedirects": "(request: NextRequest): NextResponse | null",
        "getCanonicalJudgeUrl": {
          "signature": "(judgeName: string, baseUrl: string = 'https://judgefinder.io'): string",
          "called_by": [
            "getCanonicalRedirectUrl"
          ]
        },
        "generateJudgeUrlVariations": "(judgeName: string, baseUrl: string = 'https://judgefinder.io'): string[]",
        "isCanonicalJudgeUrl": {
          "signature": "(currentSlug: string, judgeName: string): boolean",
          "called_by": [
            "getCanonicalRedirectUrl"
          ]
        },
        "getCanonicalRedirectUrl": {
          "calls": [
            "getCanonicalJudgeUrl",
            "isCanonicalJudgeUrl"
          ],
          "signature": "(currentSlug: string, judgeName: string, baseUrl: string = 'https://judgefinder.io'): string | null"
        }
      },
      "classes": {},
      "constants": {
        "JUDGE_NAME_PATTERNS": "collection"
      },
      "variables": [
        "match",
        "judgeName",
        "canonicalSlug",
        "redirectUrl",
        "judgePageMatch",
        "currentSlug",
        "nameFromSlug",
        "titleVariations",
        "normalizedSlug",
        "canonical",
        "currentWords",
        "canonicalWords",
        "searchParams",
        "judgeQuery",
        "query",
        "lowerQuery",
        "cleanQuery",
        "baseName",
        "variations",
        "nameParts",
        "firstLast",
        "firstLastSlug"
      ],
      "call_graph": {}
    },
    "lib\\monitoring\\performance.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "measureTime": {
          "calls": [
            "trackMetric"
          ],
          "signature": "(fn: ()"
        },
        "withPerformanceTracking": {
          "calls": [
            "trackApiCall"
          ],
          "signature": "(handler: Function, routeName: string)"
        }
      },
      "classes": {
        "PerformanceMonitor": {
          "methods": {
            "trackApiCall": {
              "signature": "(endpoint: string, duration: number, status: number, context?: Record<string, any>)",
              "called_by": [
                "withPerformanceTracking"
              ]
            },
            "trackDatabaseQuery": "(table: string, operation: string, duration: number, context?: Record<string, any>)",
            "trackComponentRender": "(component: string, duration: number)",
            "trackCacheOperation": "(operation: 'hit' | 'miss' | 'set', key: string, duration?: number)",
            "trackMetric": {
              "signature": "(name: string, value: number, context?: Record<string, any>)",
              "called_by": [
                "measureTime"
              ]
            },
            "getMetricsSummary": {
              "signature": "(timeRangeMs?: number)",
              "called_by": [
                "PerformanceMonitor.exportMetrics"
              ]
            },
            "getSlowOperations": {
              "signature": "(threshold: number = 1000, timeRangeMs?: number)",
              "called_by": [
                "PerformanceMonitor.exportMetrics"
              ]
            },
            "cleanup": "()",
            "exportMetrics": {
              "calls": [
                "getMetricsSummary",
                "getSlowOperations"
              ],
              "signature": "()"
            }
          }
        }
      },
      "variables": [
        "cutoffTime",
        "relevantMetrics",
        "grouped",
        "sum",
        "p95Index",
        "oneHourAgo",
        "performanceMonitor",
        "start",
        "result",
        "duration"
      ],
      "interfaces": {
        "PerformanceMetric": {}
      },
      "call_graph": {}
    },
    "lib\\security\\headers.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "generateCSP": {
          "signature": "(config: SecurityConfig): string",
          "called_by": [
            "getSecurityHeaders"
          ]
        },
        "getSecurityHeaders": {
          "calls": [
            "generateCSP"
          ],
          "signature": "(config: SecurityConfig)"
        },
        "getCacheHeaders": "(pathname: string): Record<string, string>",
        "getCORSHeaders": "(config: SecurityConfig): Record<string, string>",
        "createSecurityConfig": "(): SecurityConfig"
      },
      "classes": {},
      "variables": [
        "isDev",
        "policies",
        "allowedOrigins",
        "environment",
        "domain"
      ],
      "interfaces": {
        "SecurityConfig": {
          "doc": "Security headers configuration for JudgeFinder Platform"
        }
      },
      "call_graph": {}
    },
    "lib\\seo\\content-generator.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/lib/utils/slug"
      ],
      "functions": {
        "generateUniqueJudgeContent": {
          "calls": [
            "calculateJudicialExperience",
            "classifyCourtSpecialty",
            "generateJurisdictionContent",
            "generateKeyHighlights",
            "generateProfessionalSummary",
            "generateUniqueDescription",
            "identifyPracticeAreas"
          ],
          "signature": "(judge: Judge): ContentVariations"
        },
        "generateUniqueDescription": {
          "signature": "(judge: Judge, experience: { years: number; description: string; tier: string }, courtType: string): string",
          "called_by": [
            "generateUniqueJudgeContent"
          ]
        },
        "generateJurisdictionContent": {
          "signature": "(judge: Judge, jurisdiction: string): string",
          "called_by": [
            "generateUniqueJudgeContent"
          ]
        },
        "identifyPracticeAreas": {
          "signature": "(courtName: string, jurisdiction: string): string[]",
          "called_by": [
            "generateUniqueJudgeContent"
          ]
        },
        "generateKeyHighlights": {
          "signature": "(judge: Judge, experience: { years: number; tier: string }, courtType: string): string[]",
          "called_by": [
            "generateUniqueJudgeContent"
          ]
        },
        "generateProfessionalSummary": {
          "signature": "(judge: Judge, experience: { years: number; tier: string; description: string }, firstName: string): string",
          "called_by": [
            "generateUniqueJudgeContent"
          ]
        },
        "calculateJudicialExperience": {
          "signature": "(appointedDate?: string): ",
          "called_by": [
            "generateUniqueJudgeContent"
          ]
        },
        "classifyCourtSpecialty": {
          "signature": "(courtName: string): string",
          "called_by": [
            "generateUniqueJudgeContent"
          ]
        },
        "generateRelatedJudges": "(currentJudge: Judge, allJudges: Judge[]): Judge[]"
      },
      "classes": {},
      "variables": [
        "safeName",
        "safeCourtName",
        "safeJurisdiction",
        "parsedName",
        "firstName",
        "experience",
        "courtType",
        "name",
        "courtName",
        "jurisdiction",
        "templates",
        "tierTemplates",
        "templateIndex",
        "info",
        "areas",
        "lowerCourtName",
        "specialties",
        "highlights",
        "summaryTemplates",
        "years",
        "description",
        "currentCourt",
        "currentJurisdiction",
        "sameCourtJudges",
        "sameJurisdictionJudges"
      ],
      "interfaces": {
        "ContentVariations": {
          "doc": "Dynamic content generation for unique judge descriptions"
        }
      },
      "call_graph": {}
    },
    "lib\\seo\\jurisdiction-content.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "generateJurisdictionContent": {
          "signature": "(jurisdictionSlug: string): ",
          "called_by": [
            "generateUniqueJudgeContent"
          ]
        },
        "generateJurisdictionKeywords": "(jurisdiction: JurisdictionData): string[]",
        "generateDefaultCaliforniaContent": "()",
        "getAvailableJurisdictions": "(): string[]",
        "isValidJurisdiction": "(slug: string): boolean"
      },
      "classes": {},
      "variables": [
        "jurisdiction",
        "keywords",
        "generalTerms"
      ],
      "interfaces": {
        "JurisdictionData": {
          "doc": "Jurisdiction-specific content generation for California counties"
        }
      },
      "call_graph": {}
    },
    "lib\\seo\\metadata-generator.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/lib/utils/slug"
      ],
      "functions": {
        "generateJudgeMetadata": {
          "calls": [
            "calculateExperience",
            "classifyCourtType",
            "classifyJurisdiction",
            "generateAlternateUrls",
            "generateCompellingDescription",
            "generateComprehensiveKeywords",
            "generateOptimizedTitle",
            "generateSocialDescription",
            "generateSocialTitle"
          ],
          "signature": "(judge: Judge, params: { slug: string }, baseUrl: string = 'https://judgefinder.io'): SEOMetadata"
        },
        "classifyCourtType": {
          "signature": "(courtName: string): string",
          "called_by": [
            "generateJudgeMetadata"
          ]
        },
        "classifyJurisdiction": {
          "signature": "(jurisdiction: string): string",
          "called_by": [
            "generateJudgeMetadata"
          ]
        },
        "calculateExperience": {
          "signature": "(appointedDate?: string): ",
          "called_by": [
            "generateJudgeMetadata"
          ]
        },
        "generateOptimizedTitle": {
          "signature": "(name: string, jurisdiction: string, courtType: string, experience: { years: number; isVeteran: boolean; isExperienced: boolean }): string",
          "called_by": [
            "generateJudgeMetadata"
          ]
        },
        "generateCompellingDescription": {
          "signature": "(name: string, courtName: string, jurisdiction: string, experience: { years: number; description: string; isVeteran: boolean }): string",
          "called_by": [
            "generateJudgeMetadata"
          ]
        },
        "generateSocialTitle": {
          "signature": "(name: string, jurisdiction: string, courtType: string): string",
          "called_by": [
            "generateJudgeMetadata"
          ]
        },
        "generateSocialDescription": {
          "signature": "(name: string, courtName: string, experience: { description: string }): string",
          "called_by": [
            "generateJudgeMetadata"
          ]
        },
        "generateComprehensiveKeywords": {
          "signature": "(name: string, firstName: string, lastName: string, fullNameNoMiddle: string, courtName: string, jurisdiction: string, courtType: string, jurisdictionType: string): string[]",
          "called_by": [
            "generateJudgeMetadata"
          ]
        },
        "generateAlternateUrls": {
          "signature": "(name: string, baseUrl: string): string[]",
          "called_by": [
            "generateJudgeMetadata"
          ]
        }
      },
      "classes": {},
      "variables": [
        "safeName",
        "safeCourtName",
        "safeJurisdiction",
        "canonicalSlug",
        "parsedName",
        "nameWithoutTitle",
        "firstName",
        "lastName",
        "fullNameNoMiddle",
        "courtType",
        "jurisdictionType",
        "experienceInfo",
        "title",
        "description",
        "keywords",
        "alternateUrls",
        "name",
        "years",
        "titlePatterns",
        "baseDescription",
        "experienceText",
        "callToAction",
        "caseTypes",
        "urls",
        "parsed",
        "firstLastSlug"
      ],
      "interfaces": {
        "SEOMetadata": {
          "doc": "Advanced SEO metadata generation for maximum search dominance"
        }
      },
      "call_graph": {}
    },
    "lib\\seo\\structured-data.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@/lib/utils/slug"
      ],
      "functions": {
        "generateJudgeStructuredData": {
          "calls": [
            "generateBreadcrumbSchema",
            "generateCourtOrganizationSchema",
            "generateDatasetSchema",
            "generateEducationalEventSchema",
            "generateEventSchema",
            "generateFAQSchema",
            "generateGovernmentServiceSchema",
            "generateJudgeFinderOrganizationSchema",
            "generateLegalServiceSchema",
            "generatePersonSchema",
            "generatePlaceSchema",
            "generateProfessionSchema",
            "generateReviewSchema",
            "generateWebPageSchema"
          ],
          "signature": "(judge: Judge, canonicalSlug: string, baseUrl: string = 'https://judgefinder.io'): any[]"
        },
        "generatePersonSchema": {
          "signature": "(judge: Judge, safeName: string, safeCourtName: string, safeJurisdiction: string, canonicalSlug: string, baseUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateCourtOrganizationSchema": {
          "signature": "(courtName: string, jurisdiction: string, baseUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateLegalServiceSchema": {
          "signature": "(judgeName: string, jurisdiction: string, baseUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateProfessionSchema": {
          "signature": "(judgeName: string, courtName: string, jurisdiction: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateReviewSchema": {
          "signature": "(judge: Judge, judgeName: string, canonicalUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateEventSchema": {
          "signature": "(judge: Judge, judgeName: string, courtName: string, jurisdiction: string, canonicalUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateEducationalEventSchema": {
          "signature": "(judge: Judge, judgeName: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateGovernmentServiceSchema": {
          "signature": "(judge: Judge, judgeName: string, courtName: string, jurisdiction: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateBreadcrumbSchema": {
          "signature": "(judgeName: string, jurisdiction: string, canonicalSlug: string, baseUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateFAQSchema": {
          "signature": "(judge: Judge, judgeName: string, courtName: string, jurisdiction: string, canonicalUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateWebPageSchema": {
          "signature": "(judge: Judge, judgeName: string, courtName: string, jurisdiction: string, canonicalSlug: string, baseUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateJudgeFinderOrganizationSchema": {
          "signature": "(baseUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generateDatasetSchema": {
          "signature": "(judgeName: string, jurisdiction: string, canonicalUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        },
        "generatePlaceSchema": {
          "signature": "(courtName: string, jurisdiction: string, baseUrl: string): any",
          "called_by": [
            "generateJudgeStructuredData"
          ]
        }
      },
      "classes": {},
      "variables": [
        "safeName",
        "safeCourtName",
        "safeJurisdiction",
        "canonicalUrl"
      ],
      "call_graph": {}
    },
    "lib\\supabase\\client.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@supabase/ssr",
        "@clerk/nextjs"
      ],
      "functions": {
        "createClient": "()",
        "createClerkSupabaseClient": "()"
      },
      "classes": {},
      "variables": [
        "clerkToken",
        "headers"
      ],
      "call_graph": {}
    },
    "lib\\supabase\\server.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@supabase/ssr",
        "next/headers",
        "@clerk/nextjs/server"
      ],
      "functions": {
        "createServerClient": {
          "calls": [
            "createSupabaseServerClient",
            "remove",
            "set"
          ],
          "signature": "async (): Promise<SupabaseClient>"
        },
        "createClerkSupabaseServerClient": {
          "calls": [
            "createSupabaseServerClient",
            "remove",
            "set"
          ],
          "signature": "async (): Promise<SupabaseClient>"
        },
        "createServiceRoleClient": {
          "calls": [
            "createSupabaseServerClient",
            "remove",
            "set"
          ],
          "signature": "async (): Promise<SupabaseClient>"
        }
      },
      "classes": {},
      "variables": [
        "cookieStore",
        "token"
      ],
      "call_graph": {}
    },
    "lib\\sync\\court-sync.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "@/lib/courtlistener/client",
        "@/lib/utils/logger"
      ],
      "functions": {},
      "classes": {
        "CourtSyncManager": {
          "methods": {
            "constructor": "()",
            "syncCourts": {
              "signature": "async (options: CourtSyncOptions = {}): Promise<CourtSyncResult>",
              "called_by": [
                "CourtListenerSyncService.run"
              ]
            },
            "__init__": "()"
          },
          "doc": "Court Data Synchronization Module"
        }
      },
      "variables": [
        "startTime",
        "result",
        "courtListenerCourts",
        "batchSize",
        "i",
        "batch",
        "batchResult",
        "errorMsg",
        "response",
        "data",
        "courts",
        "updated",
        "created",
        "existingCourt",
        "shouldUpdate",
        "lastUpdate",
        "daysSinceUpdate",
        "name"
      ],
      "interfaces": {
        "CourtSyncOptions": {
          "doc": "Court Data Synchronization Module"
        },
        "CourtSyncResult": {
          "doc": "Court Data Synchronization Module"
        },
        "CourtListenerCourt": {
          "doc": "Court Data Synchronization Module"
        }
      },
      "call_graph": {}
    },
    "lib\\sync\\decision-sync.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "@/lib/courtlistener/client",
        "@/lib/utils/logger"
      ],
      "functions": {},
      "classes": {
        "DecisionSyncManager": {
          "methods": {
            "constructor": "()",
            "syncDecisions": "async (options: DecisionSyncOptions = {}): Promise<DecisionSyncResult>",
            "__init__": "()"
          },
          "doc": "Decision Data Synchronization Module"
        }
      },
      "variables": [
        "startTime",
        "result",
        "judgesToSync",
        "batchSize",
        "i",
        "batch",
        "batchResult",
        "errorMsg",
        "query",
        "processed",
        "created",
        "updated",
        "duplicatesSkipped",
        "sinceDate",
        "decisions",
        "existingDecisions",
        "courtlistenerId",
        "daysAgo",
        "ninetyDaysAgo",
        "lastDate",
        "maxDecisions",
        "filteredDecisions",
        "caseRecord",
        "caseCount"
      ],
      "interfaces": {
        "DecisionSyncOptions": {
          "doc": "Decision Data Synchronization Module"
        },
        "DecisionSyncResult": {
          "doc": "Decision Data Synchronization Module"
        },
        "CourtListenerDecision": {
          "doc": "Decision Data Synchronization Module"
        }
      },
      "call_graph": {}
    },
    "lib\\sync\\judge-sync.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "@/lib/courtlistener/client",
        "@/lib/utils/logger"
      ],
      "functions": {},
      "classes": {
        "JudgeSyncManager": {
          "methods": {
            "constructor": "()",
            "syncJudges": {
              "signature": "async (options: JudgeSyncOptions = {}): Promise<JudgeSyncResult>",
              "called_by": [
                "CourtListenerJudgesSyncService.run"
              ]
            },
            "__init__": "()"
          },
          "doc": "Judge Data Synchronization Module"
        }
      },
      "variables": [
        "startTime",
        "result",
        "batchSize",
        "i",
        "batch",
        "processed",
        "judgesToSync",
        "batchResult",
        "query",
        "weekAgo",
        "updated",
        "created",
        "enhanced",
        "judgeData",
        "existingJudge",
        "judgeId",
        "response",
        "data",
        "updateData",
        "currentPosition",
        "insertData",
        "education",
        "bio",
        "courtName"
      ],
      "interfaces": {
        "JudgeSyncOptions": {
          "doc": "Judge Data Synchronization Module"
        },
        "JudgeSyncResult": {
          "doc": "Judge Data Synchronization Module"
        },
        "CourtListenerJudge": {
          "doc": "Judge Data Synchronization Module"
        }
      },
      "call_graph": {}
    },
    "lib\\sync\\queue-manager.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "@/lib/utils/logger",
        "./court-sync",
        "./judge-sync",
        "./decision-sync"
      ],
      "functions": {},
      "classes": {
        "SyncQueueManager": {
          "methods": {
            "constructor": "()",
            "getNextJob": "async (): Promise<SyncJob | null>",
            "startJob": "async (jobId: string): Promise<void>",
            "completeJob": "async (jobId: string, result: any): Promise<void>",
            "failJob": "async (jobId: string, error: Error, shouldRetry: boolean = true): Promise<void>",
            "processJob": "async (job: SyncJob): Promise<void>",
            "runFullSync": "async (options: any = {})",
            "startProcessing": "(intervalMs: number = 30000): void",
            "stopProcessing": "(): void",
            "getStats": "async (): Promise<QueueStats>",
            "cleanupOldJobs": "async (olderThanDays: number = 7): Promise<number>",
            "cancelJobs": "async (type?: SyncJobType): Promise<number>",
            "__init__": "()"
          },
          "doc": "Sync Queue Manager"
        }
      },
      "variables": [
        "job",
        "canRetry",
        "updateData",
        "retryDelay",
        "retryAt",
        "courtSync",
        "judgeSync",
        "decisionSync",
        "startTime",
        "stats",
        "cutoffDate",
        "deletedCount",
        "query",
        "cancelledCount"
      ],
      "type_aliases": {
        "SyncJobType": "'court' | 'judge' | 'decision' | 'full' | 'cleanup' export type SyncJobStatus = 'pending' | 'running' | 'completed' | 'failed' | 'cancelled' export interface SyncJob { id: string type: SyncJobType status: SyncJobStatus options: any priority: number scheduled_for: string started_at?: string completed_at?: string result?: any error_message?: string retry_count: number max_retries: number created_at: string updated_at: string } export interface QueueStats { pending: number running: number completed: number failed: number total: number } export class SyncQueueManager { private supabase: any private isProcessing = false private processingInterval: NodeJS.Timeout | null = null constructor() { this.supabase = createClient( process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY! ) } /** * Add a sync job to the queue */ async addJob( type: SyncJobType, options: any = {}, priority: number = 0, scheduledFor?: Date, maxRetries: number = 3 ): Promise<string> { const job = { id: `${type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`, type, status: 'pending' as SyncJobStatus, options, priority, scheduled_for: (scheduledFor || new Date()).toISOString(), retry_count: 0, max_retries: maxRetries, created_at: new Date().toISOString(), updated_at: new Date().toISOString() } const { error } = await this.supabase .from('sync_queue') .insert(job) if (error) { throw new Error(`Failed to add job to queue: ${error.message}`) } logger.info('Job added to sync queue', { jobId: job.id, type: job.type, priority: job.priority }) return job.id } /** * Get next job to process */ async getNextJob(): Promise<SyncJob | null> { const { data, error } = await this.supabase .from('sync_queue') .select('*') .eq('status', 'pending') .lte('scheduled_for', new Date().toISOString()) .order('priority', { ascending: false }) .order('created_at', { ascending: true }) .limit(1) .single() if (error && error.code !== 'PGRST116') { throw new Error(`Failed to get next job: ${error.message}`) } return data } /** * Mark job as running */ async startJob(jobId: string): Promise<void> { const { error } = await this.supabase .from('sync_queue') .update({ status: 'running', started_at: new Date().toISOString(), updated_at: new Date().toISOString() }) .eq('id', jobId) if (error) { throw new Error(`Failed to start job: ${error.message}`) } } /** * Mark job as completed */ async completeJob(jobId: string, result: any): Promise<void> { const { error } = await this.supabase .from('sync_queue') .update({ status: 'completed', result, completed_at: new Date().toISOString(), updated_at: new Date().toISOString() }) .eq('id', jobId) if (error) { throw new Error(`Failed to complete job: ${error.message}`) } } /** * Mark job as failed and potentially retry */ async failJob(jobId: string, error: Error, shouldRetry: boolean = true): Promise<void> { const { data: job } = await this.supabase .from('sync_queue') .select('retry_count, max_retries') .eq('id', jobId) .single() const canRetry = shouldRetry && job && job.retry_count < job.max_retries const updateData: any = { error_message: error.message, updated_at: new Date().toISOString() } if (canRetry) { // Schedule for retry (exponential backoff) const retryDelay = Math.pow(2, job.retry_count) * 60 * 1000 // Minutes in milliseconds const retryAt = new Date(Date.now() + retryDelay) updateData.status = 'pending' updateData.scheduled_for = retryAt.toISOString() updateData.retry_count = job.retry_count + 1 updateData.started_at = null } else { updateData.status = 'failed' updateData.completed_at = new Date().toISOString() } const { error: updateError } = await this.supabase .from('sync_queue') .update(updateData) .eq('id', jobId) if (updateError) { throw new Error(`Failed to fail job: ${updateError.message}`) } if (canRetry) { logger.info('Job scheduled for retry', { jobId, retryCount: job.retry_count + 1, retryAt: updateData.scheduled_for }) } else { logger.error('Job failed permanently', { jobId, error: error.message }) } } /** * Process a single job */ async processJob(job: SyncJob): Promise<void> { logger.info('Processing sync job', { jobId: job.id, type: job.type, attempt: job.retry_count + 1 }) try { await this.startJob(job.id) let result: any switch (job.type) { case 'court': const courtSync = new CourtSyncManager() result = await courtSync.syncCourts(job.options) break case 'judge': const judgeSync = new JudgeSyncManager() result = await judgeSync.syncJudges(job.options) break case 'decision': const decisionSync = new DecisionSyncManager() result = await decisionSync.syncDecisions(job.options) break case 'full': // Full sync - run all sync types in sequence result = await this.runFullSync(job.options) break default: throw new Error(`Unknown job type: ${job.type}`) } await this.completeJob(job.id, result) logger.info('Job completed successfully', { jobId: job.id, type: job.type, result: result.success }) } catch (error) { logger.error('Job processing failed', { jobId: job.id, type: job.type, error }) await this.failJob(job.id, error as Error) } } /** * Run full sync (all data types) */ async runFullSync(options: any = {}) { const results: { court: any | null"
      },
      "interfaces": {
        "SyncJob": {
          "doc": "Sync Queue Manager"
        },
        "QueueStats": {
          "doc": "Sync Queue Manager"
        }
      },
      "call_graph": {}
    },
    "lib\\utils\\helpers.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Utility functions",
      "functions": {
        "sleep": {
          "signature": "(ms: number): Promise<void>",
          "called_by": [
            "retryWithBackoff",
            "JudgeCourtDataMigrator.runMigration",
            "CourtListenerJudgesTestService.testApiConnectivity"
          ]
        },
        "chunkArray": "(array: T[], size: number): T[][]",
        "formatDateForAPI": "(date: Date): string",
        "retryWithBackoff": {
          "calls": [
            "sleep"
          ],
          "signature": "async (fn: ()"
        }
      },
      "classes": {},
      "variables": [
        "i",
        "delay"
      ],
      "call_graph": {}
    },
    "lib\\utils\\index.ts": {
      "language": "typescript",
      "parsed": true,
      "purpose": "Application entry point",
      "imports": [
        "clsx",
        "tailwind-merge"
      ],
      "functions": {
        "cn": "(...inputs: ClassValue[])"
      },
      "classes": {},
      "call_graph": {}
    },
    "lib\\utils\\logger.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {},
      "classes": {
        "Logger": {
          "methods": {
            "debug": "(message: string, context?: Record<string, any>)",
            "info": {
              "calls": [
                "consoleLog"
              ],
              "signature": "(message: string, context?: Record<string, any>)"
            },
            "warn": "(message: string, context?: Record<string, any>, error?: Error)",
            "error": {
              "signature": "(message: string, context?: Record<string, any>, error?: Error)",
              "called_by": [
                "GET",
                "POST"
              ]
            },
            "apiRequest": "(method: string, path: string, context?: Record<string, any>)",
            "apiResponse": "(method: string, path: string, status: number, duration?: number, context?: Record<string, any>)",
            "database": "(operation: string, table: string, context?: Record<string, any>)",
            "performance": "(operation: string, duration: number, context?: Record<string, any>)"
          }
        }
      },
      "variables": [
        "entry",
        "prefix",
        "formatted",
        "message",
        "level",
        "logger",
        "log",
        "logError",
        "logWarn",
        "logDebug"
      ],
      "interfaces": {
        "LogEntry": {}
      },
      "call_graph": {}
    },
    "lib\\utils\\slug.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "generateSlug": {
          "signature": "(name: string, options: SlugGenerationOptions = {}): string",
          "called_by": [
            "POST",
            "GET",
            "createCanonicalSlug",
            "generateSlugVariations",
            "nameToSlug",
            "generateAllSlugs",
            "generateMissingSlugs",
            "generateMissingSlugs"
          ]
        },
        "slugToName": "(slug: string): string",
        "isValidSlug": {
          "signature": "(slug: string): boolean",
          "called_by": [
            "generateSlugVariations",
            "isValidSlugVariation"
          ]
        },
        "generateNameVariations": "(name: string): string[]",
        "normalizeName": "(name: string): string",
        "parseJudgeName": {
          "signature": "(name: string): ",
          "called_by": [
            "createCanonicalSlug",
            "generateSlugVariations"
          ]
        },
        "createCanonicalSlug": {
          "calls": [
            "generateSlug",
            "parseJudgeName"
          ],
          "signature": "(name: string): string",
          "called_by": [
            "generateSlugVariations",
            "getSlugRedirectTarget",
            "generateJudgeUrlVariations"
          ]
        },
        "generateSlugVariations": {
          "calls": [
            "createCanonicalSlug",
            "generateSlug",
            "isValidSlug",
            "parseJudgeName"
          ],
          "signature": "(name: string): string[]",
          "called_by": [
            "isValidSlugVariation",
            "generateJudgeUrlVariations"
          ]
        },
        "isValidSlugVariation": {
          "calls": [
            "generateSlugVariations",
            "isValidSlug"
          ],
          "signature": "(slug: string, judgeName: string): boolean",
          "called_by": [
            "getSlugRedirectTarget"
          ]
        },
        "getSlugRedirectTarget": {
          "calls": [
            "createCanonicalSlug",
            "isValidSlugVariation"
          ],
          "signature": "(slug: string, judgeName: string): string | null"
        },
        "generateJudgeUrlVariations": {
          "calls": [
            "createCanonicalSlug",
            "generateSlugVariations"
          ],
          "signature": "(judgeName: string, baseUrl: string = ''): string[]"
        },
        "generateCourtSlug": {
          "signature": "(name: string): string",
          "called_by": [
            "createCanonicalCourtSlug",
            "normalizeCourtIdentifier",
            "generateSlugsForCourts",
            "populateCourtSlugs"
          ]
        },
        "courtSlugToName": "(slug: string): string",
        "isValidCourtSlug": {
          "signature": "(slug: string): boolean",
          "called_by": [
            "generateCourtSlugVariations",
            "normalizeCourtIdentifier"
          ]
        },
        "generateCourtNameVariations": "(name: string): string[]",
        "createCanonicalCourtSlug": {
          "calls": [
            "generateCourtSlug"
          ],
          "signature": "(name: string): string",
          "called_by": [
            "generateCourtSlugVariations"
          ]
        },
        "generateCourtSlugVariations": {
          "calls": [
            "createCanonicalCourtSlug",
            "isValidCourtSlug"
          ],
          "signature": "(name: string): string[]"
        },
        "isCourtIdentifier": "(identifier: string): ",
        "normalizeCourtIdentifier": {
          "calls": [
            "generateCourtSlug",
            "isValidCourtSlug"
          ],
          "signature": "(identifier: string): string"
        },
        "nameToSlug": {
          "calls": [
            "generateSlug"
          ],
          "signature": "(name: string): string"
        }
      },
      "classes": {},
      "variables": [
        "slug",
        "variations",
        "nameParts",
        "normalizedSpacing",
        "doubleSpaced",
        "singleSpaced",
        "doubleSpaceFirstMiddle",
        "middleParts",
        "doubleSpaceMiddleLast",
        "withoutPeriods",
        "withPeriods",
        "simpleName",
        "simpleWithoutPeriods",
        "reversedName",
        "spacedInitials",
        "normalized",
        "parts",
        "suffixes",
        "lastPart",
        "hasSuffix",
        "namePartsWithoutSuffix",
        "suffix",
        "firstName",
        "lastName",
        "middleName",
        "initials",
        "parsed",
        "canonical",
        "baseName",
        "firstLast",
        "nameWithInitials",
        "nameWithPeriodsInitials",
        "withoutSuffix",
        "slugVariations",
        "urls",
        "topVariations",
        "withCommaSpace",
        "withoutCommaSpace",
        "withCounty",
        "withoutCounty",
        "words",
        "courtKeywords",
        "filteredWords",
        "shortWords",
        "isSlug",
        "isId",
        "decoded"
      ],
      "call_graph": {}
    },
    "lib\\utils\\type-guards.ts": {
      "language": "typescript",
      "parsed": true,
      "functions": {
        "isString": {
          "signature": "(value: unknown): value is string",
          "called_by": [
            "isValidEmail",
            "isValidUUID",
            "isValidURL",
            "isJudge",
            "isCourt",
            "isCase",
            "isApiResponse",
            "validateStringLength"
          ]
        },
        "isNumber": {
          "signature": "(value: unknown): value is number",
          "called_by": [
            "isJudge",
            "isCourt",
            "isApiResponse",
            "validateNumberRange"
          ]
        },
        "isBoolean": {
          "signature": "(value: unknown): value is boolean",
          "called_by": [
            "isApiResponse"
          ]
        },
        "isArray": {
          "calls": [
            "isArray"
          ],
          "signature": "(value: unknown): value is unknown[]",
          "called_by": [
            "isArray",
            "isObject",
            "isJudgeArray",
            "isCourtArray",
            "isCaseArray"
          ]
        },
        "isObject": {
          "calls": [
            "isArray"
          ],
          "signature": "(value: unknown): value is Record<string, unknown>",
          "called_by": [
            "isJudge",
            "isCourt",
            "isCase",
            "isApiResponse",
            "isValidDatabaseRecord"
          ]
        },
        "isDate": "(value: unknown): value is Date",
        "isValidEmail": {
          "calls": [
            "isString"
          ],
          "signature": "(value: unknown): value is string"
        },
        "isValidUUID": {
          "calls": [
            "isString"
          ],
          "signature": "(value: unknown): value is string",
          "called_by": [
            "isJudge",
            "isCourt",
            "isCase",
            "isValidDatabaseRecord"
          ]
        },
        "isValidURL": {
          "calls": [
            "isString"
          ],
          "signature": "(value: unknown): value is string",
          "called_by": [
            "isJudge",
            "isCourt"
          ]
        },
        "isJudge": {
          "calls": [
            "isNumber",
            "isObject",
            "isString",
            "isValidURL",
            "isValidUUID"
          ],
          "signature": "(value: unknown): value is Judge"
        },
        "isCourt": {
          "calls": [
            "isNumber",
            "isObject",
            "isString",
            "isValidURL",
            "isValidUUID"
          ],
          "signature": "(value: unknown): value is Court"
        },
        "isCase": {
          "calls": [
            "isObject",
            "isString",
            "isValidUUID"
          ],
          "signature": "(value: unknown): value is Case"
        },
        "isJudgeArray": {
          "calls": [
            "isArray"
          ],
          "signature": "(value: unknown): value is Judge[]"
        },
        "isCourtArray": {
          "calls": [
            "isArray"
          ],
          "signature": "(value: unknown): value is Court[]"
        },
        "isCaseArray": {
          "calls": [
            "isArray"
          ],
          "signature": "(value: unknown): value is Case[]"
        },
        "isApiResponse": {
          "calls": [
            "isBoolean",
            "isNumber",
            "isObject",
            "isString"
          ],
          "signature": "(value: unknown, dataGuard: (data: unknown)"
        },
        "validateAndExtract": "(value: unknown, guard: (value: unknown)",
        "safeParseJSON": "(jsonString: string, guard: (value: unknown)",
        "validateStringLength": {
          "calls": [
            "isString"
          ],
          "signature": "(value: unknown, minLength: number = 0, maxLength: number = Infinity): value is string"
        },
        "validateNumberRange": {
          "calls": [
            "isNumber"
          ],
          "signature": "(value: unknown, min: number = -Infinity, max: number = Infinity): value is number"
        },
        "isValidDatabaseRecord": {
          "calls": [
            "isObject",
            "isValidUUID"
          ],
          "signature": "(value: unknown): value is Record<string, unknown>"
        },
        "isValidFormData": "(value: unknown): value is FormData",
        "validateSearchParams": "(searchParams: URLSearchParams): ",
        "isError": "(value: unknown): value is Error",
        "isHttpError": "(value: unknown): value is Error &",
        "assertType": "(value: unknown, guard: (value: unknown)"
      },
      "classes": {},
      "variables": [
        "emailRegex",
        "uuidRegex",
        "parsed",
        "hasTimestamp",
        "query",
        "page",
        "limit",
        "jurisdiction",
        "error"
      ],
      "call_graph": {}
    },
    "lib\\utils\\validation.ts": {
      "language": "typescript",
      "parsed": true,
      "imports": [
        "zod",
        "next/server",
        "./logger"
      ],
      "functions": {
        "validateParams": "(schema: z.ZodSchema<T>, params: unknown, context?: string): ",
        "validateSearchParams": "(schema: z.ZodSchema<T>, searchParams: URLSearchParams, context?: string): ",
        "validateJsonBody": "async (schema: z.ZodSchema<T>, request: Request, context?: string): Promise<",
        "isValidUUID": {
          "signature": "(value: string): boolean",
          "called_by": [
            "isJudge",
            "isCourt",
            "isCase",
            "isValidDatabaseRecord"
          ]
        },
        "isValidSlug": {
          "signature": "(value: string): boolean",
          "called_by": [
            "generateSlugVariations",
            "isValidSlugVariation"
          ]
        },
        "sanitizeSearchQuery": "(query: string): string"
      },
      "classes": {},
      "variables": [
        "slugSchema",
        "searchQuerySchema",
        "paginationSchema",
        "jurisdictionSchema",
        "judgeSearchParamsSchema",
        "judgeBySlugParamsSchema",
        "judgeIdParamsSchema",
        "courtSearchParamsSchema",
        "courtJudgesSearchParamsSchema",
        "analyticsParamsSchema",
        "result",
        "errors",
        "params",
        "body",
        "uuidRegex",
        "rateLimitSchema",
        "fileUploadSchema"
      ],
      "call_graph": {}
    },
    "scripts\\add-court-slugs-simple.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "dotenv"
      ],
      "functions": {
        "generateCourtSlug": {
          "signature": "(name)",
          "called_by": [
            "createCanonicalCourtSlug",
            "normalizeCourtIdentifier",
            "generateSlugsForCourts",
            "populateCourtSlugs"
          ]
        },
        "addSlugColumn": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "generateSlugsForCourts": {
          "calls": [
            "generateCourtSlug"
          ],
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "verifyResults": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "main": {
          "calls": [
            "addSlugColumn",
            "generateSlugsForCourts",
            "verifyResults"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "updated",
        "skipped",
        "slug",
        "results"
      ],
      "call_graph": {}
    },
    "scripts\\add-courtlistener-unique-constraint.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\add-rpc-function.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\add-slug-column-simple.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs"
      ],
      "functions": {
        "addSlugColumn": {
          "calls": [
            "generateAllSlugs",
            "generateMissingSlugs"
          ],
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "generateAllSlugs": {
          "calls": [
            "generateSlug"
          ],
          "signature": "async (supabase)",
          "called_by": [
            "addSlugColumn"
          ]
        },
        "generateMissingSlugs": {
          "calls": [
            "generateSlug"
          ],
          "signature": "async (supabase)",
          "called_by": [
            "addSlugColumn",
            "applySlugMigration"
          ]
        },
        "generateSlug": {
          "signature": "(name)",
          "called_by": [
            "POST",
            "GET",
            "createCanonicalSlug",
            "generateSlugVariations",
            "nameToSlug",
            "generateAllSlugs",
            "generateMissingSlugs",
            "generateMissingSlugs"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "usedSlugs",
        "updates",
        "baseSlug",
        "finalSlug",
        "counter",
        "fs",
        "slugMappings",
        "sqlStatements"
      ],
      "call_graph": {}
    },
    "scripts\\apply-court-slug-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path",
        "url"
      ],
      "functions": {
        "runMigration": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "migrationPath",
        "migrationSQL",
        "statements",
        "i",
        "statement"
      ],
      "call_graph": {}
    },
    "scripts\\apply-indexes.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "applyIndexes": "async ()"
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "sqlContent",
        "statements",
        "i",
        "statement"
      ],
      "call_graph": {}
    },
    "scripts\\apply-migrations-direct.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "DirectMigrationApplier": {
          "methods": {
            "constructor": "()",
            "step1_AddCourtListenerFields": "async ()",
            "step2_CreateJudgeCourtPositionsTable": "async ()",
            "checkColumnsExist": {
              "signature": "async ()",
              "called_by": [
                "DirectMigrationApplier.run"
              ]
            },
            "manualColumnCreation": {
              "signature": "async ()",
              "called_by": [
                "DirectMigrationApplier.run"
              ]
            },
            "waitForUserConfirmation": "async ()",
            "run": {
              "calls": [
                "checkColumnsExist",
                "manualColumnCreation"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Apply Database Migrations Directly"
        }
      },
      "variables": [
        "createTableSQL",
        "results",
        "columnState",
        "allColumnsExist",
        "applier",
        "success"
      ],
      "call_graph": {}
    },
    "scripts\\apply-migrations.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "executeSqlFile": {
          "signature": "async (filePath)",
          "called_by": [
            "main"
          ]
        },
        "checkTableExists": {
          "signature": "async (tableName)",
          "called_by": [
            "main",
            "PositionsTableCreator.run"
          ]
        },
        "main": {
          "calls": [
            "checkTableExists",
            "executeSqlFile"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "variables": [
        "fs",
        "path",
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "sql",
        "statements",
        "userBookmarksExists",
        "userPreferencesExists",
        "userTablesSuccess",
        "slugSuccess"
      ],
      "call_graph": {}
    },
    "scripts\\apply-revenue-schema.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "applyRevenueSchema": "async ()"
      },
      "classes": {},
      "variables": [
        "fs",
        "path",
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "sqlPath",
        "sql",
        "statements",
        "successCount",
        "errorCount"
      ],
      "call_graph": {}
    },
    "scripts\\apply-slug-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "applySlugMigration": {
          "calls": [
            "generateMissingSlugs"
          ],
          "signature": "async ()"
        },
        "generateMissingSlugs": {
          "calls": [
            "generateSlug"
          ],
          "signature": "async (supabase)",
          "called_by": [
            "addSlugColumn",
            "applySlugMigration"
          ]
        },
        "generateSlug": {
          "signature": "(name)",
          "called_by": [
            "POST",
            "GET",
            "createCanonicalSlug",
            "generateSlugVariations",
            "nameToSlug",
            "generateAllSlugs",
            "generateMissingSlugs",
            "generateMissingSlugs"
          ]
        }
      },
      "classes": {},
      "variables": [
        "fs",
        "path",
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "migrationPath",
        "migrationSQL",
        "statements",
        "i",
        "statement",
        "slug",
        "finalSlug",
        "counter"
      ],
      "call_graph": {}
    },
    "scripts\\apply-user-tables-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs"
      ],
      "functions": {
        "applyUserTablesMigration": "async ()"
      },
      "classes": {},
      "variables": [
        "fs",
        "supabase",
        "sqlContent",
        "statements",
        "successCount",
        "errorCount",
        "i",
        "statement"
      ],
      "call_graph": {}
    },
    "scripts\\automated-assignment-updater.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "node-cron",
        "./validate-court-assignments"
      ],
      "functions": {},
      "classes": {
        "AutomatedAssignmentUpdater": {
          "methods": {
            "constructor": "()",
            "validateConnection": "async ()",
            "getAssignmentsNeedingUpdate": "async ()",
            "fetchCourtListenerData": {
              "signature": "async (judgeId)",
              "called_by": [
                "AutomatedAssignmentUpdater.processAssignmentUpdate"
              ]
            },
            "detectAssignmentChanges": {
              "signature": "async (assignment, freshData)",
              "called_by": [
                "AutomatedAssignmentUpdater.processAssignmentUpdate"
              ]
            },
            "updateAssignmentVerification": {
              "signature": "async (assignmentId, changes = [], freshData = null)",
              "called_by": [
                "AutomatedAssignmentUpdater.processAssignmentUpdate"
              ]
            },
            "processAssignmentUpdate": {
              "calls": [
                "detectAssignmentChanges",
                "fetchCourtListenerData",
                "handleHighSeverityChanges",
                "updateAssignmentVerification"
              ],
              "signature": "async (assignment)"
            },
            "handleHighSeverityChanges": {
              "signature": "async (assignment, changes)",
              "called_by": [
                "AutomatedAssignmentUpdater.processAssignmentUpdate"
              ]
            },
            "generateUpdateReport": "async ()",
            "runUpdate": "async (options = {})",
            "startScheduledUpdates": "()",
            "stopScheduledUpdates": "()",
            "__init__": "()"
          },
          "doc": "Automated Court Assignment Updater"
        }
      },
      "variables": [
        "cron",
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "thirtyDaysAgo",
        "changes",
        "currentPositions",
        "assignmentMetadata",
        "lastKnownPositions",
        "existingPosition",
        "stillActive",
        "updateData",
        "currentMetadata",
        "freshData",
        "highSeverityChanges",
        "report",
        "assignments",
        "i",
        "batch",
        "validator",
        "validatorInstance",
        "args",
        "command",
        "updater"
      ],
      "call_graph": {}
    },
    "scripts\\batch-generate-analytics.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "batchGenerateAnalytics": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "judgesWithCases",
        "judgesWithoutCases",
        "successCount",
        "errorCount",
        "skippedCount",
        "batchSize",
        "i",
        "judgeBatch",
        "batchNumber",
        "totalBatches",
        "batchPromises",
        "startTime",
        "cacheAge",
        "hoursSinceCache",
        "baseUrl",
        "response",
        "analyticsData",
        "duration",
        "batchResults",
        "avgConfidence",
        "avgCases",
        "qualityDistribution",
        "quality"
      ],
      "call_graph": {}
    },
    "scripts\\complete-migration-process.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "CompleteMigrationProcess": {
          "methods": {
            "constructor": "()",
            "checkColumnExistence": {
              "signature": "async ()",
              "called_by": [
                "CompleteMigrationProcess.run"
              ]
            },
            "showRequiredSQL": {
              "signature": "async ()",
              "called_by": [
                "CompleteMigrationProcess.run"
              ]
            },
            "waitForColumns": {
              "signature": "async ()",
              "called_by": [
                "CompleteMigrationProcess.run"
              ]
            },
            "populateJudgeCourtPositions": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "determinePositionType": {
              "signature": "(judge)",
              "called_by": [
                "JudgeCourtDataMigrator.createJudgeCourtPosition"
              ]
            },
            "updateCourtJudgeCounts": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "MinimalMigrationExecutor.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "normalizeJurisdictions": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "verifyFinalState": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "generateFinalReport": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "run": {
              "calls": [
                "checkColumnExistence",
                "generateFinalReport",
                "normalizeJurisdictions",
                "populateJudgeCourtPositions",
                "showRequiredSQL",
                "updateCourtJudgeCounts",
                "verifyFinalState",
                "waitForColumns"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Complete Migration Process"
        }
      },
      "variables": [
        "missingColumns",
        "attempts",
        "maxAttempts",
        "processed",
        "created",
        "skipped",
        "positionType",
        "metadata",
        "positionData",
        "name",
        "courtName",
        "courtCounts",
        "updated",
        "success",
        "endTime",
        "duration",
        "columnsReady",
        "positionsSuccess",
        "verificationSuccess",
        "migration"
      ],
      "call_graph": {}
    },
    "scripts\\complete-migration.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\comprehensive-validation.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "node-fetch",
        "fs",
        "path",
        "child_process",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "runComprehensiveValidation"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "JudicialValidationSystem": {
          "methods": {
            "constructor": "()",
            "runComprehensiveValidation": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "validateDatabaseHealth": "async ()",
            "getAllJudges": "async ()",
            "validateProfileCompleteness": "async (judges)",
            "validateSingleProfile": "(judge)",
            "validateProfileAccessibility": "async (judges)",
            "testJudgeProfileURL": {
              "calls": [
                "generateSlugFromName"
              ],
              "signature": "async (judge)"
            },
            "validateCourtAssignments": "async (judges)",
            "validateCourtAssignment": "(judge)",
            "validateDataConsistency": "async (judges)",
            "validateAPIEndpoints": "async ()",
            "generateComprehensiveReport": "async ()",
            "generateRecommendations": "()",
            "setupAutomatedMonitoring": "async ()",
            "generateMonitoringScript": "()",
            "printValidationSummary": "(report)",
            "createBatches": "(array, batchSize)",
            "delay": "(ms)",
            "generateSlugFromName": {
              "signature": "(name)",
              "called_by": [
                "JudicialValidationSystem.testJudgeProfileURL"
              ]
            },
            "__init__": "()"
          },
          "doc": "COMPREHENSIVE JUDICIAL PLATFORM VALIDATION SYSTEM"
        }
      },
      "constants": {
        "CONFIG": "collection"
      },
      "variables": [
        "fetch",
        "fs",
        "path",
        "judges",
        "validProfiles",
        "invalidProfiles",
        "validation",
        "issues",
        "isValid",
        "accessibleUrls",
        "inaccessibleUrls",
        "batches",
        "i",
        "batchResults",
        "judge",
        "slug",
        "url",
        "response",
        "completeCourtData",
        "incompleteCourtData",
        "isComplete",
        "court",
        "inconsistencies",
        "jurisdictionCounts",
        "courtCounts",
        "nameMap",
        "endpoints",
        "startTime",
        "endTime",
        "responseTime",
        "profileSuccessRate",
        "urlSuccessRate",
        "courtDataSuccessRate",
        "report",
        "reportPath",
        "summaryPath",
        "recommendations",
        "apiIssues",
        "monitoringConfig",
        "monitoringPath",
        "monitoringScript",
        "scriptPath",
        "mode",
        "command",
        "result",
        "latestReport",
        "validator"
      ],
      "call_graph": {}
    },
    "scripts\\consolidated-migrations.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\court-assignment-validator.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "runCourtAssignmentValidation"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "CourtAssignmentValidator": {
          "methods": {
            "constructor": "()",
            "runCourtAssignmentValidation": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "validateJudgeCourtAssignments": "async ()",
            "validateSingleJudgeAssignment": "(judge)",
            "validateCourtCoverage": "async ()",
            "analyzeJurisdictionConsistency": "async ()",
            "generateRecommendations": "async ()",
            "generateCourtAssignmentReport": "async ()",
            "printCourtAssignmentSummary": "(report)",
            "__init__": "()"
          },
          "doc": "COURT ASSIGNMENT DATA VALIDATOR"
        }
      },
      "constants": {
        "CONFIG": "collection"
      },
      "variables": [
        "fs",
        "path",
        "validation",
        "court",
        "judgeCountsByCourt",
        "actualJudgeCount",
        "recordedJudgeCount",
        "courtIssues",
        "judgeJurisdictionCounts",
        "jurisdiction",
        "courtJurisdictionCounts",
        "allJurisdictions",
        "judgeCount",
        "courtCount",
        "recommendations",
        "incompleteDataIssues",
        "assignmentRate",
        "validRelationshipRate",
        "report",
        "reportPath",
        "validator"
      ],
      "call_graph": {}
    },
    "scripts\\create-analytics-cache-table.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "createAnalyticsCacheTable": "async ()",
        "createTableDirectSQL": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "createTableSQL"
      ],
      "call_graph": {}
    },
    "scripts\\create-analytics-cache-table.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\create-court-slug-column.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\create-missing-table.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "createMissingTable": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "verifyTableExists": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "main": {
          "calls": [
            "createMissingTable",
            "verifyTableExists"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "createTableQuery",
        "exists",
        "created"
      ],
      "call_graph": {}
    },
    "scripts\\create-positions-table.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "PositionsTableCreator": {
          "methods": {
            "constructor": "()",
            "checkTableExists": {
              "signature": "async ()",
              "called_by": [
                "PositionsTableCreator.run",
                "main"
              ]
            },
            "createTableViaSQL": "async ()",
            "showManualInstructions": {
              "signature": "async ()",
              "called_by": [
                "PositionsTableCreator.run"
              ]
            },
            "run": {
              "calls": [
                "checkTableExists",
                "showManualInstructions"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Create Judge Court Positions Table"
        }
      },
      "variables": [
        "tableExists",
        "creator",
        "success"
      ],
      "call_graph": {}
    },
    "scripts\\create-user-tables.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\data-integrity-validator.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "runDataIntegrityValidation"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "DataIntegrityValidator": {
          "methods": {
            "constructor": "()",
            "runDataIntegrityValidation": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "validateJudgesTableIntegrity": "async ()",
            "validateCourtsTableIntegrity": "async ()",
            "validateRelationshipsIntegrity": "async ()",
            "performDataQualityAnalysis": "async ()",
            "performConsistencyChecks": "async ()",
            "calculateIntegrityScore": "async ()",
            "calculateCompletenessScore": "(judgesValidation, courtsValidation)",
            "calculateValidityScore": "(judgesValidation, courtsValidation)",
            "calculateConsistencyScore": {
              "signature": "(consistencyChecks)",
              "called_by": [
                "calculateBiasIndicators"
              ]
            },
            "calculateRelationshipIntegrityScore": "(relationshipsValidation)",
            "countCriticalIssues": "()",
            "countDataQualityIssues": "()",
            "countCompletenessIssues": "(judgesValidation, courtsValidation)",
            "generateIntegrityRecommendations": "async ()",
            "generateIntegrityReport": "async ()",
            "printIntegritySummary": "(report)",
            "isValidURL": {
              "signature": "(string)",
              "called_by": [
                "isJudge",
                "isCourt"
              ]
            },
            "isValidPhone": "(phone)",
            "__init__": "()"
          },
          "doc": "DATA INTEGRITY VALIDATION SYSTEM"
        }
      },
      "constants": {
        "CONFIG": "collection"
      },
      "variables": [
        "fs",
        "path",
        "validation",
        "fields",
        "nameMap",
        "emailSet",
        "isValid",
        "issues",
        "appointedDate",
        "currentDate",
        "total",
        "typeDistribution",
        "validRelationships",
        "invalidRelationships",
        "orphanedJudges",
        "courtsWithJudges",
        "orphanedCourts",
        "analysis",
        "namesWithNumbers",
        "namesWithSpecialChars",
        "shortNames",
        "longNames",
        "invalidDates",
        "futureDates",
        "negativeNumbers",
        "extremeValues",
        "date",
        "checks",
        "jurisdictionMatches",
        "jurisdictionMismatches",
        "nameMatches",
        "nameMismatches",
        "judgesValidation",
        "courtsValidation",
        "relationshipsValidation",
        "qualityAnalysis",
        "consistencyChecks",
        "completenessScore",
        "validityScore",
        "consistencyScore",
        "integrityScore",
        "overallScore",
        "judgeFields",
        "courtFields",
        "avgJudgeCompleteness",
        "avgCourtCompleteness",
        "totalRecords",
        "validRecords",
        "totalJurisdictionChecks",
        "totalNameChecks",
        "jurisdictionScore",
        "nameScore",
        "totalRelationships",
        "judgesIssues",
        "courtsIssues",
        "orphanedRecords",
        "recommendations",
        "report",
        "reportPath",
        "score",
        "interpretation",
        "validator"
      ],
      "call_graph": {}
    },
    "scripts\\database-integrity-check.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "createHelperFunctions": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "main": {
          "calls": [
            "createHelperFunctions",
            "runAllChecks"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "DatabaseIntegrityChecker": {
          "methods": {
            "constructor": "()",
            "runAllChecks": {
              "calls": [
                "analyzePerformance",
                "checkBasicTableStats",
                "checkDataCompleteness",
                "checkDataQuality",
                "checkReferentialIntegrity",
                "findDuplicateRecords",
                "findOrphanedRecords",
                "generateReport",
                "validateCourtJudgeRelationships",
                "validateGeographicData"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "checkBasicTableStats": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "checkReferentialIntegrity": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "checkDataCompleteness": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "checkDataQuality": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "findOrphanedRecords": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "findDuplicateRecords": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "analyzePerformance": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "validateGeographicData": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "validateCourtJudgeRelationships": {
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "generateReport": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "CourtListenerSyncService.run",
                "DatabaseIntegrityChecker.runAllChecks",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "calculateHealthScore": "()",
            "generateRecommendations": "()",
            "displaySummary": "()",
            "__init__": "()"
          },
          "doc": "Comprehensive Database Integrity Check for JudgeFinder Platform"
        }
      },
      "variables": [
        "fs",
        "path",
        "supabase",
        "tables",
        "missingCourtId",
        "missingCourtName",
        "missingJurisdiction",
        "missingType",
        "missingAddress",
        "invalidNames",
        "missingIndexes",
        "jurisdictionCounts",
        "jur",
        "caVariants",
        "totalIssues",
        "criticalIssues",
        "highIssues",
        "mediumIssues",
        "reportPath",
        "totalChecks",
        "issueWeight",
        "deductions",
        "baseScore",
        "score",
        "functions",
        "checker"
      ],
      "call_graph": {}
    },
    "scripts\\debug-table-existence.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "debugTableExistence": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "testRecord",
        "tables"
      ],
      "call_graph": {}
    },
    "scripts\\demo-analytics.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "demoAnalytics": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "i",
        "judge",
        "response",
        "analyticsData",
        "analytics"
      ],
      "call_graph": {}
    },
    "scripts\\deploy-rls-production.sh": {
      "language": "shell",
      "parsed": false
    },
    "scripts\\direct-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "pg",
        "fs"
      ],
      "functions": {
        "applyUserTablesMigration": "async ()"
      },
      "classes": {},
      "variables": [
        "fs",
        "client",
        "sqlContent"
      ],
      "call_graph": {}
    },
    "scripts\\execute-full-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "createExecSqlFunction": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "main": {
          "calls": [
            "createExecSqlFunction",
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "FullMigrationExecutor": {
          "methods": {
            "constructor": "()",
            "executeSQLFile": {
              "signature": "async (filePath)",
              "called_by": [
                "FullMigrationExecutor.run"
              ]
            },
            "checkTableExists": {
              "signature": "async (tableName)",
              "called_by": [
                "PositionsTableCreator.run",
                "main"
              ]
            },
            "verifyMigrationState": {
              "signature": "async ()",
              "called_by": [
                "FullMigrationExecutor.run"
              ]
            },
            "run": {
              "calls": [
                "executeSQLFile",
                "verifyMigrationState"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Execute Full Database Migration"
        }
      },
      "variables": [
        "fs",
        "path",
        "sql",
        "statements",
        "i",
        "statement",
        "tablesExist",
        "migrationFiles",
        "fullPath",
        "success",
        "migrationComplete",
        "supabase",
        "migrator"
      ],
      "call_graph": {}
    },
    "scripts\\execute-migrations-direct.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "executeMigrations"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "DirectMigrationExecutor": {
          "methods": {
            "constructor": "()",
            "validateEnvironment": "()",
            "executeDDL": "async (statement)",
            "executeMigrations": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "verifyMigrations": "async ()",
            "__init__": "()"
          },
          "doc": "Direct Database Migration Executor"
        }
      },
      "variables": [
        "fs",
        "path",
        "required",
        "missing",
        "response",
        "errorText",
        "tempFunctionName",
        "createFuncSQL",
        "dropFuncSQL",
        "courtsStatements",
        "judgesStatements",
        "createTableStatement",
        "indexStatements",
        "executor",
        "success"
      ],
      "call_graph": {}
    },
    "scripts\\execute-migrations.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs"
      ],
      "functions": {
        "executeMigrations": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        }
      },
      "classes": {},
      "variables": [
        "fs",
        "supabase",
        "rpcFunction"
      ],
      "call_graph": {}
    },
    "scripts\\execute-minimal-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "readline",
        "./migrate-existing-judge-court-data.js"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "MinimalMigrationExecutor": {
          "methods": {
            "constructor": "()",
            "showMigrationInstructions": {
              "signature": "async ()",
              "called_by": [
                "MinimalMigrationExecutor.run"
              ]
            },
            "waitForUserConfirmation": "async ()",
            "verifyMigrationComplete": {
              "signature": "async ()",
              "called_by": [
                "MinimalMigrationExecutor.run"
              ]
            },
            "proceedWithDataMigration": {
              "signature": "async ()",
              "called_by": [
                "MinimalMigrationExecutor.run"
              ]
            },
            "updateCourtJudgeCounts": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "MinimalMigrationExecutor.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "handleJurisdictionNormalization": {
              "signature": "async ()",
              "called_by": [
                "MinimalMigrationExecutor.run"
              ]
            },
            "verifyCaliforniaJudgesAccessible": {
              "signature": "async ()",
              "called_by": [
                "MinimalMigrationExecutor.run"
              ]
            },
            "run": {
              "calls": [
                "handleJurisdictionNormalization",
                "proceedWithDataMigration",
                "showMigrationInstructions",
                "updateCourtJudgeCounts",
                "verifyCaliforniaJudgesAccessible",
                "verifyMigrationComplete"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Minimal Migration Executor"
        }
      },
      "variables": [
        "readline",
        "rl",
        "migrator",
        "result",
        "counts",
        "updated",
        "caCount",
        "californiaCount",
        "migrationComplete",
        "dataMigrationSuccess",
        "caJudgesOk",
        "executor",
        "success"
      ],
      "call_graph": {}
    },
    "scripts\\final-rpc-function.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\fix-judge-court-assignments.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "fixJudgeCourtAssignments": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "fixCaliforniaJudgesAccessibility": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "main": {
          "calls": [
            "fixCaliforniaJudgesAccessibility",
            "fixJudgeCourtAssignments"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "fixedCount",
        "matchedByName",
        "matchedByJurisdiction",
        "matchedCourt",
        "updatedCount"
      ],
      "call_graph": {}
    },
    "scripts\\fix-orphaned-cases.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "fixOrphanedCases": "async ()"
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseKey",
        "supabase"
      ],
      "call_graph": {}
    },
    "scripts\\fix-rpc-function.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\fixed-migrations.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\generate-production-secrets.js": {
      "language": "javascript",
      "parsed": false
    },
    "scripts\\implement-rls-policies.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\integrity-check-queries.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\investigate-ca-judges.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "investigateCAJudges": "async ()"
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "jurisdictionCounts",
        "nameCounts",
        "duplicates"
      ],
      "call_graph": {}
    },
    "scripts\\manual-migration-via-insert.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "ManualMigrationGuide": {
          "methods": {
            "constructor": "()",
            "validateEnvironment": "()",
            "checkCurrentState": {
              "signature": "async ()",
              "called_by": [
                "ManualMigrationGuide.run",
                "MigrationCompletionGuide.run"
              ]
            },
            "generateMigrationSQL": {
              "signature": "()",
              "called_by": [
                "ManualMigrationGuide.run"
              ]
            },
            "createBackup": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "ManualMigrationGuide.run",
                "CourtListenerJudgesSyncService.run"
              ]
            },
            "run": {
              "calls": [
                "checkCurrentState",
                "createBackup",
                "generateMigrationSQL"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Manual Database Migration using Supabase Client Operations"
        }
      },
      "variables": [
        "required",
        "missing",
        "statements",
        "backupData",
        "fs",
        "path",
        "backupPath",
        "state",
        "guide"
      ],
      "call_graph": {}
    },
    "scripts\\migrate-existing-court-assignments.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {},
      "classes": {
        "AssignmentMigration": {
          "methods": {
            "constructor": "()",
            "validateDatabaseConnection": "async ()",
            "ensureAssignmentTableExists": "async ()",
            "getExistingJudgeCourtData": "async ()",
            "checkExistingAssignments": "async ()",
            "estimateAssignmentDate": {
              "signature": "(judge)",
              "called_by": [
                "AssignmentMigration.migrateJudgeAssignment"
              ]
            },
            "extractPositionDetails": {
              "signature": "(judge)",
              "called_by": [
                "AssignmentMigration.migrateJudgeAssignment"
              ]
            },
            "migrateJudgeAssignment": {
              "calls": [
                "estimateAssignmentDate",
                "extractPositionDetails"
              ],
              "signature": "async (judge, existingAssignments)"
            },
            "validateMigration": "async ()",
            "run": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Migration Script: Convert existing judge-court relationships to new assignment tracking system"
        }
      },
      "variables": [
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "existingMap",
        "appointedDate",
        "positions",
        "startDate",
        "createdDate",
        "defaultDate",
        "details",
        "currentPosition",
        "assignmentKey",
        "assignmentStartDate",
        "positionDetails",
        "assignmentData",
        "judges",
        "existingAssignments",
        "batchSize",
        "i",
        "batch",
        "migration"
      ],
      "call_graph": {}
    },
    "scripts\\migrate-existing-judge-court-data.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "runMigration"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "JudgeCourtDataMigrator": {
          "methods": {
            "constructor": "()",
            "validateEnvironment": "()",
            "getJudgesWithCourtAssignments": {
              "signature": "async ()",
              "called_by": [
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "createJudgeCourtPosition": {
              "calls": [
                "determinePositionType"
              ],
              "signature": "async (judge, dryRun = false)",
              "called_by": [
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "determinePositionType": {
              "signature": "(judge)",
              "called_by": [
                "JudgeCourtDataMigrator.createJudgeCourtPosition"
              ]
            },
            "runMigration": {
              "calls": [
                "createJudgeCourtPosition",
                "generateReport",
                "getJudgesWithCourtAssignments",
                "sleep"
              ],
              "signature": "async (dryRun = false)",
              "called_by": [
                "main"
              ]
            },
            "generateReport": {
              "signature": "async (dryRun = false)",
              "called_by": [
                "CourtListenerJudgesSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "CourtListenerSyncService.run",
                "DatabaseIntegrityChecker.runAllChecks",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "sleep": {
              "signature": "async (ms)",
              "called_by": [
                "retryWithBackoff",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "__init__": "()"
          },
          "doc": "Migrate Existing Judge-Court Data"
        }
      },
      "variables": [
        "required",
        "missing",
        "positionType",
        "metadata",
        "positionData",
        "name",
        "courtName",
        "judges",
        "i",
        "judge",
        "progress",
        "report",
        "endTime",
        "duration",
        "success",
        "args",
        "isDryRun",
        "migrator",
        "result"
      ],
      "call_graph": {}
    },
    "scripts\\migration-completion-guide.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "MigrationCompletionGuide": {
          "methods": {
            "constructor": "()",
            "checkCurrentState": {
              "signature": "async ()",
              "called_by": [
                "ManualMigrationGuide.run",
                "MigrationCompletionGuide.run"
              ]
            },
            "generateSQLScript": {
              "signature": "async ()",
              "called_by": [
                "MigrationCompletionGuide.run"
              ]
            },
            "showNextSteps": {
              "signature": "async (state)",
              "called_by": [
                "MigrationCompletionGuide.run"
              ]
            },
            "testDataAccess": {
              "signature": "async ()",
              "called_by": [
                "MigrationCompletionGuide.run"
              ]
            },
            "run": {
              "calls": [
                "checkCurrentState",
                "generateSQLScript",
                "showNextSteps",
                "testDataAccess"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Migration Completion Guide"
        }
      },
      "variables": [
        "fs",
        "path",
        "state",
        "migrationFiles",
        "combinedSQL",
        "fullPath",
        "sql",
        "outputPath",
        "response",
        "data",
        "sqlPath",
        "guide",
        "ready"
      ],
      "call_graph": {}
    },
    "scripts\\migration-direct.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "checkMigrationStatus": "async ()"
      },
      "classes": {},
      "variables": [
        "fs",
        "path",
        "supabaseUrl",
        "serviceKey",
        "supabase",
        "userTablesExist",
        "slugColumnExists"
      ],
      "call_graph": {}
    },
    "scripts\\minimal-migration-sql.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\performance-indexes.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\performance-test.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "perf_hooks"
      ],
      "functions": {
        "testEndpoint": {
          "signature": "async (endpoint)",
          "called_by": [
            "runPerformanceTests",
            "runAPITests"
          ]
        },
        "runPerformanceTests": {
          "calls": [
            "testEndpoint"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "constants": {
        "BASE_URL": "str"
      },
      "variables": [
        "endpoints",
        "url",
        "start",
        "response",
        "end",
        "duration",
        "results",
        "runs",
        "i",
        "result",
        "avgDuration",
        "minDuration",
        "maxDuration",
        "successRate",
        "testResult",
        "overallAvg",
        "goodEndpoints",
        "needsImprovementEndpoints",
        "poorEndpoints",
        "icon"
      ],
      "call_graph": {}
    },
    "scripts\\populate-court-slugs.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "generateCourtSlug": {
          "signature": "(name)",
          "called_by": [
            "createCanonicalCourtSlug",
            "normalizeCourtIdentifier",
            "generateSlugsForCourts",
            "populateCourtSlugs"
          ]
        },
        "populateCourtSlugs": {
          "calls": [
            "generateCourtSlug"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "variables": [
        "slug",
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "batchSize",
        "processed",
        "i",
        "batch",
        "updates"
      ],
      "call_graph": {}
    },
    "scripts\\post-manual-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "PostManualMigration": {
          "methods": {
            "constructor": "()",
            "verifySchemaReady": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run"
              ]
            },
            "populateJudgeCourtPositions": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "determinePositionType": {
              "signature": "(judge)",
              "called_by": [
                "JudgeCourtDataMigrator.createJudgeCourtPosition"
              ]
            },
            "updateCourtJudgeCounts": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "MinimalMigrationExecutor.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "normalizeJurisdictions": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "verifyFinalState": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "generateFinalReport": {
              "signature": "async ()",
              "called_by": [
                "PostManualMigration.run",
                "CompleteMigrationProcess.run"
              ]
            },
            "run": {
              "calls": [
                "generateFinalReport",
                "normalizeJurisdictions",
                "populateJudgeCourtPositions",
                "updateCourtJudgeCounts",
                "verifyFinalState",
                "verifySchemaReady"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Post-Manual Migration Script"
        }
      },
      "variables": [
        "checks",
        "allReady",
        "batchSize",
        "processed",
        "created",
        "skipped",
        "i",
        "batch",
        "positionsToInsert",
        "positionType",
        "positionData",
        "name",
        "courtName",
        "courtCounts",
        "updated",
        "judgeCount",
        "courtCount",
        "success",
        "endTime",
        "duration",
        "schemaReady",
        "positionsSuccess",
        "verificationSuccess",
        "migration"
      ],
      "call_graph": {}
    },
    "scripts\\quick-fix-data-integrity.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "quickFixDataIntegrity": "async ()"
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "courtNameUpdates",
        "courtCountUpdates"
      ],
      "call_graph": {}
    },
    "scripts\\run-database-migrations.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "executeRollback",
            "runMigrations"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "DatabaseMigrationRunner": {
          "methods": {
            "constructor": "()",
            "validateEnvironment": "()",
            "createBackup": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "ManualMigrationGuide.run",
                "CourtListenerJudgesSyncService.run"
              ]
            },
            "loadMigrationSQL": {
              "signature": "async (filename)",
              "called_by": [
                "DatabaseMigrationRunner.executeMigration",
                "DatabaseMigrationRunner.executeRollback"
              ]
            },
            "executeMigration": {
              "calls": [
                "loadMigrationSQL"
              ],
              "signature": "async (migration)",
              "called_by": [
                "DatabaseMigrationRunner.runMigrations"
              ]
            },
            "executeRollback": {
              "calls": [
                "loadMigrationSQL"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "runMigrations": {
              "calls": [
                "createBackup",
                "executeMigration",
                "generateReport"
              ],
              "signature": "async (specificMigration = null)",
              "called_by": [
                "main"
              ]
            },
            "verifyMigrations": "async ()",
            "generateReport": {
              "signature": "async (results, backupPath)",
              "called_by": [
                "CourtListenerJudgesSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "CourtListenerSyncService.run",
                "DatabaseIntegrityChecker.runAllChecks",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "__init__": "()"
          },
          "doc": "Database Migration Runner"
        }
      },
      "variables": [
        "fs",
        "path",
        "required",
        "missing",
        "backupData",
        "backupPath",
        "filePath",
        "sql",
        "statements",
        "successCount",
        "errorCount",
        "results",
        "migrationsToRun",
        "result",
        "report",
        "endTime",
        "totalMigrations",
        "successfulMigrations",
        "failedMigrations",
        "verified",
        "success",
        "args",
        "isRollback",
        "migrationArg",
        "specificMigration",
        "runner"
      ],
      "call_graph": {}
    },
    "scripts\\run-validation.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "./validate-court-judge-relationships",
        "path",
        "fs"
      ],
      "functions": {
        "showUsage": {
          "signature": "()",
          "called_by": [
            "main"
          ]
        },
        "checkPrerequisites": {
          "signature": "async ()",
          "called_by": [
            "main"
          ]
        },
        "main": {
          "calls": [
            "checkPrerequisites",
            "runQuickValidation",
            "showUsage"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "QuickValidator": {
          "methods": {
            "runQuickValidation": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "validateCoreApiEndpoints": "async ()",
            "validateSampleCourtJudges": "async ()"
          },
          "extends": "CourtJudgeValidator",
          "doc": "Quick validation runner script"
        }
      },
      "variables": [
        "path",
        "fs",
        "args",
        "isQuickMode",
        "showHelp",
        "overallStartTime",
        "overallDuration",
        "coreEndpoints",
        "missingFields",
        "court",
        "packageJson",
        "requiredEnvVars",
        "missingEnvVars",
        "serverUrl",
        "response",
        "prereqsPassed",
        "validator",
        "reportPath",
        "reportData"
      ],
      "call_graph": {}
    },
    "scripts\\schema-verification.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "getDetailedCounts",
            "performCompleteVerification"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "SchemaVerifier": {
          "methods": {
            "constructor": "()",
            "checkTableColumns": "async (tableName, expectedColumns)",
            "checkTableExists": {
              "signature": "async (tableName)",
              "called_by": [
                "PositionsTableCreator.run",
                "main"
              ]
            },
            "performCompleteVerification": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "getDetailedCounts": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Database Schema Verification"
        }
      },
      "variables": [
        "availableColumns",
        "missingColumns",
        "hasAllColumns",
        "results",
        "courtsReady",
        "judgesReady",
        "positionsReady",
        "allReady",
        "verifier",
        "verification"
      ],
      "call_graph": {}
    },
    "scripts\\seed-judge-cases.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "seedJudgeCases": {
          "calls": [
            "generateCase"
          ],
          "signature": "async ()"
        },
        "generateCaseName": {
          "calls": [
            "getRandomCompany",
            "getRandomName"
          ],
          "signature": "(caseType, caseNumber)",
          "called_by": [
            "generateCase"
          ]
        },
        "getRandomName": {
          "signature": "()",
          "called_by": [
            "generateCaseName",
            "getRandomCompany"
          ]
        },
        "getRandomCompany": {
          "calls": [
            "getRandomCompany",
            "getRandomName"
          ],
          "signature": "()",
          "called_by": [
            "generateCaseName",
            "getRandomCompany"
          ]
        },
        "generateCaseNumber": {
          "signature": "(year, index, judgeId)",
          "called_by": [
            "generateCase"
          ]
        },
        "generateRandomDate": "(startDaysAgo = 1095, endDaysAgo = 0)",
        "generateDateInYear": {
          "signature": "(year)",
          "called_by": [
            "generateCase"
          ]
        },
        "generateCaseSummary": {
          "signature": "(caseType, outcome)",
          "called_by": [
            "generateCase"
          ]
        },
        "selectCaseType": {
          "signature": "()",
          "called_by": [
            "generateCase"
          ]
        },
        "generateCase": {
          "calls": [
            "generateCaseName",
            "generateCaseNumber",
            "generateCaseSummary",
            "generateDateInYear",
            "selectCaseType"
          ],
          "signature": "(judgeId, courtId, index, year = null)",
          "called_by": [
            "seedJudgeCases"
          ]
        }
      },
      "classes": {},
      "constants": {
        "CASE_TYPES": "collection"
      },
      "variables": [
        "supabase",
        "generateCaseName",
        "names",
        "companies",
        "getRandomName",
        "getRandomCompany",
        "generateCaseNumber",
        "prefixes",
        "prefix",
        "formattedIndex",
        "timestamp",
        "judgeHash",
        "generateRandomDate",
        "now",
        "start",
        "end",
        "randomTime",
        "generateDateInYear",
        "month",
        "day",
        "date",
        "generateCaseSummary",
        "summaries",
        "typeSummaries",
        "selectCaseType",
        "totalWeight",
        "random",
        "generateCase",
        "caseType",
        "filingYear",
        "filingDate",
        "statusRandom",
        "filingTime",
        "maxDecisionDelay",
        "decisionTime",
        "maxTime",
        "maxSettlementDelay",
        "settlementTime",
        "caseNumber",
        "caseName",
        "summary",
        "totalCasesCreated",
        "casesPerYearPerJudge",
        "years",
        "batchSize",
        "i",
        "judgeBatch",
        "totalCasesForJudge",
        "allCases",
        "caseIndex",
        "j"
      ],
      "call_graph": {}
    },
    "scripts\\seo-audit.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "runSEOAudit": "async ()"
      },
      "classes": {},
      "variables": [
        "fs",
        "path",
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "audit",
        "judgeCount",
        "courtCount",
        "judgesWithBio",
        "judgesWithEducation",
        "judgesWithAppointmentDate",
        "contentScore",
        "urlIssues",
        "slug",
        "urlScore",
        "courtsWithAddress",
        "courtsWithPhone",
        "courtsWithWebsite",
        "localSEOScore",
        "technicalChecks",
        "sitemapExists",
        "robotsExists",
        "technicalScore",
        "overallScore",
        "reportPath"
      ],
      "call_graph": {}
    },
    "scripts\\setup-revenue-tracking.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\setup-user-auth-simple.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "setupUserTables": "async ()"
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase"
      ],
      "call_graph": {}
    },
    "scripts\\setup-user-auth.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs"
      ],
      "functions": {
        "setupUserTables": "async ()"
      },
      "classes": {},
      "variables": [
        "fs",
        "supabaseUrl",
        "supabaseServiceKey",
        "supabase",
        "sqlContent",
        "statements"
      ],
      "call_graph": {}
    },
    "scripts\\simple-data-fixes.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "simpleDataFixes": "async ()"
      },
      "classes": {},
      "variables": [
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "defaultCourt",
        "batchSize",
        "updated",
        "i",
        "batch",
        "judgeIds"
      ],
      "call_graph": {}
    },
    "scripts\\supabase-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "child_process"
      ],
      "functions": {
        "checkAndCreateUserTables": "async ()"
      },
      "classes": {},
      "variables": [
        "fs",
        "supabase",
        "tables",
        "existingTables",
        "result"
      ],
      "call_graph": {}
    },
    "scripts\\sync-courtlistener-courts.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "CourtListenerSyncService": {
          "methods": {
            "constructor": "()",
            "validateEnvironment": "()",
            "createBackup": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "ManualMigrationGuide.run",
                "CourtListenerJudgesSyncService.run"
              ]
            },
            "fetchAllCourts": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerSyncService.run"
              ]
            },
            "makeApiRequest": {
              "signature": "async (url)",
              "called_by": [
                "CourtJudgeValidator.validateFrontendIntegration",
                "CourtJudgeValidator.validateCourtJudgeRelationships",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "TestCourtListenerSync.testSync",
                "CourtJudgeValidator.validateCaliforniaJudgesAccessibility",
                "CourtJudgeValidator.validatePerformance"
              ]
            },
            "mapCourtData": {
              "calls": [
                "buildAddress",
                "isLocalCourt",
                "normalizeJurisdiction"
              ],
              "signature": "(courtData)",
              "called_by": [
                "TestCourtListenerSync.testSync"
              ]
            },
            "normalizeJurisdiction": {
              "signature": "(clJurisdiction)",
              "called_by": [
                "CourtListenerSyncService.mapCourtData"
              ]
            },
            "isLocalCourt": {
              "signature": "(courtData)",
              "called_by": [
                "CourtListenerSyncService.mapCourtData"
              ]
            },
            "buildAddress": {
              "signature": "(courtData)",
              "called_by": [
                "CourtListenerSyncService.mapCourtData"
              ]
            },
            "syncCourts": {
              "signature": "async (courtsData)",
              "called_by": [
                "CourtListenerSyncService.run"
              ]
            },
            "generateReport": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "CourtListenerSyncService.run",
                "DatabaseIntegrityChecker.runAllChecks",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "sleep": {
              "signature": "async (ms)",
              "called_by": [
                "retryWithBackoff",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "run": {
              "calls": [
                "createBackup",
                "fetchAllCourts",
                "generateReport",
                "syncCourts"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "CourtListener Courts Sync Script"
        }
      },
      "variables": [
        "fs",
        "path",
        "required",
        "missing",
        "backupData",
        "backupPath",
        "allCourts",
        "nextUrl",
        "pageCount",
        "response",
        "headers",
        "fetch",
        "errorText",
        "jurisdiction",
        "courtType",
        "address",
        "metadata",
        "jurisdictionMap",
        "localIndicators",
        "courtName",
        "addressParts",
        "i",
        "courtData",
        "progress",
        "mappedData",
        "endTime",
        "duration",
        "success",
        "courtsData",
        "report",
        "syncService",
        "result"
      ],
      "call_graph": {}
    },
    "scripts\\sync-courtlistener-judges.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "CourtListenerJudgesSyncService": {
          "methods": {
            "constructor": "()",
            "validateEnvironment": "()",
            "createBackup": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "ManualMigrationGuide.run",
                "CourtListenerJudgesSyncService.run"
              ]
            },
            "loadCourtMappings": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesSyncService.run"
              ]
            },
            "fetchAllJudges": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesSyncService.run"
              ]
            },
            "fetchPersonPositions": "async (person)",
            "hasJudgePositions": "(person)",
            "makeApiRequest": {
              "signature": "async (url)",
              "called_by": [
                "CourtJudgeValidator.validateFrontendIntegration",
                "CourtJudgeValidator.validateCourtJudgeRelationships",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "TestCourtListenerSync.testSync",
                "CourtJudgeValidator.validateCaliforniaJudgesAccessibility",
                "CourtJudgeValidator.validatePerformance"
              ]
            },
            "mapJudgeData": {
              "calls": [
                "buildBiography",
                "buildFullName",
                "extractEducation",
                "processPositions"
              ],
              "signature": "async (personData)"
            },
            "buildFullName": {
              "signature": "(personData)",
              "called_by": [
                "CourtListenerJudgesSyncService.mapJudgeData"
              ]
            },
            "extractEducation": {
              "signature": "(personData)",
              "called_by": [
                "CourtListenerJudgesSyncService.mapJudgeData"
              ]
            },
            "buildBiography": {
              "signature": "(personData)",
              "called_by": [
                "CourtListenerJudgesSyncService.mapJudgeData"
              ]
            },
            "processPositions": {
              "signature": "async (positions)",
              "called_by": [
                "CourtListenerJudgesSyncService.mapJudgeData"
              ]
            },
            "isJudgePosition": "(position)",
            "getCourtMapping": "(position)",
            "determineJurisdiction": "(position)",
            "syncJudges": {
              "signature": "async (judgesData)",
              "called_by": [
                "CourtListenerJudgesSyncService.run"
              ]
            },
            "generateReport": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "CourtListenerSyncService.run",
                "DatabaseIntegrityChecker.runAllChecks",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "sleep": {
              "signature": "async (ms)",
              "called_by": [
                "retryWithBackoff",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "run": {
              "calls": [
                "createBackup",
                "fetchAllJudges",
                "generateReport",
                "loadCourtMappings",
                "syncJudges"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "CourtListener Judges Sync Script"
        }
      },
      "variables": [
        "fs",
        "path",
        "required",
        "missing",
        "backupData",
        "backupPath",
        "allJudges",
        "nextUrl",
        "pageCount",
        "response",
        "judgesOnPage",
        "personWithPositions",
        "detailedPositions",
        "positionData",
        "judgeTypes",
        "headers",
        "fetch",
        "errorText",
        "fullName",
        "education",
        "bio",
        "courtlistenerData",
        "mappedJudge",
        "parts",
        "educationEntries",
        "bioParts",
        "birthPlace",
        "affiliations",
        "ratings",
        "judgePositions",
        "allPositions",
        "primaryCourtId",
        "primaryCourtName",
        "primaryAppointmentDate",
        "jurisdiction",
        "courtMapping",
        "courtId",
        "i",
        "judgeData",
        "progress",
        "endTime",
        "duration",
        "success",
        "courtCount",
        "judgesData",
        "report",
        "syncService",
        "result"
      ],
      "call_graph": {}
    },
    "scripts\\sync-judge-decisions.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "dotenv",
        "url",
        "path"
      ],
      "functions": {
        "main": "async ()"
      },
      "classes": {
        "CourtListenerClient": {
          "methods": {
            "constructor": "()",
            "sleep": {
              "signature": "async (ms)",
              "called_by": [
                "retryWithBackoff",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "makeRequest": "async (endpoint, params = {})",
            "getRecentOpinionsByJudge": "async (judgeId, yearsBack = 3)",
            "transformOpinionToCase": "(caseData, judgeId)",
            "__init__": "()"
          },
          "doc": "Sync Judge Decisions from CourtListener API"
        }
      },
      "variables": [
        "url",
        "headers",
        "response",
        "errorText",
        "data",
        "endDate",
        "startDate",
        "params",
        "allCases",
        "offset",
        "hasMore",
        "cluster",
        "caseData",
        "caseName",
        "decisionDate",
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "courtListener",
        "caseCountMap",
        "count",
        "judgesPriority",
        "batchSize",
        "processed",
        "successful",
        "totalCasesAdded",
        "i",
        "batch",
        "cases",
        "transformedCases",
        "uniqueCases",
        "existingCaseIds",
        "clIds",
        "newCases",
        "chunkSize",
        "insertedCount",
        "j",
        "chunk",
        "newCaseCountMap",
        "judgesWithCases"
      ],
      "call_graph": {}
    },
    "scripts\\test-all-api-endpoints.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "axios"
      ],
      "functions": {
        "testEndpoint": {
          "signature": "async (endpoint)",
          "called_by": [
            "runPerformanceTests",
            "runAPITests"
          ]
        },
        "testPage": {
          "signature": "async (page)",
          "called_by": [
            "runAPITests"
          ]
        },
        "runAPITests": {
          "calls": [
            "testEndpoint",
            "testPage"
          ],
          "signature": "async ()"
        }
      },
      "classes": {},
      "constants": {
        "BASE_URL": "str",
        "TEST_TIMEOUT": "number",
        "API_ENDPOINTS": "collection",
        "PAGES_TO_TEST": "collection"
      },
      "variables": [
        "axios",
        "url",
        "startTime",
        "response",
        "responseTime",
        "dataSize",
        "hasContent",
        "passedTests",
        "failedTests",
        "results",
        "result",
        "apiResults",
        "avgResponseTime",
        "slowestEndpoint",
        "fastestEndpoint",
        "dataEndpoints",
        "judgeListResult",
        "kpiResult"
      ],
      "call_graph": {}
    },
    "scripts\\test-analytics-api.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "testAnalyticsAPI": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "judgeId",
        "judgeName",
        "stats",
        "caseType",
        "outcome",
        "summary"
      ],
      "call_graph": {}
    },
    "scripts\\test-analytics.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "testAnalytics": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "judgeId",
        "judgeName",
        "casesByType",
        "casesByStatus",
        "casesDecided",
        "type",
        "status"
      ],
      "call_graph": {}
    },
    "scripts\\test-automated-sync.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js",
        "dotenv",
        "url",
        "path",
        "fs"
      ],
      "functions": {
        "main": {
          "calls": [
            "runAllTests"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "AutomatedSyncTester": {
          "methods": {
            "constructor": "()",
            "runAllTests": {
              "calls": [
                "printSummary",
                "testAdminDashboard",
                "testCronEndpoints",
                "testDatabaseSetup",
                "testQueueManagement",
                "testSyncEndpoints",
                "testWebhookEndpoint"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "testDatabaseSetup": {
              "calls": [
                "addResult"
              ],
              "signature": "async ()",
              "called_by": [
                "AutomatedSyncTester.runAllTests"
              ]
            },
            "testSyncEndpoints": {
              "signature": "async ()",
              "called_by": [
                "AutomatedSyncTester.runAllTests"
              ]
            },
            "testQueueManagement": {
              "calls": [
                "addResult"
              ],
              "signature": "async ()",
              "called_by": [
                "AutomatedSyncTester.runAllTests"
              ]
            },
            "testAdminDashboard": {
              "calls": [
                "addResult"
              ],
              "signature": "async ()",
              "called_by": [
                "AutomatedSyncTester.runAllTests"
              ]
            },
            "testWebhookEndpoint": {
              "calls": [
                "addResult"
              ],
              "signature": "async ()",
              "called_by": [
                "AutomatedSyncTester.runAllTests"
              ]
            },
            "testCronEndpoints": {
              "signature": "async ()",
              "called_by": [
                "AutomatedSyncTester.runAllTests"
              ]
            },
            "addResult": {
              "signature": "(category, test, passed)",
              "called_by": [
                "AutomatedSyncTester.testQueueManagement",
                "AutomatedSyncTester.testAdminDashboard",
                "AutomatedSyncTester.testDatabaseSetup",
                "AutomatedSyncTester.testWebhookEndpoint"
              ]
            },
            "printSummary": {
              "signature": "()",
              "called_by": [
                "AutomatedSyncTester.runAllTests"
              ]
            },
            "__init__": "()"
          },
          "doc": "Test Automated Sync System"
        }
      },
      "constants": {
        "SYNC_API_KEY": "value"
      },
      "variables": [
        "sqlPath",
        "tables",
        "endpoints",
        "getResponse",
        "data",
        "postResponse",
        "testJob",
        "response",
        "verifyResponse",
        "challenge",
        "cronEndpoints",
        "categories",
        "totalPassed",
        "totalTests",
        "categoryResults",
        "passed",
        "total",
        "icon",
        "tester"
      ],
      "call_graph": {}
    },
    "scripts\\test-courtlistener-judges-sync.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "CourtListenerJudgesTestService": {
          "methods": {
            "constructor": "()",
            "validateEnvironment": "()",
            "testApiConnectivity": {
              "calls": [
                "makeApiRequest",
                "sleep"
              ],
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesTestService.run"
              ]
            },
            "sleep": {
              "signature": "async (ms)",
              "called_by": [
                "retryWithBackoff",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "makeApiRequest": {
              "signature": "async (url)",
              "called_by": [
                "CourtJudgeValidator.validateFrontendIntegration",
                "CourtJudgeValidator.validateCourtJudgeRelationships",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "TestCourtListenerSync.testSync",
                "CourtJudgeValidator.validateCaliforniaJudgesAccessibility",
                "CourtJudgeValidator.validatePerformance"
              ]
            },
            "testCourtMappings": {
              "calls": [
                "forEach"
              ],
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesTestService.run"
              ]
            },
            "analyzeSampleJudges": {
              "signature": "async (sampleData)",
              "called_by": [
                "CourtListenerJudgesTestService.run"
              ]
            },
            "hasJudgePositions": "(person)",
            "isJudgePosition": "(position)",
            "buildFullName": {
              "signature": "(personData)",
              "called_by": [
                "CourtListenerJudgesSyncService.mapJudgeData"
              ]
            },
            "testDatabaseConnectivity": {
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesTestService.run"
              ]
            },
            "run": {
              "calls": [
                "analyzeSampleJudges",
                "forEach",
                "testApiConnectivity",
                "testCourtMappings",
                "testDatabaseConnectivity"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Test CourtListener Judges Sync Script"
        }
      },
      "variables": [
        "required",
        "missing",
        "url",
        "response",
        "firstPerson",
        "positionUrl",
        "positionData",
        "detailedPositions",
        "posData",
        "headers",
        "fetch",
        "errorText",
        "judgeCount",
        "positionCount",
        "positionTypes",
        "allPositionTypes",
        "educationCount",
        "hasJudgePositions",
        "fullName",
        "parties",
        "ratings",
        "judgeTypes",
        "parts",
        "courtMappingCount",
        "sampleData",
        "analysis",
        "ready",
        "issues",
        "testService",
        "result"
      ],
      "call_graph": {}
    },
    "scripts\\test-courtlistener-sync.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "testSync"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "TestCourtListenerSync": {
          "methods": {
            "constructor": "()",
            "makeApiRequest": {
              "signature": "async (url)",
              "called_by": [
                "CourtJudgeValidator.validateFrontendIntegration",
                "CourtJudgeValidator.validateCourtJudgeRelationships",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "TestCourtListenerSync.testSync",
                "CourtJudgeValidator.validateCaliforniaJudgesAccessibility",
                "CourtJudgeValidator.validatePerformance"
              ]
            },
            "testSync": {
              "calls": [
                "makeApiRequest",
                "mapCourtData"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "mapCourtData": {
              "signature": "(courtData)",
              "called_by": [
                "TestCourtListenerSync.testSync"
              ]
            },
            "normalizeJurisdiction": {
              "signature": "(clJurisdiction)",
              "called_by": [
                "CourtListenerSyncService.mapCourtData"
              ]
            },
            "isLocalCourt": {
              "signature": "(courtData)",
              "called_by": [
                "CourtListenerSyncService.mapCourtData"
              ]
            },
            "buildAddress": {
              "signature": "(courtData)",
              "called_by": [
                "CourtListenerSyncService.mapCourtData"
              ]
            },
            "__init__": "()"
          },
          "doc": "Test CourtListener Courts Sync Script"
        }
      },
      "variables": [
        "headers",
        "fetch",
        "response",
        "url",
        "testCourt",
        "mappedData",
        "jurisdiction",
        "courtType",
        "address",
        "map",
        "indicators",
        "name",
        "parts",
        "tester",
        "result"
      ],
      "call_graph": {}
    },
    "scripts\\test-courtlistener.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "dotenv",
        "url",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "testJudgeOpinions"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "SimpleCourtListenerClient": {
          "methods": {
            "constructor": "()",
            "testJudgeOpinions": {
              "signature": "async (judgeId, judgeName)",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Test CourtListener API Integration"
        }
      },
      "variables": [
        "url",
        "headers",
        "response",
        "errorText",
        "data",
        "caseName",
        "caseId",
        "date",
        "client",
        "testJudges"
      ],
      "call_graph": {}
    },
    "scripts\\test-judge-url.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js",
        "../lib/utils/slug.ts"
      ],
      "functions": {
        "testJudgeUrls": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "generatedSlug",
        "dbSlug"
      ],
      "call_graph": {}
    },
    "scripts\\test-missing-columns.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "testMissingColumns": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase"
      ],
      "call_graph": {}
    },
    "scripts\\test-seed-cases.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "testSeedCases": {
          "calls": [
            "generateUniqueCase"
          ],
          "signature": "async ()"
        },
        "generateUniqueCase": {
          "signature": "(judgeId, index)",
          "called_by": [
            "testSeedCases"
          ]
        }
      },
      "classes": {},
      "variables": [
        "supabase",
        "generateUniqueCase",
        "caseTypes",
        "caseType",
        "outcomes",
        "names",
        "randomName1",
        "randomName2",
        "now",
        "filingDate",
        "decisionDate",
        "timestamp",
        "judgeShort",
        "caseNumber",
        "status",
        "outcome",
        "cases",
        "i",
        "batchSize",
        "batch"
      ],
      "call_graph": {}
    },
    "scripts\\test-seed-small.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js",
        "./seed-judge-cases.js"
      ],
      "functions": {
        "testSeedSmall": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "totalCasesCreated",
        "casesPerJudge",
        "cases",
        "j"
      ],
      "call_graph": {}
    },
    "scripts\\test-single-analytics.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "testSingleAnalytics": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "testJudge",
        "response",
        "analyticsData",
        "isWorking"
      ],
      "call_graph": {}
    },
    "scripts\\update-recent-decisions.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "dotenv",
        "url",
        "path"
      ],
      "functions": {
        "main": "async ()"
      },
      "classes": {
        "CourtListenerClient": {
          "methods": {
            "constructor": "()",
            "sleep": {
              "signature": "async (ms)",
              "called_by": [
                "retryWithBackoff",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "makeRequest": "async (endpoint, params = {})",
            "getRecentCasesSince": "async (judgeId, sinceDate)",
            "transformCaseToRecord": "(caseCluster, judgeId)",
            "__init__": "()"
          },
          "doc": "Incremental Update of Recent Judge Decisions"
        }
      },
      "variables": [
        "url",
        "headers",
        "response",
        "errorText",
        "data",
        "params",
        "allCases",
        "offset",
        "hasMore",
        "cluster",
        "supabaseUrl",
        "supabaseKey",
        "supabase",
        "courtListener",
        "cutoffDate",
        "lastDecisionMap",
        "judgesNeedingUpdate",
        "lastDecisionDate",
        "daysSince",
        "processed",
        "successful",
        "totalCasesAdded",
        "lastDate",
        "thirtyDaysAgo",
        "recentCases",
        "transformedCases",
        "clIds",
        "existingIds",
        "newCases"
      ],
      "call_graph": {}
    },
    "scripts\\url-accessibility-test.js": {
      "language": "javascript",
      "parsed": true,
      "purpose": "Test file",
      "imports": [
        "@supabase/supabase-js",
        "node-fetch",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "runAccessibilityTest"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "URLAccessibilityTester": {
          "methods": {
            "constructor": "()",
            "runAccessibilityTest": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "getAllJudges": "async ()",
            "testAllJudgeURLs": "async (judges)",
            "testSingleURL": "async (judge)",
            "generateAccessibilityReport": "async ()",
            "calculateResponseTimeDistribution": "()",
            "generateAccessibilityRecommendations": "(issueCategories)",
            "printAccessibilitySummary": "(report)",
            "createBatches": "(array, batchSize)",
            "delay": "(ms)",
            "generateSlugFromName": {
              "signature": "(name)",
              "called_by": [
                "JudicialValidationSystem.testJudgeProfileURL"
              ]
            },
            "isValidSlug": {
              "signature": "(slug)",
              "called_by": [
                "generateSlugVariations",
                "isValidSlugVariation"
              ]
            },
            "__init__": "()"
          },
          "doc": "SPECIALIZED URL ACCESSIBILITY TESTING"
        }
      },
      "constants": {
        "CONFIG": "collection"
      },
      "variables": [
        "fetch",
        "fs",
        "path",
        "judges",
        "responseTimes",
        "batches",
        "i",
        "batchPromises",
        "batchResults",
        "judge",
        "testResult",
        "tested",
        "total",
        "slug",
        "lastError",
        "attempt",
        "startTime",
        "response",
        "endTime",
        "contentType",
        "successRate",
        "issueCategories",
        "report",
        "reportPath",
        "times",
        "recommendations",
        "tester"
      ],
      "call_graph": {}
    },
    "scripts\\validate-court-judge-relationships.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js",
        "fs",
        "path"
      ],
      "functions": {
        "main": {
          "calls": [
            "runFullValidation"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "ValidationReporter": {
          "methods": {
            "constructor": "()",
            "log": {
              "signature": "(message, level = 'info')",
              "called_by": [
                "CourtJudgeValidator.validateCourtJudgeRelationships",
                "ValidationReporter.generateReport"
              ]
            },
            "addTest": {
              "signature": "(category, testName, status, details = {})",
              "called_by": [
                "CourtJudgeValidator.validateCaliforniaJudgesAccessibility",
                "CourtJudgeValidator.validateCourtJudgeRelationships",
                "CourtJudgeValidator.validatePerformance",
                "CourtJudgeValidator.validateFrontendIntegration"
              ]
            },
            "addPerformanceMetric": {
              "signature": "(name, value, threshold = null)",
              "called_by": [
                "CourtJudgeValidator.validatePerformance"
              ]
            },
            "addRecommendation": "(category, message, priority = 'medium')",
            "addDetailedError": "(category, error, context = {})",
            "generateReport": {
              "calls": [
                "log"
              ],
              "signature": "async ()",
              "called_by": [
                "CourtListenerJudgesSyncService.run",
                "DatabaseMigrationRunner.runMigrations",
                "CourtListenerSyncService.run",
                "DatabaseIntegrityChecker.runAllChecks",
                "JudgeCourtDataMigrator.runMigration"
              ]
            },
            "printSummary": {
              "signature": "()",
              "called_by": [
                "AutomatedSyncTester.runAllTests"
              ]
            },
            "__init__": "()"
          },
          "doc": "Comprehensive Court-Judge Relationship Validation Script"
        },
        "CourtJudgeValidator": {
          "methods": {
            "constructor": "()",
            "initialize": "async ()",
            "makeApiRequest": {
              "signature": "async (url, options = {})",
              "called_by": [
                "CourtJudgeValidator.validateFrontendIntegration",
                "CourtJudgeValidator.validateCourtJudgeRelationships",
                "CourtListenerJudgesTestService.testApiConnectivity",
                "TestCourtListenerSync.testSync",
                "CourtJudgeValidator.validateCaliforniaJudgesAccessibility",
                "CourtJudgeValidator.validatePerformance"
              ]
            },
            "validateCourtJudgeRelationships": {
              "calls": [
                "addTest",
                "log",
                "makeApiRequest",
                "validateSingleCourtJudges"
              ],
              "signature": "async ()",
              "called_by": [
                "DatabaseIntegrityChecker.runAllChecks"
              ]
            },
            "validateSingleCourtJudges": {
              "signature": "async (court)",
              "called_by": [
                "CourtJudgeValidator.validateCourtJudgeRelationships"
              ]
            },
            "validateCaliforniaJudgesAccessibility": {
              "calls": [
                "addTest",
                "makeApiRequest"
              ],
              "signature": "async ()"
            },
            "validateApiEndpoints": "async ()",
            "testErrorHandling": "async ()",
            "validateDataIntegrity": "async ()",
            "validatePerformance": {
              "calls": [
                "addPerformanceMetric",
                "addTest",
                "makeApiRequest"
              ],
              "signature": "async ()"
            },
            "validateFrontendIntegration": {
              "calls": [
                "addTest",
                "makeApiRequest"
              ],
              "signature": "async ()"
            },
            "generateRecommendations": "()",
            "runFullValidation": {
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Comprehensive Court-Judge Relationship Validation Script"
        }
      },
      "constants": {
        "SUPABASE_URL": "value"
      },
      "variables": [
        "fs",
        "path",
        "timestamp",
        "prefix",
        "test",
        "categoryTests",
        "hasFailures",
        "hasWarnings",
        "successRate",
        "statusIcon",
        "controller",
        "timeoutId",
        "startTime",
        "response",
        "endTime",
        "duration",
        "data",
        "courts",
        "hasCorrectStructure",
        "apiJudgeIds",
        "dbJudgeIds",
        "missingInApi",
        "extraInApi",
        "judgesWithPositions",
        "totalCAJudges",
        "pagesToTest",
        "totalAccessibleJudges",
        "page",
        "californiaJudges",
        "nonCAJudges",
        "endpoints",
        "missingFields",
        "errorTests",
        "validCourtIds",
        "inaccurateCounts",
        "actualCount",
        "largeDatasetTime",
        "concurrentStartTime",
        "concurrentPromises",
        "concurrentTime",
        "requiredJudgeFields",
        "judges",
        "firstJudge",
        "court",
        "overallStartTime",
        "overallDuration",
        "validator"
      ],
      "call_graph": {}
    },
    "scripts\\verify-data-integrity.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "verifyDataIntegrity": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "totalJudges",
        "judgesWithCases",
        "avgCasesPerJudge",
        "judgeIds",
        "caCases",
        "totalCases",
        "uniqueJudges",
        "decidedCases",
        "settledCases",
        "pendingCases",
        "casesSince2022",
        "earliestCase",
        "latestCase",
        "stats",
        "since2022Percentage",
        "typeDistribution",
        "type",
        "sortedTypes",
        "percentage",
        "cachedAnalytics",
        "cachePercentage",
        "recentCacheCount",
        "cacheAge",
        "actualCaseCount",
        "years",
        "types",
        "totalRecentCases",
        "cachedCount"
      ],
      "call_graph": {}
    },
    "scripts\\verify-migrations.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "verify": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase"
      ],
      "call_graph": {}
    },
    "scripts\\verify-rls-policies.sql": {
      "language": "sql",
      "parsed": false
    },
    "scripts\\verify-slug-migration.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "verifySlugMigration": "async ()"
      },
      "classes": {},
      "variables": [
        "supabase",
        "judgesWithSlugs",
        "totalJudges"
      ],
      "call_graph": {}
    },
    "scripts\\verify-table-state.js": {
      "language": "javascript",
      "parsed": true,
      "imports": [
        "@supabase/supabase-js"
      ],
      "functions": {
        "main": {
          "calls": [
            "run"
          ],
          "signature": "async ()"
        }
      },
      "classes": {
        "TableStateVerifier": {
          "methods": {
            "constructor": "()",
            "verifyTableExistence": {
              "signature": "async ()",
              "called_by": [
                "TableStateVerifier.run"
              ]
            },
            "verifyOtherTables": {
              "signature": "async ()",
              "called_by": [
                "TableStateVerifier.run"
              ]
            },
            "checkSchemaColumns": {
              "signature": "async ()",
              "called_by": [
                "TableStateVerifier.run"
              ]
            },
            "run": {
              "calls": [
                "checkSchemaColumns",
                "verifyOtherTables",
                "verifyTableExistence"
              ],
              "signature": "async ()",
              "called_by": [
                "main"
              ]
            },
            "__init__": "()"
          },
          "doc": "Verify Table State"
        }
      },
      "variables": [
        "results",
        "testData",
        "tables",
        "tableResults",
        "tableExists",
        "verifier",
        "exists"
      ],
      "call_graph": {}
    },
    "supabase\\migrations\\20250817_001_add_courtlistener_fields.sql": {
      "language": "sql",
      "parsed": false
    },
    "supabase\\migrations\\20250817_002_create_judge_court_positions.sql": {
      "language": "sql",
      "parsed": false
    },
    "supabase\\migrations\\20250817_003_add_performance_indexes.sql": {
      "language": "sql",
      "parsed": false
    },
    "supabase\\migrations\\20250817_004_rollback_migration.sql": {
      "language": "sql",
      "parsed": false
    },
    "supabase\\migrations\\20250820_001_add_judge_slug_column.sql": {
      "language": "sql",
      "parsed": false
    },
    "supabase\\migrations\\20250821_001_add_court_slug_column.sql": {
      "language": "sql",
      "parsed": false
    },
    "supabase\\migrations\\20250821_002_add_rpc_function.sql": {
      "language": "sql",
      "parsed": false
    },
    "types\\global.d.ts": {
      "language": "typescript",
      "parsed": false
    },
    "types\\index.ts": {
      "language": "typescript",
      "parsed": false,
      "purpose": "Application entry point"
    },
    "types\\search.ts": {
      "language": "typescript",
      "parsed": false
    }
  },
  "dependency_graph": {
    "JudgeFinderNavLogo.jsx": [
      "framer-motion"
    ],
    "middleware.ts": [
      "@clerk/nextjs/server",
      "next/server",
      "@/lib/middleware/judge-redirects"
    ],
    "app\\error.tsx": [
      "react"
    ],
    "app\\layout.tsx": [
      "@/components/providers/Providers",
      "@/components/ui/Header",
      "@/components/ui/Footer",
      "@/components/error/GlobalErrorBoundary",
      "next"
    ],
    "app\\page.tsx": [
      "@/components/judges/SearchSection",
      "@/components/judges/PopularCourts",
      "@/components/ui/WhatYoullLearn",
      "@/components/ui/WhyJudgeResearch",
      "@/components/seo/StructuredData",
      "next/link"
    ],
    "app\\sitemap.ts": [
      "@/lib/supabase/server",
      "@/lib/utils/slug"
    ],
    "app\\about\\page.tsx": [
      "lucide-react"
    ],
    "app\\admin\\page.tsx": [
      "@clerk/nextjs/server",
      "next/navigation",
      "@/lib/auth/admin",
      "@/components/dashboard/AdminDashboard"
    ],
    "app\\api\\admin\\bias-analytics\\route.ts": [
      "next/server",
      "@clerk/nextjs/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\admin\\migrate\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\admin\\stats\\route.ts": [
      "@clerk/nextjs/server",
      "@/lib/auth/admin",
      "@/lib/supabase/server",
      "next/server"
    ],
    "app\\api\\admin\\sync\\route.ts": [
      "@clerk/nextjs/server",
      "@/lib/auth/admin",
      "next/server"
    ],
    "app\\api\\admin\\sync-status\\route.ts": [
      "next/server",
      "@supabase/supabase-js",
      "@/lib/sync/queue-manager",
      "@/lib/utils/logger"
    ],
    "app\\api\\admin\\verification\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\analytics\\conversion\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "next/headers"
    ],
    "app\\api\\analytics\\kpi\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\analytics\\performance\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\analytics\\revenue\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\analytics\\revenue\\county\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\attorney-slots\\claim\\route.ts": [
      "next/server",
      "@/lib/stripe"
    ],
    "app\\api\\auth\\callback\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\auth\\test\\route.ts": [
      "next/server",
      "@clerk/nextjs/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\courts\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\courts\\by-slug\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/utils/slug",
      "@/lib/cache/simple-cache"
    ],
    "app\\api\\courts\\top-by-cases\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\courts\\[id]\\judges\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/utils/logger",
      "@/lib/utils/validation",
      "zod"
    ],
    "app\\api\\cron\\daily-sync\\route.ts": [
      "next/server",
      "@/lib/sync/queue-manager",
      "@/lib/utils/logger"
    ],
    "app\\api\\cron\\weekly-sync\\route.ts": [
      "next/server",
      "@/lib/sync/queue-manager",
      "@/lib/utils/logger"
    ],
    "app\\api\\health\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\advanced-search\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/utils/logger",
      "@/lib/utils/validation"
    ],
    "app\\api\\judges\\by-slug\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/utils/slug",
      "@/lib/cache/simple-cache",
      "@/lib/utils/logger",
      "@/lib/utils/type-guards"
    ],
    "app\\api\\judges\\by-state\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\la-county\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\list\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/utils/logger",
      "@/lib/utils/validation"
    ],
    "app\\api\\judges\\orange-county\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\recent-decisions\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\redirect\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/utils/slug"
    ],
    "app\\api\\judges\\related\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\search\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/rate-limit",
      "@clerk/nextjs/server"
    ],
    "app\\api\\judges\\[id]\\analytics\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/ai/judicial-analytics"
    ],
    "app\\api\\judges\\[id]\\assignments\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/types"
    ],
    "app\\api\\judges\\[id]\\bias-analysis\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\[id]\\case-outcomes\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\[id]\\recent-cases\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\judges\\[id]\\slots\\route.ts": [
      "next/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\pricing\\resolve\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/utils/logger"
    ],
    "app\\api\\search\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@/lib/utils/logger",
      "@/lib/utils/validation"
    ],
    "app\\api\\security\\csp-report\\route.ts": [
      "next/server"
    ],
    "app\\api\\security\\ct-report\\route.ts": [
      "next/server"
    ],
    "app\\api\\seo\\search-console\\route.ts": [
      "next/server"
    ],
    "app\\api\\sync\\courts\\route.ts": [
      "next/server",
      "@/lib/sync/court-sync",
      "@/lib/utils/logger"
    ],
    "app\\api\\sync\\decisions\\route.ts": [
      "next/server",
      "@/lib/sync/decision-sync",
      "@/lib/utils/logger"
    ],
    "app\\api\\sync\\judges\\route.ts": [
      "next/server",
      "@/lib/sync/judge-sync",
      "@/lib/utils/logger",
      "@/lib/rate-limit"
    ],
    "app\\api\\user\\activity\\route.ts": [
      "next/server",
      "@clerk/nextjs/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\user\\bookmarks\\route.ts": [
      "next/server",
      "@clerk/nextjs/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\user\\preferences\\route.ts": [
      "next/server",
      "@clerk/nextjs/server",
      "@/lib/supabase/server"
    ],
    "app\\api\\user\\stats\\route.ts": [
      "next/server",
      "@/lib/supabase/server",
      "@clerk/nextjs/server"
    ],
    "app\\api\\webhooks\\courtlistener\\route.ts": [
      "next/server",
      "@/lib/sync/queue-manager",
      "@/lib/utils/logger",
      "crypto"
    ],
    "app\\attorneys\\page.tsx": [
      "lucide-react",
      "next/link",
      "next"
    ],
    "app\\blog\\page.tsx": [
      "lucide-react",
      "next/link"
    ],
    "app\\compare\\page.tsx": [
      "react",
      "next/navigation",
      "lucide-react",
      "next/link"
    ],
    "app\\counties\\layout.tsx": [
      "react"
    ],
    "app\\counties\\los-angeles\\page.tsx": [
      "react",
      "next",
      "@/components/ui/CountySelector",
      "@heroicons/react/24/outline",
      "fs",
      "path"
    ],
    "app\\courts\\page.old.tsx": [
      "react",
      "lucide-react",
      "next/link"
    ],
    "app\\courts\\page.tsx": [
      "@/components/courts/CourtsSearch",
      "@/lib/supabase/server"
    ],
    "app\\courts\\[id]\\page.tsx": [
      "next/navigation",
      "lucide-react",
      "next/link",
      "@/lib/supabase/server",
      "@/components/courts/CourtJudgesSection",
      "@/lib/utils/slug"
    ],
    "app\\dashboard\\page.tsx": [
      "@clerk/nextjs/server",
      "next/navigation",
      "@/components/dashboard/UserDashboard"
    ],
    "app\\dashboard\\bookmarks\\page.tsx": [
      "@clerk/nextjs/server",
      "next/navigation",
      "next/link",
      "lucide-react",
      "@/lib/supabase/server",
      "@/lib/utils/slug"
    ],
    "app\\docs\\page.tsx": [
      "lucide-react"
    ],
    "app\\features\\page.tsx": [
      "lucide-react"
    ],
    "app\\forgot-password\\page.tsx": [
      "react",
      "@/lib/supabase/client",
      "next/link",
      "lucide-react"
    ],
    "app\\judges\\page.tsx": [
      "react",
      "lucide-react",
      "next/link",
      "@/lib/utils/slug",
      "@/lib/hooks/useDebounce",
      "@/components/ui/Skeleton"
    ],
    "app\\judges\\advanced-search\\page.tsx": [
      "@/components/judges/EnhancedJudgeSearch",
      "next"
    ],
    "app\\judges\\[slug]\\page-modular.tsx": [
      "next",
      "next/navigation",
      "@/lib/utils/slug",
      "@/components/analytics/SEOMonitoring",
      "@/components/seo/SEOBreadcrumbs",
      "@/components/seo/RelatedJudges",
      "@/components/ads/GoogleAd",
      "@/components/judges/profile/JudgeStructuredData",
      "@/components/judges/profile/JudgeHeroSection",
      "@/components/judges/profile/AttorneyDirectoryBanner",
      "@/components/judges/profile/JudgeMainContent",
      "@/components/judges/profile/JudgeFAQSection"
    ],
    "app\\judges\\[slug]\\page.tsx": [
      "next/navigation",
      "@/components/judges/JudgeProfile",
      "@/components/judges/JudgeRulingPatterns",
      "@/components/judges/RecentDecisions",
      "@/components/judges/AttorneySlots",
      "@/components/judges/JudgeFAQ",
      "@/components/judges/AnalyticsSliders",
      "@/components/judges/BiasPatternAnalysis",
      "@/components/judges/CaseOutcomeStatistics",
      "@/components/judges/BookmarkButton",
      "@/components/ads/GoogleAd",
      "@/components/seo/SEOBreadcrumbs",
      "@/components/seo/RelatedJudges",
      "@/components/seo/RelatedContent",
      "@/components/analytics/SEOMonitoring",
      "@/lib/utils/slug",
      "@/lib/seo/metadata-generator",
      "@/lib/seo/structured-data",
      "@/lib/seo/content-generator"
    ],
    "app\\jurisdictions\\page.tsx": [
      "@/lib/supabase/server",
      "next/link",
      "lucide-react",
      "next"
    ],
    "app\\jurisdictions\\[county]\\page.tsx": [
      "react",
      "lucide-react",
      "next/link",
      "next/navigation"
    ],
    "app\\legal-specialties\\page.tsx": [
      "@/lib/supabase/server",
      "next/link",
      "lucide-react",
      "next"
    ],
    "app\\login\\page.tsx": [
      "react",
      "next/navigation",
      "@/lib/supabase/client",
      "next/link",
      "lucide-react"
    ],
    "app\\profile\\page.tsx": [
      "@clerk/nextjs/server",
      "next/navigation",
      "@/components/profile/ProfileSettings"
    ],
    "app\\search\\page.tsx": [
      "react",
      "next/navigation",
      "lucide-react",
      "next/link"
    ],
    "app\\sign-in\\[[...sign-in]]\\page.tsx": [
      "@clerk/nextjs"
    ],
    "app\\sign-up\\[[...sign-up]]\\page.tsx": [
      "@clerk/nextjs"
    ],
    "app\\signup\\page.tsx": [
      "react",
      "next/navigation",
      "@/lib/supabase/client",
      "next/link",
      "lucide-react"
    ],
    "app\\support\\page.tsx": [
      "lucide-react"
    ],
    "app\\welcome\\page.tsx": [
      "@clerk/nextjs/server",
      "next/navigation",
      "@/components/onboarding/OnboardingWizard"
    ],
    "components\\ads\\GoogleAd.tsx": [
      "react"
    ],
    "components\\analytics\\SEOMonitoring.tsx": [
      "react",
      "@/lib/analytics/seo-monitoring"
    ],
    "components\\courts\\CourtJudgesSection.tsx": [
      "react",
      "lucide-react",
      "next/link"
    ],
    "components\\courts\\CourtsSearch.tsx": [
      "react",
      "lucide-react",
      "next/link",
      "@/lib/hooks/useDebounce",
      "@/components/ui/Skeleton",
      "@/lib/utils/slug"
    ],
    "components\\dashboard\\AdminDashboard.tsx": [
      "@clerk/nextjs",
      "react",
      "lucide-react",
      "next/link"
    ],
    "components\\dashboard\\BiasAnalyticsDashboard.tsx": [
      "react",
      "recharts",
      "lucide-react"
    ],
    "components\\dashboard\\UserDashboard.tsx": [
      "react",
      "next/link",
      "@clerk/nextjs/server",
      "lucide-react"
    ],
    "components\\error\\ApiErrorBoundary.tsx": [
      "lucide-react",
      "next/link"
    ],
    "components\\error\\FormErrorBoundary.tsx": [
      "lucide-react"
    ],
    "components\\judges\\AdvancedSearchFilters.tsx": [
      "react",
      "lucide-react"
    ],
    "components\\judges\\AnalyticsSliders.tsx": [
      "react"
    ],
    "components\\judges\\AttorneySlots.tsx": [
      "react",
      "lucide-react"
    ],
    "components\\judges\\BiasPatternAnalysis.tsx": [
      "react",
      "recharts",
      "lucide-react"
    ],
    "components\\judges\\BookmarkButton.tsx": [
      "react",
      "@clerk/nextjs",
      "lucide-react"
    ],
    "components\\judges\\CaseOutcomeStatistics.tsx": [
      "react",
      "recharts",
      "lucide-react"
    ],
    "components\\judges\\EnhancedJudgeSearch.tsx": [
      "react",
      "lucide-react",
      "next/link",
      "components/judges/AdvancedSearchFilters.tsx",
      "@/lib/utils/slug"
    ],
    "components\\judges\\JudgeClientWrapper.tsx": [
      "react",
      "components/judges/JudgeErrorBoundary.tsx"
    ],
    "components\\judges\\JudgeErrorBoundary.tsx": [
      "react",
      "lucide-react",
      "next/link"
    ],
    "components\\judges\\JudgeFAQ.tsx": [
      "react",
      "lucide-react"
    ],
    "components\\judges\\JudgeProfile.tsx": [
      "lucide-react",
      "react",
      "next/link"
    ],
    "components\\judges\\JudgeRulingPatterns.tsx": [
      "react",
      "lucide-react"
    ],
    "components\\judges\\Phase2CaseHistory.tsx": [
      "@/components/ui/card",
      "@/components/ui/badge",
      "@/components/ui/button",
      "recharts",
      "lucide-react"
    ],
    "components\\judges\\PopularCourts.tsx": [
      "next/link",
      "lucide-react",
      "react"
    ],
    "components\\judges\\RecentDecisions.tsx": [
      "lucide-react",
      "react"
    ],
    "components\\judges\\SearchSection.tsx": [
      "react",
      "next/navigation",
      "lucide-react"
    ],
    "components\\judges\\profile\\AttorneyDirectoryBanner.tsx": [
      "next/link",
      "lucide-react"
    ],
    "components\\judges\\profile\\JudgeFAQSection.tsx": [
      "lucide-react",
      "react"
    ],
    "components\\judges\\profile\\JudgeMainContent.tsx": [
      "lucide-react"
    ],
    "components\\onboarding\\OnboardingWizard.tsx": [
      "react",
      "next/navigation",
      "@clerk/nextjs/server",
      "@clerk/nextjs",
      "lucide-react"
    ],
    "components\\profile\\ProfileSettings.tsx": [
      "react",
      "@clerk/nextjs/server",
      "lucide-react",
      "@clerk/nextjs"
    ],
    "components\\providers\\Providers.tsx": [
      "@clerk/nextjs",
      "react"
    ],
    "components\\seo\\RelatedContent.tsx": [
      "next/link",
      "@/components/ui/card",
      "@/components/ui/badge"
    ],
    "components\\seo\\RelatedJudges.tsx": [
      "react",
      "next/link",
      "lucide-react"
    ],
    "components\\seo\\SEOBreadcrumbs.tsx": [
      "next/link",
      "lucide-react"
    ],
    "components\\ui\\badge.tsx": [
      "react",
      "class-variance-authority",
      "@/lib/utils/index"
    ],
    "components\\ui\\CountyComparison.tsx": [
      "@heroicons/react/24/outline"
    ],
    "components\\ui\\CountySelector.tsx": [
      "next/navigation",
      "@heroicons/react/24/outline"
    ],
    "components\\ui\\Footer.tsx": [
      "next/link",
      "lucide-react"
    ],
    "components\\ui\\Header.tsx": [
      "next/link",
      "react",
      "lucide-react",
      "@clerk/nextjs",
      "components/ui/NavLogo.tsx"
    ],
    "components\\ui\\NavLogo.tsx": [
      "next/link",
      "framer-motion"
    ],
    "components\\ui\\Skeleton.tsx": [
      "@/lib/utils"
    ],
    "components\\ui\\WhatYoullLearn.tsx": [
      "lucide-react"
    ],
    "lib\\rate-limit.ts": [
      "@upstash/ratelimit",
      "@upstash/redis"
    ],
    "lib\\ai\\judicial-analytics.js": [
      "@google/generative-ai",
      "openai"
    ],
    "lib\\auth\\admin.ts": [
      "@clerk/nextjs/server"
    ],
    "lib\\courtlistener\\client.ts": [
      "@/lib/utils/helpers"
    ],
    "lib\\hooks\\useDebounce.ts": [
      "react"
    ],
    "lib\\middleware\\judge-redirects.ts": [
      "next/server",
      "@/lib/utils/slug"
    ],
    "lib\\seo\\content-generator.ts": [
      "@/lib/utils/slug"
    ],
    "lib\\seo\\metadata-generator.ts": [
      "@/lib/utils/slug"
    ],
    "lib\\seo\\structured-data.ts": [
      "@/lib/utils/slug"
    ],
    "lib\\supabase\\client.ts": [
      "@supabase/ssr",
      "@clerk/nextjs"
    ],
    "lib\\supabase\\server.ts": [
      "@supabase/ssr",
      "next/headers",
      "@clerk/nextjs/server"
    ],
    "lib\\sync\\court-sync.ts": [
      "@supabase/supabase-js",
      "@/lib/courtlistener/client",
      "@/lib/utils/logger"
    ],
    "lib\\sync\\decision-sync.ts": [
      "@supabase/supabase-js",
      "@/lib/courtlistener/client",
      "@/lib/utils/logger"
    ],
    "lib\\sync\\judge-sync.ts": [
      "@supabase/supabase-js",
      "@/lib/courtlistener/client",
      "@/lib/utils/logger"
    ],
    "lib\\sync\\queue-manager.ts": [
      "@supabase/supabase-js",
      "@/lib/utils/logger",
      "lib/sync/court-sync.ts",
      "lib/sync/judge-sync.ts",
      "lib/sync/decision-sync.ts"
    ],
    "lib\\utils\\index.ts": [
      "clsx",
      "tailwind-merge"
    ],
    "lib\\utils\\validation.ts": [
      "zod",
      "next/server",
      "lib/utils/logger.ts"
    ],
    "scripts\\add-court-slugs-simple.js": [
      "@supabase/supabase-js",
      "dotenv"
    ],
    "scripts\\add-slug-column-simple.js": [
      "@supabase/supabase-js",
      "fs"
    ],
    "scripts\\apply-court-slug-migration.js": [
      "@supabase/supabase-js",
      "fs",
      "path",
      "url"
    ],
    "scripts\\apply-indexes.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\apply-migrations-direct.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\apply-migrations.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\apply-revenue-schema.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\apply-slug-migration.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\apply-user-tables-migration.js": [
      "@supabase/supabase-js",
      "fs"
    ],
    "scripts\\automated-assignment-updater.js": [
      "@supabase/supabase-js",
      "node-cron"
    ],
    "scripts\\batch-generate-analytics.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\complete-migration-process.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\comprehensive-validation.js": [
      "@supabase/supabase-js",
      "node-fetch",
      "fs",
      "path",
      "child_process",
      "fs",
      "path"
    ],
    "scripts\\court-assignment-validator.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\create-analytics-cache-table.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\create-missing-table.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\create-positions-table.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\data-integrity-validator.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\database-integrity-check.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\debug-table-existence.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\demo-analytics.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\direct-migration.js": [
      "pg",
      "fs"
    ],
    "scripts\\execute-full-migration.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\execute-migrations-direct.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\execute-migrations.js": [
      "@supabase/supabase-js",
      "fs"
    ],
    "scripts\\execute-minimal-migration.js": [
      "@supabase/supabase-js",
      "readline",
      "scripts/migrate-existing-judge-court-data.js"
    ],
    "scripts\\fix-judge-court-assignments.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\fix-orphaned-cases.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\investigate-ca-judges.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\manual-migration-via-insert.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\migrate-existing-court-assignments.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\migrate-existing-judge-court-data.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\migration-completion-guide.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\migration-direct.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\performance-test.js": [
      "perf_hooks"
    ],
    "scripts\\populate-court-slugs.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\post-manual-migration.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\quick-fix-data-integrity.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\run-database-migrations.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\run-validation.js": [
      "scripts/validate-court-judge-relationships.js",
      "path",
      "fs"
    ],
    "scripts\\schema-verification.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\seed-judge-cases.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\seo-audit.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\setup-user-auth-simple.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\setup-user-auth.js": [
      "@supabase/supabase-js",
      "fs"
    ],
    "scripts\\simple-data-fixes.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\supabase-migration.js": [
      "@supabase/supabase-js",
      "fs",
      "child_process"
    ],
    "scripts\\sync-courtlistener-courts.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\sync-courtlistener-judges.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\sync-judge-decisions.js": [
      "@supabase/supabase-js",
      "dotenv",
      "url",
      "path"
    ],
    "scripts\\test-all-api-endpoints.js": [
      "axios"
    ],
    "scripts\\test-analytics-api.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\test-analytics.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\test-automated-sync.js": [
      "@supabase/supabase-js",
      "dotenv",
      "url",
      "path",
      "fs"
    ],
    "scripts\\test-courtlistener-judges-sync.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\test-courtlistener-sync.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\test-courtlistener.js": [
      "dotenv",
      "url",
      "path"
    ],
    "scripts\\test-judge-url.js": [
      "@supabase/supabase-js",
      "lib/utils/slug.ts"
    ],
    "scripts\\test-missing-columns.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\test-seed-cases.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\test-seed-small.js": [
      "@supabase/supabase-js",
      "scripts/seed-judge-cases.js"
    ],
    "scripts\\test-single-analytics.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\update-recent-decisions.js": [
      "@supabase/supabase-js",
      "dotenv",
      "url",
      "path"
    ],
    "scripts\\url-accessibility-test.js": [
      "@supabase/supabase-js",
      "node-fetch",
      "fs",
      "path"
    ],
    "scripts\\validate-court-judge-relationships.js": [
      "@supabase/supabase-js",
      "fs",
      "path"
    ],
    "scripts\\verify-data-integrity.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\verify-migrations.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\verify-slug-migration.js": [
      "@supabase/supabase-js"
    ],
    "scripts\\verify-table-state.js": [
      "@supabase/supabase-js"
    ]
  },
  "staleness_check": 1755213382.674248
}